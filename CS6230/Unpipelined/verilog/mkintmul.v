//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Tue Nov 26 10:33:31 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1 const
// RDY_get_B                      O     1 const
// RDY_get_C                      O     1 const
// get_output                     O    32 reg
// RDY_get_output                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintmul(CLK,
		RST_N,

		get_A_a,
		EN_get_A,
		RDY_get_A,

		get_B_b,
		EN_get_B,
		RDY_get_B,

		get_C_c,
		EN_get_C,
		RDY_get_C,

		get_output,
		RDY_get_output);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // value method get_output
  output [31 : 0] get_output;
  output RDY_get_output;

  // signals for module outputs
  wire [31 : 0] get_output;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_output;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_out
  reg [31 : 0] add_out;
  wire [31 : 0] add_out_D_IN;
  wire add_out_EN;

  // register counter
  reg [4 : 0] counter;
  wire [4 : 0] counter_D_IN;
  wire counter_EN;

  // register finish
  reg finish;
  wire finish_D_IN, finish_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_result
  reg got_result;
  wire got_result_D_IN, got_result_EN;

  // register inpA
  reg [15 : 0] inpA;
  wire [15 : 0] inpA_D_IN;
  wire inpA_EN;

  // register inpB
  reg [15 : 0] inpB;
  wire [15 : 0] inpB_D_IN;
  wire inpB_EN;

  // register inpC
  reg [31 : 0] inpC;
  wire [31 : 0] inpC_D_IN;
  wire inpC_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_out
  reg [31 : 0] mul_out;
  wire [31 : 0] mul_out_D_IN;
  wire mul_out_EN;

  // register prepmul
  reg prepmul;
  wire prepmul_D_IN, prepmul_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // register temp
  reg [15 : 0] temp;
  wire [15 : 0] temp_D_IN;
  wire temp_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_finished,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_done,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       WILL_FIRE_RL_finished,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_done,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_inpA_write_1__VAL_2,
		MUX_inpB_write_1__VAL_2,
		MUX_temp_write_1__VAL_1;
  wire [4 : 0] MUX_counter_write_1__VAL_2;
  wire MUX_temp_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h9304;
  reg [31 : 0] v__h9476;
  reg [31 : 0] v__h9515;
  reg [31 : 0] v__h15475;
  // synopsys translate_on

  // remaining internal signals
  wire [29 : 0] mul_out_81_BIT_29_90_XOR_inpC_83_BIT_29_91_93__ETC___d515;
  wire [27 : 0] mul_out_81_BIT_27_98_XOR_inpC_83_BIT_27_99_01__ETC___d514;
  wire [25 : 0] mul_out_81_BIT_25_06_XOR_inpC_83_BIT_25_07_09__ETC___d513;
  wire [23 : 0] mul_out_81_BIT_23_14_XOR_inpC_83_BIT_23_15_17__ETC___d512;
  wire [21 : 0] mul_out_81_BIT_21_22_XOR_inpC_83_BIT_21_23_25__ETC___d511;
  wire [19 : 0] mul_out_81_BIT_19_30_XOR_inpC_83_BIT_19_31_33__ETC___d510;
  wire [17 : 0] mul_out_81_BIT_17_38_XOR_inpC_83_BIT_17_39_41__ETC___d509;
  wire [15 : 0] INV_inpA__q1,
		mul_out_81_BIT_15_46_XOR_inpC_83_BIT_15_47_49__ETC___d508,
		temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d161,
		temp_5_BIT_15_6_XOR_inpA_7_BIT_15_62_63_XOR_te_ETC___d259;
  wire [13 : 0] mul_out_81_BIT_13_54_XOR_inpC_83_BIT_13_55_57__ETC___d507,
		temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d160,
		temp_5_BIT_13_5_XOR_inpA_7_BIT_13_67_69_XOR_te_ETC___d258;
  wire [11 : 0] mul_out_81_BIT_11_62_XOR_inpC_83_BIT_11_63_65__ETC___d506,
		temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d159,
		temp_5_BIT_11_3_XOR_inpA_7_BIT_11_73_75_XOR_te_ETC___d257;
  wire [9 : 0] mul_out_81_BIT_9_70_XOR_inpC_83_BIT_9_71_73_XO_ETC___d505,
	       temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d158,
	       temp_5_BIT_9_1_XOR_inpA_7_BIT_9_79_81_XOR_temp_ETC___d256;
  wire [7 : 0] mul_out_81_BIT_7_78_XOR_inpC_83_BIT_7_79_81_XO_ETC___d504,
	       temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d157,
	       temp_5_BIT_7_9_XOR_inpA_7_BIT_7_85_87_XOR_temp_ETC___d255;
  wire [5 : 0] mul_out_81_BIT_5_86_XOR_inpC_83_BIT_5_87_89_XO_ETC___d503,
	       temp_5_BIT_5_7_XOR_INV_inpA_7_8_BIT_5_9_XOR_IN_ETC___d156,
	       temp_5_BIT_5_7_XOR_inpA_7_BIT_5_91_93_XOR_temp_ETC___d254;
  wire [3 : 0] mul_out_81_BIT_3_94_XOR_inpC_83_BIT_3_95_97_XO_ETC___d502,
	       temp_5_BIT_3_5_XOR_INV_inpA_7_8_BIT_3_1_XOR_IN_ETC___d155,
	       temp_5_BIT_3_5_XOR_inpA_7_BIT_3_97_99_XOR_temp_ETC___d253;
  wire x__h10426,
       x__h10486,
       x__h10591,
       x__h10696,
       x__h10801,
       x__h10906,
       x__h11011,
       x__h11116,
       x__h1121,
       x__h11221,
       x__h11326,
       x__h11431,
       x__h11536,
       x__h11641,
       x__h11746,
       x__h11851,
       x__h11956,
       x__h12061,
       x__h12166,
       x__h12271,
       x__h12376,
       x__h12481,
       x__h12586,
       x__h12691,
       x__h12796,
       x__h12901,
       x__h13006,
       x__h13111,
       x__h13216,
       x__h13321,
       x__h13426,
       x__h13531,
       x__h13676,
       x__h13733,
       x__h13790,
       x__h13847,
       x__h13904,
       x__h13961,
       x__h14018,
       x__h14075,
       x__h14132,
       x__h14189,
       x__h14246,
       x__h14303,
       x__h14360,
       x__h14417,
       x__h14474,
       x__h14531,
       x__h14588,
       x__h14645,
       x__h14702,
       x__h14759,
       x__h14816,
       x__h14873,
       x__h14930,
       x__h14987,
       x__h15044,
       x__h15101,
       x__h15158,
       x__h15215,
       x__h15272,
       x__h15329,
       x__h3983,
       x__h4029,
       x__h4086,
       x__h4132,
       x__h4189,
       x__h4235,
       x__h4292,
       x__h4338,
       x__h4395,
       x__h4441,
       x__h4498,
       x__h4544,
       x__h4601,
       x__h4647,
       x__h4704,
       x__h4750,
       x__h4807,
       x__h4853,
       x__h4910,
       x__h4956,
       x__h5013,
       x__h5059,
       x__h5116,
       x__h5162,
       x__h5219,
       x__h5265,
       x__h5322,
       x__h5368,
       x__h6751,
       x__h6810,
       x__h6915,
       x__h7020,
       x__h7125,
       x__h7230,
       x__h7335,
       x__h7440,
       x__h7545,
       x__h7650,
       x__h7755,
       x__h7860,
       x__h7965,
       x__h8070,
       x__h8175,
       x__h8320,
       x__h8377,
       x__h8434,
       x__h8491,
       x__h8548,
       x__h8605,
       x__h8662,
       x__h8719,
       x__h8776,
       x__h8833,
       x__h8890,
       x__h8947,
       x__h9004,
       x__h9061,
       y__h10427,
       y__h10487,
       y__h10592,
       y__h10697,
       y__h10802,
       y__h10907,
       y__h11012,
       y__h11117,
       y__h1122,
       y__h11222,
       y__h1124,
       y__h11327,
       y__h11432,
       y__h11537,
       y__h11642,
       y__h11747,
       y__h11852,
       y__h11957,
       y__h12062,
       y__h12167,
       y__h12272,
       y__h12377,
       y__h12482,
       y__h12587,
       y__h12692,
       y__h12797,
       y__h12902,
       y__h13007,
       y__h13112,
       y__h13217,
       y__h13322,
       y__h13427,
       y__h13532,
       y__h13677,
       y__h13734,
       y__h13791,
       y__h13848,
       y__h13905,
       y__h13962,
       y__h14019,
       y__h14076,
       y__h14133,
       y__h14190,
       y__h14247,
       y__h14304,
       y__h14361,
       y__h14418,
       y__h14475,
       y__h14532,
       y__h14589,
       y__h14646,
       y__h14703,
       y__h14760,
       y__h14817,
       y__h14874,
       y__h14931,
       y__h14988,
       y__h15045,
       y__h15102,
       y__h15159,
       y__h15216,
       y__h15273,
       y__h15330,
       y__h1601,
       y__h1707,
       y__h1810,
       y__h1913,
       y__h2016,
       y__h2119,
       y__h2222,
       y__h2325,
       y__h2428,
       y__h2531,
       y__h2634,
       y__h2737,
       y__h2840,
       y__h2943,
       y__h3984,
       y__h3986,
       y__h4030,
       y__h4087,
       y__h4089,
       y__h4133,
       y__h4190,
       y__h4192,
       y__h4236,
       y__h4293,
       y__h4295,
       y__h4339,
       y__h4396,
       y__h4398,
       y__h4442,
       y__h4499,
       y__h4501,
       y__h4545,
       y__h4602,
       y__h4604,
       y__h4648,
       y__h4705,
       y__h4707,
       y__h4751,
       y__h4808,
       y__h4810,
       y__h4854,
       y__h4911,
       y__h4913,
       y__h4957,
       y__h5014,
       y__h5016,
       y__h5060,
       y__h5117,
       y__h5119,
       y__h5163,
       y__h5220,
       y__h5222,
       y__h5266,
       y__h5323,
       y__h5325,
       y__h5369,
       y__h6752,
       y__h6811,
       y__h6916,
       y__h7021,
       y__h7126,
       y__h7231,
       y__h7336,
       y__h7441,
       y__h7546,
       y__h7651,
       y__h7756,
       y__h7861,
       y__h7966,
       y__h8071,
       y__h8176,
       y__h8321,
       y__h8378,
       y__h8435,
       y__h8492,
       y__h8549,
       y__h8606,
       y__h8663,
       y__h8720,
       y__h8777,
       y__h8834,
       y__h8891,
       y__h8948,
       y__h9005,
       y__h9062;

  // action method get_A
  assign RDY_get_A = 1'd1 ;
  assign CAN_FIRE_get_A = 1'd1 ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = 1'd1 ;
  assign CAN_FIRE_get_B = 1'd1 ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = 1'd1 ;
  assign CAN_FIRE_get_C = 1'd1 ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // value method get_output
  assign get_output = add_out ;
  assign RDY_get_output = got_result ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     got_A && got_B && got_C && counter != 5'd0 && finish ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul =
	     !mul_done && counter == 5'd0 && !add_done && !got_result ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add = mul_done && !add_done && !got_result ;
  assign WILL_FIRE_RL_rl_add = CAN_FIRE_RL_rl_add ;

  // rule RL_rl_done
  assign CAN_FIRE_RL_rl_done = add_done && !got_result ;
  assign WILL_FIRE_RL_rl_done = CAN_FIRE_RL_rl_done ;

  // rule RL_finished
  assign CAN_FIRE_RL_finished = got_result ;
  assign WILL_FIRE_RL_finished = got_result ;

  // inputs to muxes for submodule ports
  assign MUX_temp_write_1__SEL_1 = WILL_FIRE_RL_rl_multiply && inpB[0] ;
  assign MUX_counter_write_1__VAL_2 = counter - 5'd1 ;
  assign MUX_inpA_write_1__VAL_2 = { inpA[14:0], 1'd0 } ;
  assign MUX_inpB_write_1__VAL_2 = { 1'd0, inpB[15:1] } ;
  assign MUX_temp_write_1__VAL_1 =
	     (counter == 5'd1) ?
	       temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d161 :
	       temp_5_BIT_15_6_XOR_inpA_7_BIT_15_62_63_XOR_te_ETC___d259 ;

  // register add_done
  assign add_done_D_IN = !WILL_FIRE_RL_rl_done ;
  assign add_done_EN = WILL_FIRE_RL_rl_done || WILL_FIRE_RL_rl_add ;

  // register add_out
  assign add_out_D_IN =
	     { x__h10426 ^ y__h10427,
	       x__h13676 ^ y__h13677,
	       mul_out_81_BIT_29_90_XOR_inpC_83_BIT_29_91_93__ETC___d515 } ;
  assign add_out_EN = CAN_FIRE_RL_rl_add ;

  // register counter
  assign counter_D_IN =
	     WILL_FIRE_RL_rl_done ? 5'd9 : MUX_counter_write_1__VAL_2 ;
  assign counter_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_rl_done ;

  // register finish
  assign finish_D_IN = !WILL_FIRE_RL_rl_mul ;
  assign finish_EN = WILL_FIRE_RL_rl_mul || got_result ;

  // register got_A
  assign got_A_D_IN = !got_result ;
  assign got_A_EN = got_result || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !got_result ;
  assign got_B_EN = got_result || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !got_result ;
  assign got_C_EN = got_result || EN_get_C ;

  // register got_result
  assign got_result_D_IN = !got_result ;
  assign got_result_EN = got_result || WILL_FIRE_RL_rl_done ;

  // register inpA
  assign inpA_D_IN = EN_get_A ? get_A_a : MUX_inpA_write_1__VAL_2 ;
  assign inpA_EN = EN_get_A || WILL_FIRE_RL_rl_multiply ;

  // register inpB
  assign inpB_D_IN = EN_get_B ? get_B_b : MUX_inpB_write_1__VAL_2 ;
  assign inpB_EN = EN_get_B || WILL_FIRE_RL_rl_multiply ;

  // register inpC
  assign inpC_D_IN = get_C_c ;
  assign inpC_EN = EN_get_C ;

  // register mul_done
  assign mul_done_D_IN = !got_result ;
  assign mul_done_EN = got_result || WILL_FIRE_RL_rl_mul ;

  // register mul_out
  assign mul_out_D_IN = { {16{temp[15]}}, temp } ;
  assign mul_out_EN = CAN_FIRE_RL_rl_mul ;

  // register prepmul
  assign prepmul_D_IN = 1'b0 ;
  assign prepmul_EN = 1'b0 ;

  // register select
  assign select_D_IN = 1'b0 ;
  assign select_EN = 1'b0 ;

  // register temp
  assign temp_D_IN =
	     MUX_temp_write_1__SEL_1 ? MUX_temp_write_1__VAL_1 : 16'd0 ;
  assign temp_EN =
	     WILL_FIRE_RL_rl_multiply && inpB[0] || WILL_FIRE_RL_rl_mul ;

  // remaining internal signals
  assign INV_inpA__q1 = ~inpA ;
  assign mul_out_81_BIT_11_62_XOR_inpC_83_BIT_11_63_65__ETC___d506 =
	     { x__h14759 ^ y__h14760,
	       x__h14816 ^ y__h14817,
	       mul_out_81_BIT_9_70_XOR_inpC_83_BIT_9_71_73_XO_ETC___d505 } ;
  assign mul_out_81_BIT_13_54_XOR_inpC_83_BIT_13_55_57__ETC___d507 =
	     { x__h14645 ^ y__h14646,
	       x__h14702 ^ y__h14703,
	       mul_out_81_BIT_11_62_XOR_inpC_83_BIT_11_63_65__ETC___d506 } ;
  assign mul_out_81_BIT_15_46_XOR_inpC_83_BIT_15_47_49__ETC___d508 =
	     { x__h14531 ^ y__h14532,
	       x__h14588 ^ y__h14589,
	       mul_out_81_BIT_13_54_XOR_inpC_83_BIT_13_55_57__ETC___d507 } ;
  assign mul_out_81_BIT_17_38_XOR_inpC_83_BIT_17_39_41__ETC___d509 =
	     { x__h14417 ^ y__h14418,
	       x__h14474 ^ y__h14475,
	       mul_out_81_BIT_15_46_XOR_inpC_83_BIT_15_47_49__ETC___d508 } ;
  assign mul_out_81_BIT_19_30_XOR_inpC_83_BIT_19_31_33__ETC___d510 =
	     { x__h14303 ^ y__h14304,
	       x__h14360 ^ y__h14361,
	       mul_out_81_BIT_17_38_XOR_inpC_83_BIT_17_39_41__ETC___d509 } ;
  assign mul_out_81_BIT_21_22_XOR_inpC_83_BIT_21_23_25__ETC___d511 =
	     { x__h14189 ^ y__h14190,
	       x__h14246 ^ y__h14247,
	       mul_out_81_BIT_19_30_XOR_inpC_83_BIT_19_31_33__ETC___d510 } ;
  assign mul_out_81_BIT_23_14_XOR_inpC_83_BIT_23_15_17__ETC___d512 =
	     { x__h14075 ^ y__h14076,
	       x__h14132 ^ y__h14133,
	       mul_out_81_BIT_21_22_XOR_inpC_83_BIT_21_23_25__ETC___d511 } ;
  assign mul_out_81_BIT_25_06_XOR_inpC_83_BIT_25_07_09__ETC___d513 =
	     { x__h13961 ^ y__h13962,
	       x__h14018 ^ y__h14019,
	       mul_out_81_BIT_23_14_XOR_inpC_83_BIT_23_15_17__ETC___d512 } ;
  assign mul_out_81_BIT_27_98_XOR_inpC_83_BIT_27_99_01__ETC___d514 =
	     { x__h13847 ^ y__h13848,
	       x__h13904 ^ y__h13905,
	       mul_out_81_BIT_25_06_XOR_inpC_83_BIT_25_07_09__ETC___d513 } ;
  assign mul_out_81_BIT_29_90_XOR_inpC_83_BIT_29_91_93__ETC___d515 =
	     { x__h13733 ^ y__h13734,
	       x__h13790 ^ y__h13791,
	       mul_out_81_BIT_27_98_XOR_inpC_83_BIT_27_99_01__ETC___d514 } ;
  assign mul_out_81_BIT_3_94_XOR_inpC_83_BIT_3_95_97_XO_ETC___d502 =
	     { x__h15215 ^ y__h15216,
	       x__h15272 ^ y__h15273,
	       x__h15329 ^ y__h15330,
	       mul_out[0] ^ inpC[0] } ;
  assign mul_out_81_BIT_5_86_XOR_inpC_83_BIT_5_87_89_XO_ETC___d503 =
	     { x__h15101 ^ y__h15102,
	       x__h15158 ^ y__h15159,
	       mul_out_81_BIT_3_94_XOR_inpC_83_BIT_3_95_97_XO_ETC___d502 } ;
  assign mul_out_81_BIT_7_78_XOR_inpC_83_BIT_7_79_81_XO_ETC___d504 =
	     { x__h14987 ^ y__h14988,
	       x__h15044 ^ y__h15045,
	       mul_out_81_BIT_5_86_XOR_inpC_83_BIT_5_87_89_XO_ETC___d503 } ;
  assign mul_out_81_BIT_9_70_XOR_inpC_83_BIT_9_71_73_XO_ETC___d505 =
	     { x__h14873 ^ y__h14874,
	       x__h14930 ^ y__h14931,
	       mul_out_81_BIT_7_78_XOR_inpC_83_BIT_7_79_81_XO_ETC___d504 } ;
  assign temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d159 =
	     { x__h4338 ^ y__h4339,
	       x__h4441 ^ y__h4442,
	       temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d158 } ;
  assign temp_5_BIT_11_3_XOR_inpA_7_BIT_11_73_75_XOR_te_ETC___d257 =
	     { x__h8491 ^ y__h8492,
	       x__h8548 ^ y__h8549,
	       temp_5_BIT_9_1_XOR_inpA_7_BIT_9_79_81_XOR_temp_ETC___d256 } ;
  assign temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d160 =
	     { x__h4132 ^ y__h4133,
	       x__h4235 ^ y__h4236,
	       temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d159 } ;
  assign temp_5_BIT_13_5_XOR_inpA_7_BIT_13_67_69_XOR_te_ETC___d258 =
	     { x__h8377 ^ y__h8378,
	       x__h8434 ^ y__h8435,
	       temp_5_BIT_11_3_XOR_inpA_7_BIT_11_73_75_XOR_te_ETC___d257 } ;
  assign temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d161 =
	     { x__h1121 ^ y__h1122,
	       x__h4029 ^ y__h4030,
	       temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d160 } ;
  assign temp_5_BIT_15_6_XOR_inpA_7_BIT_15_62_63_XOR_te_ETC___d259 =
	     { x__h6751 ^ y__h6752,
	       x__h8320 ^ y__h8321,
	       temp_5_BIT_13_5_XOR_inpA_7_BIT_13_67_69_XOR_te_ETC___d258 } ;
  assign temp_5_BIT_3_5_XOR_INV_inpA_7_8_BIT_3_1_XOR_IN_ETC___d155 =
	     { x__h5162 ^ y__h5163,
	       x__h5265 ^ y__h5266,
	       x__h5368 ^ y__h5369,
	       temp[0] ^ ~INV_inpA__q1[0] } ;
  assign temp_5_BIT_3_5_XOR_inpA_7_BIT_3_97_99_XOR_temp_ETC___d253 =
	     { x__h8947 ^ y__h8948,
	       x__h9004 ^ y__h9005,
	       x__h9061 ^ y__h9062,
	       temp[0] ^ inpA[0] } ;
  assign temp_5_BIT_5_7_XOR_INV_inpA_7_8_BIT_5_9_XOR_IN_ETC___d156 =
	     { x__h4956 ^ y__h4957,
	       x__h5059 ^ y__h5060,
	       temp_5_BIT_3_5_XOR_INV_inpA_7_8_BIT_3_1_XOR_IN_ETC___d155 } ;
  assign temp_5_BIT_5_7_XOR_inpA_7_BIT_5_91_93_XOR_temp_ETC___d254 =
	     { x__h8833 ^ y__h8834,
	       x__h8890 ^ y__h8891,
	       temp_5_BIT_3_5_XOR_inpA_7_BIT_3_97_99_XOR_temp_ETC___d253 } ;
  assign temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d157 =
	     { x__h4750 ^ y__h4751,
	       x__h4853 ^ y__h4854,
	       temp_5_BIT_5_7_XOR_INV_inpA_7_8_BIT_5_9_XOR_IN_ETC___d156 } ;
  assign temp_5_BIT_7_9_XOR_inpA_7_BIT_7_85_87_XOR_temp_ETC___d255 =
	     { x__h8719 ^ y__h8720,
	       x__h8776 ^ y__h8777,
	       temp_5_BIT_5_7_XOR_inpA_7_BIT_5_91_93_XOR_temp_ETC___d254 } ;
  assign temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d158 =
	     { x__h4544 ^ y__h4545,
	       x__h4647 ^ y__h4648,
	       temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d157 } ;
  assign temp_5_BIT_9_1_XOR_inpA_7_BIT_9_79_81_XOR_temp_ETC___d256 =
	     { x__h8605 ^ y__h8606,
	       x__h8662 ^ y__h8663,
	       temp_5_BIT_7_9_XOR_inpA_7_BIT_7_85_87_XOR_temp_ETC___d255 } ;
  assign x__h10426 = mul_out[31] ^ inpC[31] ;
  assign x__h10486 = mul_out[30] & inpC[30] ;
  assign x__h10591 = mul_out[29] & inpC[29] ;
  assign x__h10696 = mul_out[28] & inpC[28] ;
  assign x__h10801 = mul_out[27] & inpC[27] ;
  assign x__h10906 = mul_out[26] & inpC[26] ;
  assign x__h11011 = mul_out[25] & inpC[25] ;
  assign x__h11116 = mul_out[24] & inpC[24] ;
  assign x__h1121 = temp[15] ^ y__h1124 ;
  assign x__h11221 = mul_out[23] & inpC[23] ;
  assign x__h11326 = mul_out[22] & inpC[22] ;
  assign x__h11431 = mul_out[21] & inpC[21] ;
  assign x__h11536 = mul_out[20] & inpC[20] ;
  assign x__h11641 = mul_out[19] & inpC[19] ;
  assign x__h11746 = mul_out[18] & inpC[18] ;
  assign x__h11851 = mul_out[17] & inpC[17] ;
  assign x__h11956 = mul_out[16] & inpC[16] ;
  assign x__h12061 = mul_out[15] & inpC[15] ;
  assign x__h12166 = mul_out[14] & inpC[14] ;
  assign x__h12271 = mul_out[13] & inpC[13] ;
  assign x__h12376 = mul_out[12] & inpC[12] ;
  assign x__h12481 = mul_out[11] & inpC[11] ;
  assign x__h12586 = mul_out[10] & inpC[10] ;
  assign x__h12691 = mul_out[9] & inpC[9] ;
  assign x__h12796 = mul_out[8] & inpC[8] ;
  assign x__h12901 = mul_out[7] & inpC[7] ;
  assign x__h13006 = mul_out[6] & inpC[6] ;
  assign x__h13111 = mul_out[5] & inpC[5] ;
  assign x__h13216 = mul_out[4] & inpC[4] ;
  assign x__h13321 = mul_out[3] & inpC[3] ;
  assign x__h13426 = mul_out[2] & inpC[2] ;
  assign x__h13531 = mul_out[1] & inpC[1] ;
  assign x__h13676 = mul_out[30] ^ inpC[30] ;
  assign x__h13733 = mul_out[29] ^ inpC[29] ;
  assign x__h13790 = mul_out[28] ^ inpC[28] ;
  assign x__h13847 = mul_out[27] ^ inpC[27] ;
  assign x__h13904 = mul_out[26] ^ inpC[26] ;
  assign x__h13961 = mul_out[25] ^ inpC[25] ;
  assign x__h14018 = mul_out[24] ^ inpC[24] ;
  assign x__h14075 = mul_out[23] ^ inpC[23] ;
  assign x__h14132 = mul_out[22] ^ inpC[22] ;
  assign x__h14189 = mul_out[21] ^ inpC[21] ;
  assign x__h14246 = mul_out[20] ^ inpC[20] ;
  assign x__h14303 = mul_out[19] ^ inpC[19] ;
  assign x__h14360 = mul_out[18] ^ inpC[18] ;
  assign x__h14417 = mul_out[17] ^ inpC[17] ;
  assign x__h14474 = mul_out[16] ^ inpC[16] ;
  assign x__h14531 = mul_out[15] ^ inpC[15] ;
  assign x__h14588 = mul_out[14] ^ inpC[14] ;
  assign x__h14645 = mul_out[13] ^ inpC[13] ;
  assign x__h14702 = mul_out[12] ^ inpC[12] ;
  assign x__h14759 = mul_out[11] ^ inpC[11] ;
  assign x__h14816 = mul_out[10] ^ inpC[10] ;
  assign x__h14873 = mul_out[9] ^ inpC[9] ;
  assign x__h14930 = mul_out[8] ^ inpC[8] ;
  assign x__h14987 = mul_out[7] ^ inpC[7] ;
  assign x__h15044 = mul_out[6] ^ inpC[6] ;
  assign x__h15101 = mul_out[5] ^ inpC[5] ;
  assign x__h15158 = mul_out[4] ^ inpC[4] ;
  assign x__h15215 = mul_out[3] ^ inpC[3] ;
  assign x__h15272 = mul_out[2] ^ inpC[2] ;
  assign x__h15329 = mul_out[1] ^ inpC[1] ;
  assign x__h3983 = temp[14] & y__h3986 ;
  assign x__h4029 = temp[14] ^ y__h3986 ;
  assign x__h4086 = temp[13] & y__h4089 ;
  assign x__h4132 = temp[13] ^ y__h4089 ;
  assign x__h4189 = temp[12] & y__h4192 ;
  assign x__h4235 = temp[12] ^ y__h4192 ;
  assign x__h4292 = temp[11] & y__h4295 ;
  assign x__h4338 = temp[11] ^ y__h4295 ;
  assign x__h4395 = temp[10] & y__h4398 ;
  assign x__h4441 = temp[10] ^ y__h4398 ;
  assign x__h4498 = temp[9] & y__h4501 ;
  assign x__h4544 = temp[9] ^ y__h4501 ;
  assign x__h4601 = temp[8] & y__h4604 ;
  assign x__h4647 = temp[8] ^ y__h4604 ;
  assign x__h4704 = temp[7] & y__h4707 ;
  assign x__h4750 = temp[7] ^ y__h4707 ;
  assign x__h4807 = temp[6] & y__h4810 ;
  assign x__h4853 = temp[6] ^ y__h4810 ;
  assign x__h4910 = temp[5] & y__h4913 ;
  assign x__h4956 = temp[5] ^ y__h4913 ;
  assign x__h5013 = temp[4] & y__h5016 ;
  assign x__h5059 = temp[4] ^ y__h5016 ;
  assign x__h5116 = temp[3] & y__h5119 ;
  assign x__h5162 = temp[3] ^ y__h5119 ;
  assign x__h5219 = temp[2] & y__h5222 ;
  assign x__h5265 = temp[2] ^ y__h5222 ;
  assign x__h5322 = temp[1] & y__h5325 ;
  assign x__h5368 = temp[1] ^ y__h5325 ;
  assign x__h6751 = temp[15] ^ inpA[15] ;
  assign x__h6810 = temp[14] & inpA[14] ;
  assign x__h6915 = temp[13] & inpA[13] ;
  assign x__h7020 = temp[12] & inpA[12] ;
  assign x__h7125 = temp[11] & inpA[11] ;
  assign x__h7230 = temp[10] & inpA[10] ;
  assign x__h7335 = temp[9] & inpA[9] ;
  assign x__h7440 = temp[8] & inpA[8] ;
  assign x__h7545 = temp[7] & inpA[7] ;
  assign x__h7650 = temp[6] & inpA[6] ;
  assign x__h7755 = temp[5] & inpA[5] ;
  assign x__h7860 = temp[4] & inpA[4] ;
  assign x__h7965 = temp[3] & inpA[3] ;
  assign x__h8070 = temp[2] & inpA[2] ;
  assign x__h8175 = temp[1] & inpA[1] ;
  assign x__h8320 = temp[14] ^ inpA[14] ;
  assign x__h8377 = temp[13] ^ inpA[13] ;
  assign x__h8434 = temp[12] ^ inpA[12] ;
  assign x__h8491 = temp[11] ^ inpA[11] ;
  assign x__h8548 = temp[10] ^ inpA[10] ;
  assign x__h8605 = temp[9] ^ inpA[9] ;
  assign x__h8662 = temp[8] ^ inpA[8] ;
  assign x__h8719 = temp[7] ^ inpA[7] ;
  assign x__h8776 = temp[6] ^ inpA[6] ;
  assign x__h8833 = temp[5] ^ inpA[5] ;
  assign x__h8890 = temp[4] ^ inpA[4] ;
  assign x__h8947 = temp[3] ^ inpA[3] ;
  assign x__h9004 = temp[2] ^ inpA[2] ;
  assign x__h9061 = temp[1] ^ inpA[1] ;
  assign y__h10427 = x__h10486 | y__h10487 ;
  assign y__h10487 = x__h13676 & y__h13677 ;
  assign y__h10592 = x__h13733 & y__h13734 ;
  assign y__h10697 = x__h13790 & y__h13791 ;
  assign y__h10802 = x__h13847 & y__h13848 ;
  assign y__h10907 = x__h13904 & y__h13905 ;
  assign y__h11012 = x__h13961 & y__h13962 ;
  assign y__h11117 = x__h14018 & y__h14019 ;
  assign y__h1122 = x__h3983 | y__h3984 ;
  assign y__h11222 = x__h14075 & y__h14076 ;
  assign y__h1124 = INV_inpA__q1[15] ^ y__h1601 ;
  assign y__h11327 = x__h14132 & y__h14133 ;
  assign y__h11432 = x__h14189 & y__h14190 ;
  assign y__h11537 = x__h14246 & y__h14247 ;
  assign y__h11642 = x__h14303 & y__h14304 ;
  assign y__h11747 = x__h14360 & y__h14361 ;
  assign y__h11852 = x__h14417 & y__h14418 ;
  assign y__h11957 = x__h14474 & y__h14475 ;
  assign y__h12062 = x__h14531 & y__h14532 ;
  assign y__h12167 = x__h14588 & y__h14589 ;
  assign y__h12272 = x__h14645 & y__h14646 ;
  assign y__h12377 = x__h14702 & y__h14703 ;
  assign y__h12482 = x__h14759 & y__h14760 ;
  assign y__h12587 = x__h14816 & y__h14817 ;
  assign y__h12692 = x__h14873 & y__h14874 ;
  assign y__h12797 = x__h14930 & y__h14931 ;
  assign y__h12902 = x__h14987 & y__h14988 ;
  assign y__h13007 = x__h15044 & y__h15045 ;
  assign y__h13112 = x__h15101 & y__h15102 ;
  assign y__h13217 = x__h15158 & y__h15159 ;
  assign y__h13322 = x__h15215 & y__h15216 ;
  assign y__h13427 = x__h15272 & y__h15273 ;
  assign y__h13532 = x__h15329 & y__h15330 ;
  assign y__h13677 = x__h10591 | y__h10592 ;
  assign y__h13734 = x__h10696 | y__h10697 ;
  assign y__h13791 = x__h10801 | y__h10802 ;
  assign y__h13848 = x__h10906 | y__h10907 ;
  assign y__h13905 = x__h11011 | y__h11012 ;
  assign y__h13962 = x__h11116 | y__h11117 ;
  assign y__h14019 = x__h11221 | y__h11222 ;
  assign y__h14076 = x__h11326 | y__h11327 ;
  assign y__h14133 = x__h11431 | y__h11432 ;
  assign y__h14190 = x__h11536 | y__h11537 ;
  assign y__h14247 = x__h11641 | y__h11642 ;
  assign y__h14304 = x__h11746 | y__h11747 ;
  assign y__h14361 = x__h11851 | y__h11852 ;
  assign y__h14418 = x__h11956 | y__h11957 ;
  assign y__h14475 = x__h12061 | y__h12062 ;
  assign y__h14532 = x__h12166 | y__h12167 ;
  assign y__h14589 = x__h12271 | y__h12272 ;
  assign y__h14646 = x__h12376 | y__h12377 ;
  assign y__h14703 = x__h12481 | y__h12482 ;
  assign y__h14760 = x__h12586 | y__h12587 ;
  assign y__h14817 = x__h12691 | y__h12692 ;
  assign y__h14874 = x__h12796 | y__h12797 ;
  assign y__h14931 = x__h12901 | y__h12902 ;
  assign y__h14988 = x__h13006 | y__h13007 ;
  assign y__h15045 = x__h13111 | y__h13112 ;
  assign y__h15102 = x__h13216 | y__h13217 ;
  assign y__h15159 = x__h13321 | y__h13322 ;
  assign y__h15216 = x__h13426 | y__h13427 ;
  assign y__h15273 = x__h13531 | y__h13532 ;
  assign y__h15330 = mul_out[0] & inpC[0] ;
  assign y__h1601 = INV_inpA__q1[14] & y__h1707 ;
  assign y__h1707 = INV_inpA__q1[13] & y__h1810 ;
  assign y__h1810 = INV_inpA__q1[12] & y__h1913 ;
  assign y__h1913 = INV_inpA__q1[11] & y__h2016 ;
  assign y__h2016 = INV_inpA__q1[10] & y__h2119 ;
  assign y__h2119 = INV_inpA__q1[9] & y__h2222 ;
  assign y__h2222 = INV_inpA__q1[8] & y__h2325 ;
  assign y__h2325 = INV_inpA__q1[7] & y__h2428 ;
  assign y__h2428 = INV_inpA__q1[6] & y__h2531 ;
  assign y__h2531 = INV_inpA__q1[5] & y__h2634 ;
  assign y__h2634 = INV_inpA__q1[4] & y__h2737 ;
  assign y__h2737 = INV_inpA__q1[3] & y__h2840 ;
  assign y__h2840 = INV_inpA__q1[2] & y__h2943 ;
  assign y__h2943 = INV_inpA__q1[1] & INV_inpA__q1[0] ;
  assign y__h3984 = x__h4029 & y__h4030 ;
  assign y__h3986 = INV_inpA__q1[14] ^ y__h1707 ;
  assign y__h4030 = x__h4086 | y__h4087 ;
  assign y__h4087 = x__h4132 & y__h4133 ;
  assign y__h4089 = INV_inpA__q1[13] ^ y__h1810 ;
  assign y__h4133 = x__h4189 | y__h4190 ;
  assign y__h4190 = x__h4235 & y__h4236 ;
  assign y__h4192 = INV_inpA__q1[12] ^ y__h1913 ;
  assign y__h4236 = x__h4292 | y__h4293 ;
  assign y__h4293 = x__h4338 & y__h4339 ;
  assign y__h4295 = INV_inpA__q1[11] ^ y__h2016 ;
  assign y__h4339 = x__h4395 | y__h4396 ;
  assign y__h4396 = x__h4441 & y__h4442 ;
  assign y__h4398 = INV_inpA__q1[10] ^ y__h2119 ;
  assign y__h4442 = x__h4498 | y__h4499 ;
  assign y__h4499 = x__h4544 & y__h4545 ;
  assign y__h4501 = INV_inpA__q1[9] ^ y__h2222 ;
  assign y__h4545 = x__h4601 | y__h4602 ;
  assign y__h4602 = x__h4647 & y__h4648 ;
  assign y__h4604 = INV_inpA__q1[8] ^ y__h2325 ;
  assign y__h4648 = x__h4704 | y__h4705 ;
  assign y__h4705 = x__h4750 & y__h4751 ;
  assign y__h4707 = INV_inpA__q1[7] ^ y__h2428 ;
  assign y__h4751 = x__h4807 | y__h4808 ;
  assign y__h4808 = x__h4853 & y__h4854 ;
  assign y__h4810 = INV_inpA__q1[6] ^ y__h2531 ;
  assign y__h4854 = x__h4910 | y__h4911 ;
  assign y__h4911 = x__h4956 & y__h4957 ;
  assign y__h4913 = INV_inpA__q1[5] ^ y__h2634 ;
  assign y__h4957 = x__h5013 | y__h5014 ;
  assign y__h5014 = x__h5059 & y__h5060 ;
  assign y__h5016 = INV_inpA__q1[4] ^ y__h2737 ;
  assign y__h5060 = x__h5116 | y__h5117 ;
  assign y__h5117 = x__h5162 & y__h5163 ;
  assign y__h5119 = INV_inpA__q1[3] ^ y__h2840 ;
  assign y__h5163 = x__h5219 | y__h5220 ;
  assign y__h5220 = x__h5265 & y__h5266 ;
  assign y__h5222 = INV_inpA__q1[2] ^ y__h2943 ;
  assign y__h5266 = x__h5322 | y__h5323 ;
  assign y__h5323 = x__h5368 & y__h5369 ;
  assign y__h5325 = INV_inpA__q1[1] ^ INV_inpA__q1[0] ;
  assign y__h5369 = temp[0] & ~INV_inpA__q1[0] ;
  assign y__h6752 = x__h6810 | y__h6811 ;
  assign y__h6811 = x__h8320 & y__h8321 ;
  assign y__h6916 = x__h8377 & y__h8378 ;
  assign y__h7021 = x__h8434 & y__h8435 ;
  assign y__h7126 = x__h8491 & y__h8492 ;
  assign y__h7231 = x__h8548 & y__h8549 ;
  assign y__h7336 = x__h8605 & y__h8606 ;
  assign y__h7441 = x__h8662 & y__h8663 ;
  assign y__h7546 = x__h8719 & y__h8720 ;
  assign y__h7651 = x__h8776 & y__h8777 ;
  assign y__h7756 = x__h8833 & y__h8834 ;
  assign y__h7861 = x__h8890 & y__h8891 ;
  assign y__h7966 = x__h8947 & y__h8948 ;
  assign y__h8071 = x__h9004 & y__h9005 ;
  assign y__h8176 = x__h9061 & y__h9062 ;
  assign y__h8321 = x__h6915 | y__h6916 ;
  assign y__h8378 = x__h7020 | y__h7021 ;
  assign y__h8435 = x__h7125 | y__h7126 ;
  assign y__h8492 = x__h7230 | y__h7231 ;
  assign y__h8549 = x__h7335 | y__h7336 ;
  assign y__h8606 = x__h7440 | y__h7441 ;
  assign y__h8663 = x__h7545 | y__h7546 ;
  assign y__h8720 = x__h7650 | y__h7651 ;
  assign y__h8777 = x__h7755 | y__h7756 ;
  assign y__h8834 = x__h7860 | y__h7861 ;
  assign y__h8891 = x__h7965 | y__h7966 ;
  assign y__h8948 = x__h8070 | y__h8071 ;
  assign y__h9005 = x__h8175 | y__h8176 ;
  assign y__h9062 = temp[0] & inpA[0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 5'd9;
	finish <= `BSV_ASSIGNMENT_DELAY 1'd1;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpB <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	prepmul <= `BSV_ASSIGNMENT_DELAY 1'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_out_EN) add_out <= `BSV_ASSIGNMENT_DELAY add_out_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (finish_EN) finish <= `BSV_ASSIGNMENT_DELAY finish_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_result_EN)
	  got_result <= `BSV_ASSIGNMENT_DELAY got_result_D_IN;
	if (inpA_EN) inpA <= `BSV_ASSIGNMENT_DELAY inpA_D_IN;
	if (inpB_EN) inpB <= `BSV_ASSIGNMENT_DELAY inpB_D_IN;
	if (inpC_EN) inpC <= `BSV_ASSIGNMENT_DELAY inpC_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_out_EN) mul_out <= `BSV_ASSIGNMENT_DELAY mul_out_D_IN;
	if (prepmul_EN) prepmul <= `BSV_ASSIGNMENT_DELAY prepmul_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
	if (temp_EN) temp <= `BSV_ASSIGNMENT_DELAY temp_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_out = 32'hAAAAAAAA;
    counter = 5'h0A;
    finish = 1'h0;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_result = 1'h0;
    inpA = 16'hAAAA;
    inpB = 16'hAAAA;
    inpC = 32'hAAAAAAAA;
    mul_done = 1'h0;
    mul_out = 32'hAAAAAAAA;
    prepmul = 1'h0;
    select = 1'h0;
    temp = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_multiply)
	begin
	  v__h9304 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_multiply)
	$display(v__h9304, " Integer Multiplication: %b", temp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul)
	begin
	  v__h9476 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul)
	$display(v__h9476, " Integer Multiplication: %b", temp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add)
	begin
	  v__h9515 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add)
	$display(v__h9515, " Integer before add: %b", mul_out);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_done)
	begin
	  v__h15475 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_done)
	$display(v__h15475, " Integer after add: %b", add_out);
  end
  // synopsys translate_on
endmodule  // mkintmul

