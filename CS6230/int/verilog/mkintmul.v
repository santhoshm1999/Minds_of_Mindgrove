//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 27 23:58:17 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1 const
// RDY_get_B                      O     1 const
// RDY_get_C                      O     1 const
// get_output                     O    32 reg
// RDY_get_output                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintmul(CLK,
		RST_N,

		get_A_a,
		EN_get_A,
		RDY_get_A,

		get_B_b,
		EN_get_B,
		RDY_get_B,

		get_C_c,
		EN_get_C,
		RDY_get_C,

		get_output,
		RDY_get_output);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // value method get_output
  output [31 : 0] get_output;
  output RDY_get_output;

  // signals for module outputs
  wire [31 : 0] get_output;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_output;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_out
  reg [31 : 0] add_out;
  wire [31 : 0] add_out_D_IN;
  wire add_out_EN;

  // register counter
  reg [4 : 0] counter;
  wire [4 : 0] counter_D_IN;
  wire counter_EN;

  // register final_out
  reg [31 : 0] final_out;
  wire [31 : 0] final_out_D_IN;
  wire final_out_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_result
  reg got_result;
  wire got_result_D_IN, got_result_EN;

  // register inp_A
  reg [15 : 0] inp_A;
  reg [15 : 0] inp_A_D_IN;
  wire inp_A_EN;

  // register inp_B
  reg [15 : 0] inp_B;
  reg [15 : 0] inp_B_D_IN;
  wire inp_B_EN;

  // register inp_C
  reg [31 : 0] inp_C;
  wire [31 : 0] inp_C_D_IN;
  wire inp_C_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_out
  reg [31 : 0] mul_out;
  wire [31 : 0] mul_out_D_IN;
  wire mul_out_EN;

  // register prepmul
  reg prepmul;
  wire prepmul_D_IN, prepmul_EN;

  // register sign
  reg sign;
  wire sign_D_IN, sign_EN;

  // register sign_A
  reg sign_A;
  wire sign_A_D_IN, sign_A_EN;

  // register sign_B
  reg sign_B;
  wire sign_B_D_IN, sign_B_EN;

  // register temp
  reg [31 : 0] temp;
  wire [31 : 0] temp_D_IN;
  wire temp_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_multiply,
       CAN_FIRE_RL_prep_mul,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       WILL_FIRE_RL_multiply,
       WILL_FIRE_RL_prep_mul,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_temp_write_1__VAL_1, MUX_temp_write_1__VAL_2;
  wire [15 : 0] MUX_inp_A_write_1__VAL_3, MUX_inp_B_write_1__VAL_3;
  wire MUX_temp_write_1__SEL_1;

  // remaining internal signals
  wire [32 : 0] IF_x1335_OR_y1336_THEN_3_ELSE_1__q2,
		IF_x429_OR_y430_THEN_3_ELSE_1__q1;
  wire [31 : 0] IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29,
		IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289,
		IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25,
		x__h1973;
  wire [29 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d525,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d265;
  wire [27 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d524,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d264;
  wire [25 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d523,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d263;
  wire [23 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d522,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d262;
  wire [21 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d521,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d261;
  wire [19 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d520,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d260;
  wire [17 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d519,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d259;
  wire [15 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d518,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d258;
  wire [13 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d517,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d257;
  wire [11 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d516,
		IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d256;
  wire [9 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d515,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d255;
  wire [7 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d514,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d254;
  wire [5 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d513,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d253;
  wire [3 : 0] IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d512,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d252;
  wire x__h10769,
       x__h11335,
       x__h11485,
       x__h11532,
       x__h11640,
       x__h11687,
       x__h11794,
       x__h11841,
       x__h11948,
       x__h11995,
       x__h12102,
       x__h12149,
       x__h12256,
       x__h12303,
       x__h12410,
       x__h12457,
       x__h12564,
       x__h12611,
       x__h12718,
       x__h12765,
       x__h12872,
       x__h12919,
       x__h13026,
       x__h13073,
       x__h13180,
       x__h13227,
       x__h13334,
       x__h13381,
       x__h13488,
       x__h13535,
       x__h13642,
       x__h13689,
       x__h13796,
       x__h13843,
       x__h13950,
       x__h13997,
       x__h14104,
       x__h14151,
       x__h14258,
       x__h14305,
       x__h14412,
       x__h14459,
       x__h14566,
       x__h14613,
       x__h14720,
       x__h14767,
       x__h14874,
       x__h14921,
       x__h15028,
       x__h15075,
       x__h15182,
       x__h15229,
       x__h15336,
       x__h15383,
       x__h15490,
       x__h15537,
       x__h15644,
       x__h15691,
       x__h15798,
       x__h15845,
       x__h15952,
       x__h15999,
       x__h1861,
       x__h2429,
       x__h2579,
       x__h2626,
       x__h2734,
       x__h2781,
       x__h2888,
       x__h2935,
       x__h3042,
       x__h3089,
       x__h3196,
       x__h3243,
       x__h3350,
       x__h3397,
       x__h3504,
       x__h3551,
       x__h3658,
       x__h3705,
       x__h3812,
       x__h3859,
       x__h3966,
       x__h4013,
       x__h4120,
       x__h4167,
       x__h4274,
       x__h4321,
       x__h4428,
       x__h4475,
       x__h4582,
       x__h4629,
       x__h4736,
       x__h4783,
       x__h4890,
       x__h4937,
       x__h5044,
       x__h5091,
       x__h5198,
       x__h5245,
       x__h5352,
       x__h5399,
       x__h5506,
       x__h5553,
       x__h5660,
       x__h5707,
       x__h5814,
       x__h5861,
       x__h5968,
       x__h6015,
       x__h6122,
       x__h6169,
       x__h6276,
       x__h6323,
       x__h6430,
       x__h6477,
       x__h6584,
       x__h6631,
       x__h6738,
       x__h6785,
       x__h6892,
       x__h6939,
       x__h7046,
       x__h7093,
       y__h10770,
       y__h11336,
       y__h11486,
       y__h11641,
       y__h11688,
       y__h11795,
       y__h11842,
       y__h11949,
       y__h11996,
       y__h12103,
       y__h12150,
       y__h12257,
       y__h12304,
       y__h12411,
       y__h12458,
       y__h12565,
       y__h12612,
       y__h12719,
       y__h12766,
       y__h12873,
       y__h12920,
       y__h13027,
       y__h13074,
       y__h13181,
       y__h13228,
       y__h13335,
       y__h13382,
       y__h13489,
       y__h13536,
       y__h13643,
       y__h13690,
       y__h13797,
       y__h13844,
       y__h13951,
       y__h13998,
       y__h14105,
       y__h14152,
       y__h14259,
       y__h14306,
       y__h14413,
       y__h14460,
       y__h14567,
       y__h14614,
       y__h14721,
       y__h14768,
       y__h14875,
       y__h14922,
       y__h15029,
       y__h15076,
       y__h15183,
       y__h15230,
       y__h15337,
       y__h15384,
       y__h15491,
       y__h15538,
       y__h15645,
       y__h15692,
       y__h15799,
       y__h15846,
       y__h15953,
       y__h16000,
       y__h1862,
       y__h2430,
       y__h2580,
       y__h2735,
       y__h2782,
       y__h2889,
       y__h2936,
       y__h3043,
       y__h3090,
       y__h3197,
       y__h3244,
       y__h3351,
       y__h3398,
       y__h3505,
       y__h3552,
       y__h3659,
       y__h3706,
       y__h3813,
       y__h3860,
       y__h3967,
       y__h4014,
       y__h4121,
       y__h4168,
       y__h4275,
       y__h4322,
       y__h4429,
       y__h4476,
       y__h4583,
       y__h4630,
       y__h4737,
       y__h4784,
       y__h4891,
       y__h4938,
       y__h5045,
       y__h5092,
       y__h5199,
       y__h5246,
       y__h5353,
       y__h5400,
       y__h5507,
       y__h5554,
       y__h5661,
       y__h5708,
       y__h5815,
       y__h5862,
       y__h5969,
       y__h6016,
       y__h6123,
       y__h6170,
       y__h6277,
       y__h6324,
       y__h6431,
       y__h6478,
       y__h6585,
       y__h6632,
       y__h6739,
       y__h6786,
       y__h6893,
       y__h6940,
       y__h7047,
       y__h7094;

  // action method get_A
  assign RDY_get_A = 1'd1 ;
  assign CAN_FIRE_get_A = 1'd1 ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = 1'd1 ;
  assign CAN_FIRE_get_B = 1'd1 ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = 1'd1 ;
  assign CAN_FIRE_get_C = 1'd1 ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // value method get_output
  assign get_output = add_out ;
  assign RDY_get_output = 1'd1 ;

  // rule RL_multiply
  assign CAN_FIRE_RL_multiply = prepmul && counter != 5'd0 ;
  assign WILL_FIRE_RL_multiply = CAN_FIRE_RL_multiply ;

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul = !mul_done && counter == 5'd0 ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_prep_mul
  assign CAN_FIRE_RL_prep_mul = got_A && got_B && got_C && !prepmul ;
  assign WILL_FIRE_RL_prep_mul = CAN_FIRE_RL_prep_mul ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add = mul_done && !add_done ;
  assign WILL_FIRE_RL_rl_add = CAN_FIRE_RL_rl_add ;

  // inputs to muxes for submodule ports
  assign MUX_temp_write_1__SEL_1 = WILL_FIRE_RL_rl_mul && sign ;
  assign MUX_inp_A_write_1__VAL_3 = { inp_A[14:0], 1'd0 } ;
  assign MUX_inp_B_write_1__VAL_3 = { 1'd0, inp_B[15:1] } ;
  assign MUX_temp_write_1__VAL_1 = { temp[31], 31'd0 } ;
  assign MUX_temp_write_1__VAL_2 =
	     { x__h1861 ^ y__h1862,
	       x__h7093 ^ y__h7094,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d265 } ;

  // register add_done
  assign add_done_D_IN = 1'b0 ;
  assign add_done_EN = 1'b0 ;

  // register add_out
  assign add_out_D_IN =
	     { x__h10769 ^ y__h10770,
	       x__h15999 ^ y__h16000,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d525 } ;
  assign add_out_EN = CAN_FIRE_RL_rl_add ;

  // register counter
  assign counter_D_IN = counter - 5'd1 ;
  assign counter_EN = CAN_FIRE_RL_multiply ;

  // register final_out
  assign final_out_D_IN = 32'h0 ;
  assign final_out_EN = 1'b0 ;

  // register got_A
  assign got_A_D_IN = 1'd1 ;
  assign got_A_EN = EN_get_A ;

  // register got_B
  assign got_B_D_IN = 1'd1 ;
  assign got_B_EN = EN_get_B ;

  // register got_C
  assign got_C_D_IN = 1'd1 ;
  assign got_C_EN = EN_get_C ;

  // register got_result
  assign got_result_D_IN = 1'd1 ;
  assign got_result_EN = CAN_FIRE_RL_rl_add ;

  // register inp_A
  always@(EN_get_A or
	  get_A_a or
	  WILL_FIRE_RL_prep_mul or
	  inp_A or WILL_FIRE_RL_multiply or MUX_inp_A_write_1__VAL_3)
  case (1'b1)
    EN_get_A: inp_A_D_IN = get_A_a;
    WILL_FIRE_RL_prep_mul: inp_A_D_IN = inp_A;
    WILL_FIRE_RL_multiply: inp_A_D_IN = MUX_inp_A_write_1__VAL_3;
    default: inp_A_D_IN = 16'bxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign inp_A_EN =
	     EN_get_A || WILL_FIRE_RL_prep_mul || WILL_FIRE_RL_multiply ;

  // register inp_B
  always@(EN_get_B or
	  get_B_b or
	  WILL_FIRE_RL_prep_mul or
	  inp_B or WILL_FIRE_RL_multiply or MUX_inp_B_write_1__VAL_3)
  case (1'b1)
    EN_get_B: inp_B_D_IN = get_B_b;
    WILL_FIRE_RL_prep_mul: inp_B_D_IN = inp_B;
    WILL_FIRE_RL_multiply: inp_B_D_IN = MUX_inp_B_write_1__VAL_3;
    default: inp_B_D_IN = 16'bxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign inp_B_EN =
	     EN_get_B || WILL_FIRE_RL_prep_mul || WILL_FIRE_RL_multiply ;

  // register inp_C
  assign inp_C_D_IN = get_C_c ;
  assign inp_C_EN = EN_get_C ;

  // register mul_done
  assign mul_done_D_IN = 1'd1 ;
  assign mul_done_EN = CAN_FIRE_RL_rl_mul ;

  // register mul_out
  assign mul_out_D_IN = temp ;
  assign mul_out_EN = CAN_FIRE_RL_rl_mul ;

  // register prepmul
  assign prepmul_D_IN = 1'd1 ;
  assign prepmul_EN = CAN_FIRE_RL_prep_mul ;

  // register sign
  assign sign_D_IN = sign_A & sign_B ;
  assign sign_EN = CAN_FIRE_RL_prep_mul ;

  // register sign_A
  assign sign_A_D_IN = inp_A[0] ;
  assign sign_A_EN = CAN_FIRE_RL_prep_mul ;

  // register sign_B
  assign sign_B_D_IN = inp_B[0] ;
  assign sign_B_EN = CAN_FIRE_RL_prep_mul ;

  // register temp
  assign temp_D_IN =
	     MUX_temp_write_1__SEL_1 ?
	       MUX_temp_write_1__VAL_1 :
	       MUX_temp_write_1__VAL_2 ;
  assign temp_EN =
	     WILL_FIRE_RL_rl_mul && sign ||
	     WILL_FIRE_RL_multiply && counter == 5'd1 && inp_B[0] ;

  // remaining internal signals
  assign IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29 =
	     inp_A[0] ? x__h1973 + 32'd1 : x__h1973 ;
  assign IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289 =
	     inp_C[0] ? inp_C + 32'd1 : inp_C ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284 =
	     mul_out[0] ? mul_out + 32'd1 : mul_out ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d512 =
	     { x__h11841 ^ y__h11842,
	       x__h11687 ^ y__h11688,
	       x__h11532 ^ IF_x1335_OR_y1336_THEN_3_ELSE_1__q2[1],
	       ~y__h11336 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d513 =
	     { x__h12149 ^ y__h12150,
	       x__h11995 ^ y__h11996,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d512 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d514 =
	     { x__h12457 ^ y__h12458,
	       x__h12303 ^ y__h12304,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d513 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d515 =
	     { x__h12765 ^ y__h12766,
	       x__h12611 ^ y__h12612,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d514 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d516 =
	     { x__h13073 ^ y__h13074,
	       x__h12919 ^ y__h12920,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d515 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d517 =
	     { x__h13381 ^ y__h13382,
	       x__h13227 ^ y__h13228,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d516 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d518 =
	     { x__h13689 ^ y__h13690,
	       x__h13535 ^ y__h13536,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d517 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d519 =
	     { x__h13997 ^ y__h13998,
	       x__h13843 ^ y__h13844,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d518 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d520 =
	     { x__h14305 ^ y__h14306,
	       x__h14151 ^ y__h14152,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d519 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d521 =
	     { x__h14613 ^ y__h14614,
	       x__h14459 ^ y__h14460,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d520 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d522 =
	     { x__h14921 ^ y__h14922,
	       x__h14767 ^ y__h14768,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d521 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d523 =
	     { x__h15229 ^ y__h15230,
	       x__h15075 ^ y__h15076,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d522 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d524 =
	     { x__h15537 ^ y__h15538,
	       x__h15383 ^ y__h15384,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d523 } ;
  assign IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d525 =
	     { x__h15845 ^ y__h15846,
	       x__h15691 ^ y__h15692,
	       IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d524 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25 =
	     temp[0] ? temp + 32'd1 : temp ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d252 =
	     { x__h2935 ^ y__h2936,
	       x__h2781 ^ y__h2782,
	       x__h2626 ^ IF_x429_OR_y430_THEN_3_ELSE_1__q1[1],
	       ~y__h2430 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d253 =
	     { x__h3243 ^ y__h3244,
	       x__h3089 ^ y__h3090,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d252 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d254 =
	     { x__h3551 ^ y__h3552,
	       x__h3397 ^ y__h3398,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d253 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d255 =
	     { x__h3859 ^ y__h3860,
	       x__h3705 ^ y__h3706,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d254 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d256 =
	     { x__h4167 ^ y__h4168,
	       x__h4013 ^ y__h4014,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d255 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d257 =
	     { x__h4475 ^ y__h4476,
	       x__h4321 ^ y__h4322,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d256 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d258 =
	     { x__h4783 ^ y__h4784,
	       x__h4629 ^ y__h4630,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d257 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d259 =
	     { x__h5091 ^ y__h5092,
	       x__h4937 ^ y__h4938,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d258 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d260 =
	     { x__h5399 ^ y__h5400,
	       x__h5245 ^ y__h5246,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d259 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d261 =
	     { x__h5707 ^ y__h5708,
	       x__h5553 ^ y__h5554,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d260 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d262 =
	     { x__h6015 ^ y__h6016,
	       x__h5861 ^ y__h5862,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d261 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d263 =
	     { x__h6323 ^ y__h6324,
	       x__h6169 ^ y__h6170,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d262 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d264 =
	     { x__h6631 ^ y__h6632,
	       x__h6477 ^ y__h6478,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d263 } ;
  assign IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d265 =
	     { x__h6939 ^ y__h6940,
	       x__h6785 ^ y__h6786,
	       IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d264 } ;
  assign IF_x1335_OR_y1336_THEN_3_ELSE_1__q2 =
	     (x__h11335 | y__h11336) ? 33'd3 : 33'd1 ;
  assign IF_x429_OR_y430_THEN_3_ELSE_1__q1 =
	     (x__h2429 | y__h2430) ? 33'd3 : 33'd1 ;
  assign x__h10769 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[31] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[31] ;
  assign x__h11335 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[0] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[0] ;
  assign x__h11485 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[1] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[1] ;
  assign x__h11532 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[1] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[1] ;
  assign x__h11640 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[2] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[2] ;
  assign x__h11687 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[2] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[2] ;
  assign x__h11794 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[3] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[3] ;
  assign x__h11841 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[3] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[3] ;
  assign x__h11948 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[4] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[4] ;
  assign x__h11995 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[4] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[4] ;
  assign x__h12102 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[5] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[5] ;
  assign x__h12149 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[5] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[5] ;
  assign x__h12256 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[6] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[6] ;
  assign x__h12303 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[6] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[6] ;
  assign x__h12410 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[7] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[7] ;
  assign x__h12457 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[7] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[7] ;
  assign x__h12564 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[8] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[8] ;
  assign x__h12611 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[8] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[8] ;
  assign x__h12718 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[9] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[9] ;
  assign x__h12765 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[9] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[9] ;
  assign x__h12872 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[10] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[10] ;
  assign x__h12919 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[10] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[10] ;
  assign x__h13026 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[11] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[11] ;
  assign x__h13073 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[11] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[11] ;
  assign x__h13180 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[12] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[12] ;
  assign x__h13227 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[12] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[12] ;
  assign x__h13334 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[13] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[13] ;
  assign x__h13381 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[13] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[13] ;
  assign x__h13488 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[14] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[14] ;
  assign x__h13535 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[14] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[14] ;
  assign x__h13642 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[15] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[15] ;
  assign x__h13689 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[15] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[15] ;
  assign x__h13796 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[16] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[16] ;
  assign x__h13843 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[16] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[16] ;
  assign x__h13950 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[17] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[17] ;
  assign x__h13997 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[17] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[17] ;
  assign x__h14104 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[18] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[18] ;
  assign x__h14151 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[18] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[18] ;
  assign x__h14258 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[19] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[19] ;
  assign x__h14305 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[19] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[19] ;
  assign x__h14412 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[20] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[20] ;
  assign x__h14459 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[20] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[20] ;
  assign x__h14566 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[21] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[21] ;
  assign x__h14613 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[21] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[21] ;
  assign x__h14720 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[22] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[22] ;
  assign x__h14767 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[22] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[22] ;
  assign x__h14874 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[23] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[23] ;
  assign x__h14921 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[23] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[23] ;
  assign x__h15028 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[24] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[24] ;
  assign x__h15075 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[24] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[24] ;
  assign x__h15182 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[25] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[25] ;
  assign x__h15229 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[25] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[25] ;
  assign x__h15336 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[26] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[26] ;
  assign x__h15383 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[26] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[26] ;
  assign x__h15490 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[27] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[27] ;
  assign x__h15537 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[27] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[27] ;
  assign x__h15644 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[28] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[28] ;
  assign x__h15691 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[28] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[28] ;
  assign x__h15798 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[29] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[29] ;
  assign x__h15845 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[29] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[29] ;
  assign x__h15952 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[30] &
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[30] ;
  assign x__h15999 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[30] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[30] ;
  assign x__h1861 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[31] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[31] ;
  assign x__h1973 = { 16'd0, inp_A } ;
  assign x__h2429 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[0] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[0] ;
  assign x__h2579 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[1] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[1] ;
  assign x__h2626 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[1] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[1] ;
  assign x__h2734 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[2] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[2] ;
  assign x__h2781 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[2] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[2] ;
  assign x__h2888 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[3] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[3] ;
  assign x__h2935 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[3] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[3] ;
  assign x__h3042 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[4] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[4] ;
  assign x__h3089 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[4] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[4] ;
  assign x__h3196 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[5] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[5] ;
  assign x__h3243 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[5] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[5] ;
  assign x__h3350 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[6] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[6] ;
  assign x__h3397 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[6] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[6] ;
  assign x__h3504 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[7] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[7] ;
  assign x__h3551 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[7] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[7] ;
  assign x__h3658 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[8] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[8] ;
  assign x__h3705 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[8] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[8] ;
  assign x__h3812 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[9] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[9] ;
  assign x__h3859 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[9] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[9] ;
  assign x__h3966 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[10] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[10] ;
  assign x__h4013 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[10] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[10] ;
  assign x__h4120 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[11] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[11] ;
  assign x__h4167 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[11] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[11] ;
  assign x__h4274 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[12] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[12] ;
  assign x__h4321 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[12] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[12] ;
  assign x__h4428 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[13] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[13] ;
  assign x__h4475 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[13] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[13] ;
  assign x__h4582 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[14] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[14] ;
  assign x__h4629 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[14] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[14] ;
  assign x__h4736 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[15] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[15] ;
  assign x__h4783 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[15] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[15] ;
  assign x__h4890 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[16] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[16] ;
  assign x__h4937 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[16] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[16] ;
  assign x__h5044 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[17] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[17] ;
  assign x__h5091 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[17] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[17] ;
  assign x__h5198 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[18] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[18] ;
  assign x__h5245 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[18] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[18] ;
  assign x__h5352 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[19] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[19] ;
  assign x__h5399 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[19] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[19] ;
  assign x__h5506 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[20] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[20] ;
  assign x__h5553 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[20] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[20] ;
  assign x__h5660 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[21] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[21] ;
  assign x__h5707 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[21] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[21] ;
  assign x__h5814 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[22] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[22] ;
  assign x__h5861 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[22] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[22] ;
  assign x__h5968 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[23] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[23] ;
  assign x__h6015 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[23] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[23] ;
  assign x__h6122 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[24] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[24] ;
  assign x__h6169 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[24] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[24] ;
  assign x__h6276 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[25] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[25] ;
  assign x__h6323 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[25] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[25] ;
  assign x__h6430 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[26] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[26] ;
  assign x__h6477 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[26] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[26] ;
  assign x__h6584 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[27] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[27] ;
  assign x__h6631 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[27] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[27] ;
  assign x__h6738 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[28] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[28] ;
  assign x__h6785 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[28] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[28] ;
  assign x__h6892 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[29] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[29] ;
  assign x__h6939 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[29] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[29] ;
  assign x__h7046 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[30] &
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[30] ;
  assign x__h7093 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[30] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[30] ;
  assign y__h10770 = x__h15952 | y__h15953 ;
  assign y__h11336 =
	     IF_mul_out_81_BIT_0_82_THEN_mul_out_81_PLUS_1__ETC___d284[0] ^
	     IF_inp_C_86_BIT_0_87_THEN_inp_C_86_PLUS_1_88_E_ETC___d289[0] ;
  assign y__h11486 = x__h11532 & IF_x1335_OR_y1336_THEN_3_ELSE_1__q2[1] ;
  assign y__h11641 = x__h11687 & y__h11688 ;
  assign y__h11688 = x__h11485 | y__h11486 ;
  assign y__h11795 = x__h11841 & y__h11842 ;
  assign y__h11842 = x__h11640 | y__h11641 ;
  assign y__h11949 = x__h11995 & y__h11996 ;
  assign y__h11996 = x__h11794 | y__h11795 ;
  assign y__h12103 = x__h12149 & y__h12150 ;
  assign y__h12150 = x__h11948 | y__h11949 ;
  assign y__h12257 = x__h12303 & y__h12304 ;
  assign y__h12304 = x__h12102 | y__h12103 ;
  assign y__h12411 = x__h12457 & y__h12458 ;
  assign y__h12458 = x__h12256 | y__h12257 ;
  assign y__h12565 = x__h12611 & y__h12612 ;
  assign y__h12612 = x__h12410 | y__h12411 ;
  assign y__h12719 = x__h12765 & y__h12766 ;
  assign y__h12766 = x__h12564 | y__h12565 ;
  assign y__h12873 = x__h12919 & y__h12920 ;
  assign y__h12920 = x__h12718 | y__h12719 ;
  assign y__h13027 = x__h13073 & y__h13074 ;
  assign y__h13074 = x__h12872 | y__h12873 ;
  assign y__h13181 = x__h13227 & y__h13228 ;
  assign y__h13228 = x__h13026 | y__h13027 ;
  assign y__h13335 = x__h13381 & y__h13382 ;
  assign y__h13382 = x__h13180 | y__h13181 ;
  assign y__h13489 = x__h13535 & y__h13536 ;
  assign y__h13536 = x__h13334 | y__h13335 ;
  assign y__h13643 = x__h13689 & y__h13690 ;
  assign y__h13690 = x__h13488 | y__h13489 ;
  assign y__h13797 = x__h13843 & y__h13844 ;
  assign y__h13844 = x__h13642 | y__h13643 ;
  assign y__h13951 = x__h13997 & y__h13998 ;
  assign y__h13998 = x__h13796 | y__h13797 ;
  assign y__h14105 = x__h14151 & y__h14152 ;
  assign y__h14152 = x__h13950 | y__h13951 ;
  assign y__h14259 = x__h14305 & y__h14306 ;
  assign y__h14306 = x__h14104 | y__h14105 ;
  assign y__h14413 = x__h14459 & y__h14460 ;
  assign y__h14460 = x__h14258 | y__h14259 ;
  assign y__h14567 = x__h14613 & y__h14614 ;
  assign y__h14614 = x__h14412 | y__h14413 ;
  assign y__h14721 = x__h14767 & y__h14768 ;
  assign y__h14768 = x__h14566 | y__h14567 ;
  assign y__h14875 = x__h14921 & y__h14922 ;
  assign y__h14922 = x__h14720 | y__h14721 ;
  assign y__h15029 = x__h15075 & y__h15076 ;
  assign y__h15076 = x__h14874 | y__h14875 ;
  assign y__h15183 = x__h15229 & y__h15230 ;
  assign y__h15230 = x__h15028 | y__h15029 ;
  assign y__h15337 = x__h15383 & y__h15384 ;
  assign y__h15384 = x__h15182 | y__h15183 ;
  assign y__h15491 = x__h15537 & y__h15538 ;
  assign y__h15538 = x__h15336 | y__h15337 ;
  assign y__h15645 = x__h15691 & y__h15692 ;
  assign y__h15692 = x__h15490 | y__h15491 ;
  assign y__h15799 = x__h15845 & y__h15846 ;
  assign y__h15846 = x__h15644 | y__h15645 ;
  assign y__h15953 = x__h15999 & y__h16000 ;
  assign y__h16000 = x__h15798 | y__h15799 ;
  assign y__h1862 = x__h7046 | y__h7047 ;
  assign y__h2430 =
	     IF_temp_2_BIT_0_3_THEN_temp_2_PLUS_1_4_ELSE_te_ETC___d25[0] ^
	     IF_inp_A_BIT_0_0_THEN_0_CONCAT_inp_A_7_PLUS_1__ETC___d29[0] ;
  assign y__h2580 = x__h2626 & IF_x429_OR_y430_THEN_3_ELSE_1__q1[1] ;
  assign y__h2735 = x__h2781 & y__h2782 ;
  assign y__h2782 = x__h2579 | y__h2580 ;
  assign y__h2889 = x__h2935 & y__h2936 ;
  assign y__h2936 = x__h2734 | y__h2735 ;
  assign y__h3043 = x__h3089 & y__h3090 ;
  assign y__h3090 = x__h2888 | y__h2889 ;
  assign y__h3197 = x__h3243 & y__h3244 ;
  assign y__h3244 = x__h3042 | y__h3043 ;
  assign y__h3351 = x__h3397 & y__h3398 ;
  assign y__h3398 = x__h3196 | y__h3197 ;
  assign y__h3505 = x__h3551 & y__h3552 ;
  assign y__h3552 = x__h3350 | y__h3351 ;
  assign y__h3659 = x__h3705 & y__h3706 ;
  assign y__h3706 = x__h3504 | y__h3505 ;
  assign y__h3813 = x__h3859 & y__h3860 ;
  assign y__h3860 = x__h3658 | y__h3659 ;
  assign y__h3967 = x__h4013 & y__h4014 ;
  assign y__h4014 = x__h3812 | y__h3813 ;
  assign y__h4121 = x__h4167 & y__h4168 ;
  assign y__h4168 = x__h3966 | y__h3967 ;
  assign y__h4275 = x__h4321 & y__h4322 ;
  assign y__h4322 = x__h4120 | y__h4121 ;
  assign y__h4429 = x__h4475 & y__h4476 ;
  assign y__h4476 = x__h4274 | y__h4275 ;
  assign y__h4583 = x__h4629 & y__h4630 ;
  assign y__h4630 = x__h4428 | y__h4429 ;
  assign y__h4737 = x__h4783 & y__h4784 ;
  assign y__h4784 = x__h4582 | y__h4583 ;
  assign y__h4891 = x__h4937 & y__h4938 ;
  assign y__h4938 = x__h4736 | y__h4737 ;
  assign y__h5045 = x__h5091 & y__h5092 ;
  assign y__h5092 = x__h4890 | y__h4891 ;
  assign y__h5199 = x__h5245 & y__h5246 ;
  assign y__h5246 = x__h5044 | y__h5045 ;
  assign y__h5353 = x__h5399 & y__h5400 ;
  assign y__h5400 = x__h5198 | y__h5199 ;
  assign y__h5507 = x__h5553 & y__h5554 ;
  assign y__h5554 = x__h5352 | y__h5353 ;
  assign y__h5661 = x__h5707 & y__h5708 ;
  assign y__h5708 = x__h5506 | y__h5507 ;
  assign y__h5815 = x__h5861 & y__h5862 ;
  assign y__h5862 = x__h5660 | y__h5661 ;
  assign y__h5969 = x__h6015 & y__h6016 ;
  assign y__h6016 = x__h5814 | y__h5815 ;
  assign y__h6123 = x__h6169 & y__h6170 ;
  assign y__h6170 = x__h5968 | y__h5969 ;
  assign y__h6277 = x__h6323 & y__h6324 ;
  assign y__h6324 = x__h6122 | y__h6123 ;
  assign y__h6431 = x__h6477 & y__h6478 ;
  assign y__h6478 = x__h6276 | y__h6277 ;
  assign y__h6585 = x__h6631 & y__h6632 ;
  assign y__h6632 = x__h6430 | y__h6431 ;
  assign y__h6739 = x__h6785 & y__h6786 ;
  assign y__h6786 = x__h6584 | y__h6585 ;
  assign y__h6893 = x__h6939 & y__h6940 ;
  assign y__h6940 = x__h6738 | y__h6739 ;
  assign y__h7047 = x__h7093 & y__h7094 ;
  assign y__h7094 = x__h6892 | y__h6893 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 5'd9;
	final_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	prepmul <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_out_EN) add_out <= `BSV_ASSIGNMENT_DELAY add_out_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (final_out_EN) final_out <= `BSV_ASSIGNMENT_DELAY final_out_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_result_EN)
	  got_result <= `BSV_ASSIGNMENT_DELAY got_result_D_IN;
	if (inp_A_EN) inp_A <= `BSV_ASSIGNMENT_DELAY inp_A_D_IN;
	if (inp_B_EN) inp_B <= `BSV_ASSIGNMENT_DELAY inp_B_D_IN;
	if (inp_C_EN) inp_C <= `BSV_ASSIGNMENT_DELAY inp_C_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_out_EN) mul_out <= `BSV_ASSIGNMENT_DELAY mul_out_D_IN;
	if (prepmul_EN) prepmul <= `BSV_ASSIGNMENT_DELAY prepmul_D_IN;
	if (sign_EN) sign <= `BSV_ASSIGNMENT_DELAY sign_D_IN;
	if (sign_A_EN) sign_A <= `BSV_ASSIGNMENT_DELAY sign_A_D_IN;
	if (sign_B_EN) sign_B <= `BSV_ASSIGNMENT_DELAY sign_B_D_IN;
	if (temp_EN) temp <= `BSV_ASSIGNMENT_DELAY temp_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_out = 32'hAAAAAAAA;
    counter = 5'h0A;
    final_out = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_result = 1'h0;
    inp_A = 16'hAAAA;
    inp_B = 16'hAAAA;
    inp_C = 32'hAAAAAAAA;
    mul_done = 1'h0;
    mul_out = 32'hAAAAAAAA;
    prepmul = 1'h0;
    sign = 1'h0;
    sign_A = 1'h0;
    sign_B = 1'h0;
    temp = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkintmul

