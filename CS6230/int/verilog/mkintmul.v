//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Oct 28 23:48:58 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_select                 O     1
// get_output                     O    32 reg
// RDY_get_output                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32 reg
// get_select_s                   I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_select                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintmul(CLK,
		RST_N,

		get_A_a,
		EN_get_A,
		RDY_get_A,

		get_B_b,
		EN_get_B,
		RDY_get_B,

		get_C_c,
		EN_get_C,
		RDY_get_C,

		get_select_s,
		EN_get_select,
		RDY_get_select,

		get_output,
		RDY_get_output);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_select
  input  get_select_s;
  input  EN_get_select;
  output RDY_get_select;

  // value method get_output
  output [31 : 0] get_output;
  output RDY_get_output;

  // signals for module outputs
  wire [31 : 0] get_output;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_output, RDY_get_select;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_out
  reg [31 : 0] add_out;
  wire [31 : 0] add_out_D_IN;
  wire add_out_EN;

  // register counter
  reg [4 : 0] counter;
  wire [4 : 0] counter_D_IN;
  wire counter_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_result
  reg got_result;
  wire got_result_D_IN, got_result_EN;

  // register got_select
  reg got_select;
  wire got_select_D_IN, got_select_EN;

  // register inp_A
  reg [15 : 0] inp_A;
  wire [15 : 0] inp_A_D_IN;
  wire inp_A_EN;

  // register inp_B
  reg [15 : 0] inp_B;
  wire [15 : 0] inp_B_D_IN;
  wire inp_B_EN;

  // register inp_C
  reg [31 : 0] inp_C;
  wire [31 : 0] inp_C_D_IN;
  wire inp_C_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_out
  reg [31 : 0] mul_out;
  wire [31 : 0] mul_out_D_IN;
  wire mul_out_EN;

  // register prepmul
  reg prepmul;
  wire prepmul_D_IN, prepmul_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // register temp
  reg [15 : 0] temp;
  wire [15 : 0] temp_D_IN;
  wire temp_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_finished,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_done,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_select,
       WILL_FIRE_RL_finished,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_done,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_select;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_inp_A_write_1__VAL_2,
		MUX_inp_B_write_1__VAL_2,
		MUX_temp_write_1__VAL_1;
  wire [4 : 0] MUX_counter_write_1__VAL_2;
  wire MUX_temp_write_1__SEL_1;

  // remaining internal signals
  wire [29 : 0] mul_out_48_BIT_29_57_XOR_inp_C_50_BIT_29_58_60_ETC___d482;
  wire [27 : 0] mul_out_48_BIT_27_65_XOR_inp_C_50_BIT_27_66_68_ETC___d481;
  wire [25 : 0] mul_out_48_BIT_25_73_XOR_inp_C_50_BIT_25_74_76_ETC___d480;
  wire [23 : 0] mul_out_48_BIT_23_81_XOR_inp_C_50_BIT_23_82_84_ETC___d479;
  wire [21 : 0] mul_out_48_BIT_21_89_XOR_inp_C_50_BIT_21_90_92_ETC___d478;
  wire [19 : 0] mul_out_48_BIT_19_97_XOR_inp_C_50_BIT_19_98_00_ETC___d477;
  wire [17 : 0] mul_out_48_BIT_17_05_XOR_inp_C_50_BIT_17_06_08_ETC___d476;
  wire [15 : 0] inp_A_7_PLUS_1___d18,
		mul_out_48_BIT_15_13_XOR_inp_C_50_BIT_15_14_16_ETC___d475,
		temp_5_BIT_15_6_XOR_inp_A_7_BIT_15_32_33_XOR_t_ETC___d229,
		temp_5_BIT_15_6_XOR_inp_A_7_PLUS_1_8_BIT_15_9__ETC___d131;
  wire [13 : 0] mul_out_48_BIT_13_21_XOR_inp_C_50_BIT_13_22_24_ETC___d474,
		temp_5_BIT_13_5_XOR_inp_A_7_BIT_13_37_39_XOR_t_ETC___d228,
		temp_5_BIT_13_5_XOR_inp_A_7_PLUS_1_8_BIT_13_6__ETC___d130;
  wire [11 : 0] mul_out_48_BIT_11_29_XOR_inp_C_50_BIT_11_30_32_ETC___d473,
		temp_5_BIT_11_3_XOR_inp_A_7_BIT_11_43_45_XOR_t_ETC___d227,
		temp_5_BIT_11_3_XOR_inp_A_7_PLUS_1_8_BIT_11_4__ETC___d129;
  wire [9 : 0] mul_out_48_BIT_9_37_XOR_inp_C_50_BIT_9_38_40_X_ETC___d472,
	       temp_5_BIT_9_1_XOR_inp_A_7_BIT_9_49_51_XOR_tem_ETC___d226,
	       temp_5_BIT_9_1_XOR_inp_A_7_PLUS_1_8_BIT_9_2_4__ETC___d128;
  wire [7 : 0] mul_out_48_BIT_7_45_XOR_inp_C_50_BIT_7_46_48_X_ETC___d471,
	       temp_5_BIT_7_9_XOR_inp_A_7_BIT_7_55_57_XOR_tem_ETC___d225,
	       temp_5_BIT_7_9_XOR_inp_A_7_PLUS_1_8_BIT_7_0_2__ETC___d127;
  wire [5 : 0] mul_out_48_BIT_5_53_XOR_inp_C_50_BIT_5_54_56_X_ETC___d470,
	       temp_5_BIT_5_7_XOR_inp_A_7_BIT_5_61_63_XOR_tem_ETC___d224,
	       temp_5_BIT_5_7_XOR_inp_A_7_PLUS_1_8_BIT_5_8_0__ETC___d126;
  wire [3 : 0] mul_out_48_BIT_3_61_XOR_inp_C_50_BIT_3_62_64_X_ETC___d469,
	       temp_5_BIT_3_5_XOR_inp_A_7_BIT_3_67_69_XOR_tem_ETC___d223,
	       temp_5_BIT_3_5_XOR_inp_A_7_PLUS_1_8_BIT_3_6_8__ETC___d125;
  wire x__h10096,
       x__h10201,
       x__h10306,
       x__h10411,
       x__h10516,
       x__h10621,
       x__h10726,
       x__h10831,
       x__h10976,
       x__h11033,
       x__h11090,
       x__h11147,
       x__h11204,
       x__h11261,
       x__h11318,
       x__h11375,
       x__h1143,
       x__h11432,
       x__h11489,
       x__h11546,
       x__h11603,
       x__h11660,
       x__h11717,
       x__h11774,
       x__h11831,
       x__h11888,
       x__h11945,
       x__h12002,
       x__h12059,
       x__h12116,
       x__h12173,
       x__h12230,
       x__h1228,
       x__h12287,
       x__h12344,
       x__h12401,
       x__h12458,
       x__h12515,
       x__h12572,
       x__h12629,
       x__h1275,
       x__h1333,
       x__h1380,
       x__h1438,
       x__h1485,
       x__h1543,
       x__h1590,
       x__h1648,
       x__h1695,
       x__h1753,
       x__h1800,
       x__h1858,
       x__h1905,
       x__h1963,
       x__h2010,
       x__h2068,
       x__h2115,
       x__h2173,
       x__h2220,
       x__h2278,
       x__h2325,
       x__h2383,
       x__h2430,
       x__h2488,
       x__h2535,
       x__h2593,
       x__h2640,
       x__h4143,
       x__h4203,
       x__h4308,
       x__h4413,
       x__h4518,
       x__h4623,
       x__h4728,
       x__h4833,
       x__h4938,
       x__h5043,
       x__h5148,
       x__h5253,
       x__h5358,
       x__h5463,
       x__h5568,
       x__h5776,
       x__h5833,
       x__h5890,
       x__h5947,
       x__h6004,
       x__h6061,
       x__h6118,
       x__h6175,
       x__h6232,
       x__h6289,
       x__h6346,
       x__h6403,
       x__h6460,
       x__h6517,
       x__h7725,
       x__h7786,
       x__h7891,
       x__h7996,
       x__h8101,
       x__h8206,
       x__h8311,
       x__h8416,
       x__h8521,
       x__h8626,
       x__h8731,
       x__h8836,
       x__h8941,
       x__h9046,
       x__h9151,
       x__h9256,
       x__h9361,
       x__h9466,
       x__h9571,
       x__h9676,
       x__h9781,
       x__h9886,
       x__h9991,
       y__h10097,
       y__h10202,
       y__h10307,
       y__h10412,
       y__h10517,
       y__h10622,
       y__h10727,
       y__h10832,
       y__h10977,
       y__h11034,
       y__h11091,
       y__h11148,
       y__h11205,
       y__h11262,
       y__h11319,
       y__h11376,
       y__h11433,
       y__h1144,
       y__h11490,
       y__h11547,
       y__h11604,
       y__h11661,
       y__h11718,
       y__h11775,
       y__h11832,
       y__h11889,
       y__h11946,
       y__h12003,
       y__h12060,
       y__h12117,
       y__h12174,
       y__h12231,
       y__h12288,
       y__h1229,
       y__h12345,
       y__h12402,
       y__h12459,
       y__h12516,
       y__h12573,
       y__h12630,
       y__h1276,
       y__h1334,
       y__h1381,
       y__h1439,
       y__h1486,
       y__h1544,
       y__h1591,
       y__h1649,
       y__h1696,
       y__h1754,
       y__h1801,
       y__h1859,
       y__h1906,
       y__h1964,
       y__h2011,
       y__h2069,
       y__h2116,
       y__h2174,
       y__h2221,
       y__h2279,
       y__h2326,
       y__h2384,
       y__h2431,
       y__h2489,
       y__h2536,
       y__h2594,
       y__h2641,
       y__h4144,
       y__h4204,
       y__h4309,
       y__h4414,
       y__h4519,
       y__h4624,
       y__h4729,
       y__h4834,
       y__h4939,
       y__h5044,
       y__h5149,
       y__h5254,
       y__h5359,
       y__h5464,
       y__h5569,
       y__h5777,
       y__h5834,
       y__h5891,
       y__h5948,
       y__h6005,
       y__h6062,
       y__h6119,
       y__h6176,
       y__h6233,
       y__h6290,
       y__h6347,
       y__h6404,
       y__h6461,
       y__h6518,
       y__h7726,
       y__h7787,
       y__h7892,
       y__h7997,
       y__h8102,
       y__h8207,
       y__h8312,
       y__h8417,
       y__h8522,
       y__h8627,
       y__h8732,
       y__h8837,
       y__h8942,
       y__h9047,
       y__h9152,
       y__h9257,
       y__h9362,
       y__h9467,
       y__h9572,
       y__h9677,
       y__h9782,
       y__h9887,
       y__h9992;

  // action method get_A
  assign RDY_get_A = !got_A && !mul_done && !add_done && !got_result ;
  assign CAN_FIRE_get_A = !got_A && !mul_done && !add_done && !got_result ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B && !mul_done && !add_done && !got_result ;
  assign CAN_FIRE_get_B = !got_B && !mul_done && !add_done && !got_result ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !got_C && !mul_done && !add_done && !got_result ;
  assign CAN_FIRE_get_C = !got_C && !mul_done && !add_done && !got_result ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_select
  assign RDY_get_select =
	     !got_select && !mul_done && !add_done && !got_result ;
  assign CAN_FIRE_get_select =
	     !got_select && !mul_done && !add_done && !got_result ;
  assign WILL_FIRE_get_select = EN_get_select ;

  // value method get_output
  assign get_output = add_out ;
  assign RDY_get_output = got_result ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     got_A && got_B && got_C && got_select && counter != 5'd0 ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul =
	     !mul_done && counter == 5'd0 && !add_done && !got_result ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add = mul_done && !add_done && !got_result ;
  assign WILL_FIRE_RL_rl_add = CAN_FIRE_RL_rl_add ;

  // rule RL_rl_done
  assign CAN_FIRE_RL_rl_done = add_done && !got_result ;
  assign WILL_FIRE_RL_rl_done = CAN_FIRE_RL_rl_done ;

  // rule RL_finished
  assign CAN_FIRE_RL_finished = got_result ;
  assign WILL_FIRE_RL_finished = got_result ;

  // inputs to muxes for submodule ports
  assign MUX_temp_write_1__SEL_1 = WILL_FIRE_RL_rl_multiply && inp_B[0] ;
  assign MUX_counter_write_1__VAL_2 = counter - 5'd1 ;
  assign MUX_inp_A_write_1__VAL_2 = { inp_A[14:0], 1'd0 } ;
  assign MUX_inp_B_write_1__VAL_2 = { 1'd0, inp_B[15:1] } ;
  assign MUX_temp_write_1__VAL_1 =
	     (counter == 5'd1) ?
	       temp_5_BIT_15_6_XOR_inp_A_7_PLUS_1_8_BIT_15_9__ETC___d131 :
	       temp_5_BIT_15_6_XOR_inp_A_7_BIT_15_32_33_XOR_t_ETC___d229 ;

  // register add_done
  assign add_done_D_IN = !got_result ;
  assign add_done_EN = got_result || WILL_FIRE_RL_rl_add ;

  // register add_out
  assign add_out_D_IN =
	     { x__h7725 ^ y__h7726,
	       x__h10976 ^ y__h10977,
	       mul_out_48_BIT_29_57_XOR_inp_C_50_BIT_29_58_60_ETC___d482 } ;
  assign add_out_EN = CAN_FIRE_RL_rl_add ;

  // register counter
  assign counter_D_IN = got_result ? 5'd9 : MUX_counter_write_1__VAL_2 ;
  assign counter_EN = WILL_FIRE_RL_rl_multiply || got_result ;

  // register got_A
  assign got_A_D_IN = !got_result ;
  assign got_A_EN = got_result || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !got_result ;
  assign got_B_EN = got_result || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !got_result ;
  assign got_C_EN = got_result || EN_get_C ;

  // register got_result
  assign got_result_D_IN = !got_result ;
  assign got_result_EN = got_result || WILL_FIRE_RL_rl_done ;

  // register got_select
  assign got_select_D_IN = !got_result ;
  assign got_select_EN = got_result || EN_get_select ;

  // register inp_A
  assign inp_A_D_IN = EN_get_A ? get_A_a : MUX_inp_A_write_1__VAL_2 ;
  assign inp_A_EN = EN_get_A || WILL_FIRE_RL_rl_multiply ;

  // register inp_B
  assign inp_B_D_IN = EN_get_B ? get_B_b : MUX_inp_B_write_1__VAL_2 ;
  assign inp_B_EN = EN_get_B || WILL_FIRE_RL_rl_multiply ;

  // register inp_C
  assign inp_C_D_IN = get_C_c ;
  assign inp_C_EN = EN_get_C ;

  // register mul_done
  assign mul_done_D_IN = !got_result ;
  assign mul_done_EN = got_result || WILL_FIRE_RL_rl_mul ;

  // register mul_out
  assign mul_out_D_IN = { {16{temp[15]}}, temp } ;
  assign mul_out_EN = CAN_FIRE_RL_rl_mul ;

  // register prepmul
  assign prepmul_D_IN = 1'b0 ;
  assign prepmul_EN = 1'b0 ;

  // register select
  assign select_D_IN = get_select_s ;
  assign select_EN = EN_get_select ;

  // register temp
  assign temp_D_IN =
	     MUX_temp_write_1__SEL_1 ? MUX_temp_write_1__VAL_1 : 16'd0 ;
  assign temp_EN =
	     WILL_FIRE_RL_rl_multiply && inp_B[0] || WILL_FIRE_RL_rl_mul ;

  // remaining internal signals
  assign inp_A_7_PLUS_1___d18 = inp_A + 16'd1 ;
  assign mul_out_48_BIT_11_29_XOR_inp_C_50_BIT_11_30_32_ETC___d473 =
	     { x__h12059 ^ y__h12060,
	       x__h12116 ^ y__h12117,
	       mul_out_48_BIT_9_37_XOR_inp_C_50_BIT_9_38_40_X_ETC___d472 } ;
  assign mul_out_48_BIT_13_21_XOR_inp_C_50_BIT_13_22_24_ETC___d474 =
	     { x__h11945 ^ y__h11946,
	       x__h12002 ^ y__h12003,
	       mul_out_48_BIT_11_29_XOR_inp_C_50_BIT_11_30_32_ETC___d473 } ;
  assign mul_out_48_BIT_15_13_XOR_inp_C_50_BIT_15_14_16_ETC___d475 =
	     { x__h11831 ^ y__h11832,
	       x__h11888 ^ y__h11889,
	       mul_out_48_BIT_13_21_XOR_inp_C_50_BIT_13_22_24_ETC___d474 } ;
  assign mul_out_48_BIT_17_05_XOR_inp_C_50_BIT_17_06_08_ETC___d476 =
	     { x__h11717 ^ y__h11718,
	       x__h11774 ^ y__h11775,
	       mul_out_48_BIT_15_13_XOR_inp_C_50_BIT_15_14_16_ETC___d475 } ;
  assign mul_out_48_BIT_19_97_XOR_inp_C_50_BIT_19_98_00_ETC___d477 =
	     { x__h11603 ^ y__h11604,
	       x__h11660 ^ y__h11661,
	       mul_out_48_BIT_17_05_XOR_inp_C_50_BIT_17_06_08_ETC___d476 } ;
  assign mul_out_48_BIT_21_89_XOR_inp_C_50_BIT_21_90_92_ETC___d478 =
	     { x__h11489 ^ y__h11490,
	       x__h11546 ^ y__h11547,
	       mul_out_48_BIT_19_97_XOR_inp_C_50_BIT_19_98_00_ETC___d477 } ;
  assign mul_out_48_BIT_23_81_XOR_inp_C_50_BIT_23_82_84_ETC___d479 =
	     { x__h11375 ^ y__h11376,
	       x__h11432 ^ y__h11433,
	       mul_out_48_BIT_21_89_XOR_inp_C_50_BIT_21_90_92_ETC___d478 } ;
  assign mul_out_48_BIT_25_73_XOR_inp_C_50_BIT_25_74_76_ETC___d480 =
	     { x__h11261 ^ y__h11262,
	       x__h11318 ^ y__h11319,
	       mul_out_48_BIT_23_81_XOR_inp_C_50_BIT_23_82_84_ETC___d479 } ;
  assign mul_out_48_BIT_27_65_XOR_inp_C_50_BIT_27_66_68_ETC___d481 =
	     { x__h11147 ^ y__h11148,
	       x__h11204 ^ y__h11205,
	       mul_out_48_BIT_25_73_XOR_inp_C_50_BIT_25_74_76_ETC___d480 } ;
  assign mul_out_48_BIT_29_57_XOR_inp_C_50_BIT_29_58_60_ETC___d482 =
	     { x__h11033 ^ y__h11034,
	       x__h11090 ^ y__h11091,
	       mul_out_48_BIT_27_65_XOR_inp_C_50_BIT_27_66_68_ETC___d481 } ;
  assign mul_out_48_BIT_3_61_XOR_inp_C_50_BIT_3_62_64_X_ETC___d469 =
	     { x__h12515 ^ y__h12516,
	       x__h12572 ^ y__h12573,
	       x__h12629 ^ y__h12630,
	       mul_out[0] ^ inp_C[0] } ;
  assign mul_out_48_BIT_5_53_XOR_inp_C_50_BIT_5_54_56_X_ETC___d470 =
	     { x__h12401 ^ y__h12402,
	       x__h12458 ^ y__h12459,
	       mul_out_48_BIT_3_61_XOR_inp_C_50_BIT_3_62_64_X_ETC___d469 } ;
  assign mul_out_48_BIT_7_45_XOR_inp_C_50_BIT_7_46_48_X_ETC___d471 =
	     { x__h12287 ^ y__h12288,
	       x__h12344 ^ y__h12345,
	       mul_out_48_BIT_5_53_XOR_inp_C_50_BIT_5_54_56_X_ETC___d470 } ;
  assign mul_out_48_BIT_9_37_XOR_inp_C_50_BIT_9_38_40_X_ETC___d472 =
	     { x__h12173 ^ y__h12174,
	       x__h12230 ^ y__h12231,
	       mul_out_48_BIT_7_45_XOR_inp_C_50_BIT_7_46_48_X_ETC___d471 } ;
  assign temp_5_BIT_11_3_XOR_inp_A_7_BIT_11_43_45_XOR_t_ETC___d227 =
	     { x__h5947 ^ y__h5948,
	       x__h6004 ^ y__h6005,
	       temp_5_BIT_9_1_XOR_inp_A_7_BIT_9_49_51_XOR_tem_ETC___d226 } ;
  assign temp_5_BIT_11_3_XOR_inp_A_7_PLUS_1_8_BIT_11_4__ETC___d129 =
	     { x__h1590 ^ y__h1591,
	       x__h1695 ^ y__h1696,
	       temp_5_BIT_9_1_XOR_inp_A_7_PLUS_1_8_BIT_9_2_4__ETC___d128 } ;
  assign temp_5_BIT_13_5_XOR_inp_A_7_BIT_13_37_39_XOR_t_ETC___d228 =
	     { x__h5833 ^ y__h5834,
	       x__h5890 ^ y__h5891,
	       temp_5_BIT_11_3_XOR_inp_A_7_BIT_11_43_45_XOR_t_ETC___d227 } ;
  assign temp_5_BIT_13_5_XOR_inp_A_7_PLUS_1_8_BIT_13_6__ETC___d130 =
	     { x__h1380 ^ y__h1381,
	       x__h1485 ^ y__h1486,
	       temp_5_BIT_11_3_XOR_inp_A_7_PLUS_1_8_BIT_11_4__ETC___d129 } ;
  assign temp_5_BIT_15_6_XOR_inp_A_7_BIT_15_32_33_XOR_t_ETC___d229 =
	     { x__h4143 ^ y__h4144,
	       x__h5776 ^ y__h5777,
	       temp_5_BIT_13_5_XOR_inp_A_7_BIT_13_37_39_XOR_t_ETC___d228 } ;
  assign temp_5_BIT_15_6_XOR_inp_A_7_PLUS_1_8_BIT_15_9__ETC___d131 =
	     { x__h1143 ^ y__h1144,
	       x__h1275 ^ y__h1276,
	       temp_5_BIT_13_5_XOR_inp_A_7_PLUS_1_8_BIT_13_6__ETC___d130 } ;
  assign temp_5_BIT_3_5_XOR_inp_A_7_BIT_3_67_69_XOR_tem_ETC___d223 =
	     { x__h6403 ^ y__h6404,
	       x__h6460 ^ y__h6461,
	       x__h6517 ^ y__h6518,
	       temp[0] ^ inp_A[0] } ;
  assign temp_5_BIT_3_5_XOR_inp_A_7_PLUS_1_8_BIT_3_6_8__ETC___d125 =
	     { x__h2430 ^ y__h2431,
	       x__h2535 ^ y__h2536,
	       x__h2640 ^ y__h2641,
	       temp[0] ^ inp_A_7_PLUS_1___d18[0] } ;
  assign temp_5_BIT_5_7_XOR_inp_A_7_BIT_5_61_63_XOR_tem_ETC___d224 =
	     { x__h6289 ^ y__h6290,
	       x__h6346 ^ y__h6347,
	       temp_5_BIT_3_5_XOR_inp_A_7_BIT_3_67_69_XOR_tem_ETC___d223 } ;
  assign temp_5_BIT_5_7_XOR_inp_A_7_PLUS_1_8_BIT_5_8_0__ETC___d126 =
	     { x__h2220 ^ y__h2221,
	       x__h2325 ^ y__h2326,
	       temp_5_BIT_3_5_XOR_inp_A_7_PLUS_1_8_BIT_3_6_8__ETC___d125 } ;
  assign temp_5_BIT_7_9_XOR_inp_A_7_BIT_7_55_57_XOR_tem_ETC___d225 =
	     { x__h6175 ^ y__h6176,
	       x__h6232 ^ y__h6233,
	       temp_5_BIT_5_7_XOR_inp_A_7_BIT_5_61_63_XOR_tem_ETC___d224 } ;
  assign temp_5_BIT_7_9_XOR_inp_A_7_PLUS_1_8_BIT_7_0_2__ETC___d127 =
	     { x__h2010 ^ y__h2011,
	       x__h2115 ^ y__h2116,
	       temp_5_BIT_5_7_XOR_inp_A_7_PLUS_1_8_BIT_5_8_0__ETC___d126 } ;
  assign temp_5_BIT_9_1_XOR_inp_A_7_BIT_9_49_51_XOR_tem_ETC___d226 =
	     { x__h6061 ^ y__h6062,
	       x__h6118 ^ y__h6119,
	       temp_5_BIT_7_9_XOR_inp_A_7_BIT_7_55_57_XOR_tem_ETC___d225 } ;
  assign temp_5_BIT_9_1_XOR_inp_A_7_PLUS_1_8_BIT_9_2_4__ETC___d128 =
	     { x__h1800 ^ y__h1801,
	       x__h1905 ^ y__h1906,
	       temp_5_BIT_7_9_XOR_inp_A_7_PLUS_1_8_BIT_7_0_2__ETC___d127 } ;
  assign x__h10096 = mul_out[8] & inp_C[8] ;
  assign x__h10201 = mul_out[7] & inp_C[7] ;
  assign x__h10306 = mul_out[6] & inp_C[6] ;
  assign x__h10411 = mul_out[5] & inp_C[5] ;
  assign x__h10516 = mul_out[4] & inp_C[4] ;
  assign x__h10621 = mul_out[3] & inp_C[3] ;
  assign x__h10726 = mul_out[2] & inp_C[2] ;
  assign x__h10831 = mul_out[1] & inp_C[1] ;
  assign x__h10976 = mul_out[30] ^ inp_C[30] ;
  assign x__h11033 = mul_out[29] ^ inp_C[29] ;
  assign x__h11090 = mul_out[28] ^ inp_C[28] ;
  assign x__h11147 = mul_out[27] ^ inp_C[27] ;
  assign x__h11204 = mul_out[26] ^ inp_C[26] ;
  assign x__h11261 = mul_out[25] ^ inp_C[25] ;
  assign x__h11318 = mul_out[24] ^ inp_C[24] ;
  assign x__h11375 = mul_out[23] ^ inp_C[23] ;
  assign x__h1143 = temp[15] ^ inp_A_7_PLUS_1___d18[15] ;
  assign x__h11432 = mul_out[22] ^ inp_C[22] ;
  assign x__h11489 = mul_out[21] ^ inp_C[21] ;
  assign x__h11546 = mul_out[20] ^ inp_C[20] ;
  assign x__h11603 = mul_out[19] ^ inp_C[19] ;
  assign x__h11660 = mul_out[18] ^ inp_C[18] ;
  assign x__h11717 = mul_out[17] ^ inp_C[17] ;
  assign x__h11774 = mul_out[16] ^ inp_C[16] ;
  assign x__h11831 = mul_out[15] ^ inp_C[15] ;
  assign x__h11888 = mul_out[14] ^ inp_C[14] ;
  assign x__h11945 = mul_out[13] ^ inp_C[13] ;
  assign x__h12002 = mul_out[12] ^ inp_C[12] ;
  assign x__h12059 = mul_out[11] ^ inp_C[11] ;
  assign x__h12116 = mul_out[10] ^ inp_C[10] ;
  assign x__h12173 = mul_out[9] ^ inp_C[9] ;
  assign x__h12230 = mul_out[8] ^ inp_C[8] ;
  assign x__h1228 = temp[14] & inp_A_7_PLUS_1___d18[14] ;
  assign x__h12287 = mul_out[7] ^ inp_C[7] ;
  assign x__h12344 = mul_out[6] ^ inp_C[6] ;
  assign x__h12401 = mul_out[5] ^ inp_C[5] ;
  assign x__h12458 = mul_out[4] ^ inp_C[4] ;
  assign x__h12515 = mul_out[3] ^ inp_C[3] ;
  assign x__h12572 = mul_out[2] ^ inp_C[2] ;
  assign x__h12629 = mul_out[1] ^ inp_C[1] ;
  assign x__h1275 = temp[14] ^ inp_A_7_PLUS_1___d18[14] ;
  assign x__h1333 = temp[13] & inp_A_7_PLUS_1___d18[13] ;
  assign x__h1380 = temp[13] ^ inp_A_7_PLUS_1___d18[13] ;
  assign x__h1438 = temp[12] & inp_A_7_PLUS_1___d18[12] ;
  assign x__h1485 = temp[12] ^ inp_A_7_PLUS_1___d18[12] ;
  assign x__h1543 = temp[11] & inp_A_7_PLUS_1___d18[11] ;
  assign x__h1590 = temp[11] ^ inp_A_7_PLUS_1___d18[11] ;
  assign x__h1648 = temp[10] & inp_A_7_PLUS_1___d18[10] ;
  assign x__h1695 = temp[10] ^ inp_A_7_PLUS_1___d18[10] ;
  assign x__h1753 = temp[9] & inp_A_7_PLUS_1___d18[9] ;
  assign x__h1800 = temp[9] ^ inp_A_7_PLUS_1___d18[9] ;
  assign x__h1858 = temp[8] & inp_A_7_PLUS_1___d18[8] ;
  assign x__h1905 = temp[8] ^ inp_A_7_PLUS_1___d18[8] ;
  assign x__h1963 = temp[7] & inp_A_7_PLUS_1___d18[7] ;
  assign x__h2010 = temp[7] ^ inp_A_7_PLUS_1___d18[7] ;
  assign x__h2068 = temp[6] & inp_A_7_PLUS_1___d18[6] ;
  assign x__h2115 = temp[6] ^ inp_A_7_PLUS_1___d18[6] ;
  assign x__h2173 = temp[5] & inp_A_7_PLUS_1___d18[5] ;
  assign x__h2220 = temp[5] ^ inp_A_7_PLUS_1___d18[5] ;
  assign x__h2278 = temp[4] & inp_A_7_PLUS_1___d18[4] ;
  assign x__h2325 = temp[4] ^ inp_A_7_PLUS_1___d18[4] ;
  assign x__h2383 = temp[3] & inp_A_7_PLUS_1___d18[3] ;
  assign x__h2430 = temp[3] ^ inp_A_7_PLUS_1___d18[3] ;
  assign x__h2488 = temp[2] & inp_A_7_PLUS_1___d18[2] ;
  assign x__h2535 = temp[2] ^ inp_A_7_PLUS_1___d18[2] ;
  assign x__h2593 = temp[1] & inp_A_7_PLUS_1___d18[1] ;
  assign x__h2640 = temp[1] ^ inp_A_7_PLUS_1___d18[1] ;
  assign x__h4143 = temp[15] ^ inp_A[15] ;
  assign x__h4203 = temp[14] & inp_A[14] ;
  assign x__h4308 = temp[13] & inp_A[13] ;
  assign x__h4413 = temp[12] & inp_A[12] ;
  assign x__h4518 = temp[11] & inp_A[11] ;
  assign x__h4623 = temp[10] & inp_A[10] ;
  assign x__h4728 = temp[9] & inp_A[9] ;
  assign x__h4833 = temp[8] & inp_A[8] ;
  assign x__h4938 = temp[7] & inp_A[7] ;
  assign x__h5043 = temp[6] & inp_A[6] ;
  assign x__h5148 = temp[5] & inp_A[5] ;
  assign x__h5253 = temp[4] & inp_A[4] ;
  assign x__h5358 = temp[3] & inp_A[3] ;
  assign x__h5463 = temp[2] & inp_A[2] ;
  assign x__h5568 = temp[1] & inp_A[1] ;
  assign x__h5776 = temp[14] ^ inp_A[14] ;
  assign x__h5833 = temp[13] ^ inp_A[13] ;
  assign x__h5890 = temp[12] ^ inp_A[12] ;
  assign x__h5947 = temp[11] ^ inp_A[11] ;
  assign x__h6004 = temp[10] ^ inp_A[10] ;
  assign x__h6061 = temp[9] ^ inp_A[9] ;
  assign x__h6118 = temp[8] ^ inp_A[8] ;
  assign x__h6175 = temp[7] ^ inp_A[7] ;
  assign x__h6232 = temp[6] ^ inp_A[6] ;
  assign x__h6289 = temp[5] ^ inp_A[5] ;
  assign x__h6346 = temp[4] ^ inp_A[4] ;
  assign x__h6403 = temp[3] ^ inp_A[3] ;
  assign x__h6460 = temp[2] ^ inp_A[2] ;
  assign x__h6517 = temp[1] ^ inp_A[1] ;
  assign x__h7725 = mul_out[31] ^ inp_C[31] ;
  assign x__h7786 = mul_out[30] & inp_C[30] ;
  assign x__h7891 = mul_out[29] & inp_C[29] ;
  assign x__h7996 = mul_out[28] & inp_C[28] ;
  assign x__h8101 = mul_out[27] & inp_C[27] ;
  assign x__h8206 = mul_out[26] & inp_C[26] ;
  assign x__h8311 = mul_out[25] & inp_C[25] ;
  assign x__h8416 = mul_out[24] & inp_C[24] ;
  assign x__h8521 = mul_out[23] & inp_C[23] ;
  assign x__h8626 = mul_out[22] & inp_C[22] ;
  assign x__h8731 = mul_out[21] & inp_C[21] ;
  assign x__h8836 = mul_out[20] & inp_C[20] ;
  assign x__h8941 = mul_out[19] & inp_C[19] ;
  assign x__h9046 = mul_out[18] & inp_C[18] ;
  assign x__h9151 = mul_out[17] & inp_C[17] ;
  assign x__h9256 = mul_out[16] & inp_C[16] ;
  assign x__h9361 = mul_out[15] & inp_C[15] ;
  assign x__h9466 = mul_out[14] & inp_C[14] ;
  assign x__h9571 = mul_out[13] & inp_C[13] ;
  assign x__h9676 = mul_out[12] & inp_C[12] ;
  assign x__h9781 = mul_out[11] & inp_C[11] ;
  assign x__h9886 = mul_out[10] & inp_C[10] ;
  assign x__h9991 = mul_out[9] & inp_C[9] ;
  assign y__h10097 = x__h12230 & y__h12231 ;
  assign y__h10202 = x__h12287 & y__h12288 ;
  assign y__h10307 = x__h12344 & y__h12345 ;
  assign y__h10412 = x__h12401 & y__h12402 ;
  assign y__h10517 = x__h12458 & y__h12459 ;
  assign y__h10622 = x__h12515 & y__h12516 ;
  assign y__h10727 = x__h12572 & y__h12573 ;
  assign y__h10832 = x__h12629 & y__h12630 ;
  assign y__h10977 = x__h7891 | y__h7892 ;
  assign y__h11034 = x__h7996 | y__h7997 ;
  assign y__h11091 = x__h8101 | y__h8102 ;
  assign y__h11148 = x__h8206 | y__h8207 ;
  assign y__h11205 = x__h8311 | y__h8312 ;
  assign y__h11262 = x__h8416 | y__h8417 ;
  assign y__h11319 = x__h8521 | y__h8522 ;
  assign y__h11376 = x__h8626 | y__h8627 ;
  assign y__h11433 = x__h8731 | y__h8732 ;
  assign y__h1144 = x__h1228 | y__h1229 ;
  assign y__h11490 = x__h8836 | y__h8837 ;
  assign y__h11547 = x__h8941 | y__h8942 ;
  assign y__h11604 = x__h9046 | y__h9047 ;
  assign y__h11661 = x__h9151 | y__h9152 ;
  assign y__h11718 = x__h9256 | y__h9257 ;
  assign y__h11775 = x__h9361 | y__h9362 ;
  assign y__h11832 = x__h9466 | y__h9467 ;
  assign y__h11889 = x__h9571 | y__h9572 ;
  assign y__h11946 = x__h9676 | y__h9677 ;
  assign y__h12003 = x__h9781 | y__h9782 ;
  assign y__h12060 = x__h9886 | y__h9887 ;
  assign y__h12117 = x__h9991 | y__h9992 ;
  assign y__h12174 = x__h10096 | y__h10097 ;
  assign y__h12231 = x__h10201 | y__h10202 ;
  assign y__h12288 = x__h10306 | y__h10307 ;
  assign y__h1229 = x__h1275 & y__h1276 ;
  assign y__h12345 = x__h10411 | y__h10412 ;
  assign y__h12402 = x__h10516 | y__h10517 ;
  assign y__h12459 = x__h10621 | y__h10622 ;
  assign y__h12516 = x__h10726 | y__h10727 ;
  assign y__h12573 = x__h10831 | y__h10832 ;
  assign y__h12630 = mul_out[0] & inp_C[0] ;
  assign y__h1276 = x__h1333 | y__h1334 ;
  assign y__h1334 = x__h1380 & y__h1381 ;
  assign y__h1381 = x__h1438 | y__h1439 ;
  assign y__h1439 = x__h1485 & y__h1486 ;
  assign y__h1486 = x__h1543 | y__h1544 ;
  assign y__h1544 = x__h1590 & y__h1591 ;
  assign y__h1591 = x__h1648 | y__h1649 ;
  assign y__h1649 = x__h1695 & y__h1696 ;
  assign y__h1696 = x__h1753 | y__h1754 ;
  assign y__h1754 = x__h1800 & y__h1801 ;
  assign y__h1801 = x__h1858 | y__h1859 ;
  assign y__h1859 = x__h1905 & y__h1906 ;
  assign y__h1906 = x__h1963 | y__h1964 ;
  assign y__h1964 = x__h2010 & y__h2011 ;
  assign y__h2011 = x__h2068 | y__h2069 ;
  assign y__h2069 = x__h2115 & y__h2116 ;
  assign y__h2116 = x__h2173 | y__h2174 ;
  assign y__h2174 = x__h2220 & y__h2221 ;
  assign y__h2221 = x__h2278 | y__h2279 ;
  assign y__h2279 = x__h2325 & y__h2326 ;
  assign y__h2326 = x__h2383 | y__h2384 ;
  assign y__h2384 = x__h2430 & y__h2431 ;
  assign y__h2431 = x__h2488 | y__h2489 ;
  assign y__h2489 = x__h2535 & y__h2536 ;
  assign y__h2536 = x__h2593 | y__h2594 ;
  assign y__h2594 = x__h2640 & y__h2641 ;
  assign y__h2641 = temp[0] & inp_A_7_PLUS_1___d18[0] ;
  assign y__h4144 = x__h4203 | y__h4204 ;
  assign y__h4204 = x__h5776 & y__h5777 ;
  assign y__h4309 = x__h5833 & y__h5834 ;
  assign y__h4414 = x__h5890 & y__h5891 ;
  assign y__h4519 = x__h5947 & y__h5948 ;
  assign y__h4624 = x__h6004 & y__h6005 ;
  assign y__h4729 = x__h6061 & y__h6062 ;
  assign y__h4834 = x__h6118 & y__h6119 ;
  assign y__h4939 = x__h6175 & y__h6176 ;
  assign y__h5044 = x__h6232 & y__h6233 ;
  assign y__h5149 = x__h6289 & y__h6290 ;
  assign y__h5254 = x__h6346 & y__h6347 ;
  assign y__h5359 = x__h6403 & y__h6404 ;
  assign y__h5464 = x__h6460 & y__h6461 ;
  assign y__h5569 = x__h6517 & y__h6518 ;
  assign y__h5777 = x__h4308 | y__h4309 ;
  assign y__h5834 = x__h4413 | y__h4414 ;
  assign y__h5891 = x__h4518 | y__h4519 ;
  assign y__h5948 = x__h4623 | y__h4624 ;
  assign y__h6005 = x__h4728 | y__h4729 ;
  assign y__h6062 = x__h4833 | y__h4834 ;
  assign y__h6119 = x__h4938 | y__h4939 ;
  assign y__h6176 = x__h5043 | y__h5044 ;
  assign y__h6233 = x__h5148 | y__h5149 ;
  assign y__h6290 = x__h5253 | y__h5254 ;
  assign y__h6347 = x__h5358 | y__h5359 ;
  assign y__h6404 = x__h5463 | y__h5464 ;
  assign y__h6461 = x__h5568 | y__h5569 ;
  assign y__h6518 = temp[0] & inp_A[0] ;
  assign y__h7726 = x__h7786 | y__h7787 ;
  assign y__h7787 = x__h10976 & y__h10977 ;
  assign y__h7892 = x__h11033 & y__h11034 ;
  assign y__h7997 = x__h11090 & y__h11091 ;
  assign y__h8102 = x__h11147 & y__h11148 ;
  assign y__h8207 = x__h11204 & y__h11205 ;
  assign y__h8312 = x__h11261 & y__h11262 ;
  assign y__h8417 = x__h11318 & y__h11319 ;
  assign y__h8522 = x__h11375 & y__h11376 ;
  assign y__h8627 = x__h11432 & y__h11433 ;
  assign y__h8732 = x__h11489 & y__h11490 ;
  assign y__h8837 = x__h11546 & y__h11547 ;
  assign y__h8942 = x__h11603 & y__h11604 ;
  assign y__h9047 = x__h11660 & y__h11661 ;
  assign y__h9152 = x__h11717 & y__h11718 ;
  assign y__h9257 = x__h11774 & y__h11775 ;
  assign y__h9362 = x__h11831 & y__h11832 ;
  assign y__h9467 = x__h11888 & y__h11889 ;
  assign y__h9572 = x__h11945 & y__h11946 ;
  assign y__h9677 = x__h12002 & y__h12003 ;
  assign y__h9782 = x__h12059 & y__h12060 ;
  assign y__h9887 = x__h12116 & y__h12117 ;
  assign y__h9992 = x__h12173 & y__h12174 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 5'd9;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inp_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	prepmul <= `BSV_ASSIGNMENT_DELAY 1'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_out_EN) add_out <= `BSV_ASSIGNMENT_DELAY add_out_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_result_EN)
	  got_result <= `BSV_ASSIGNMENT_DELAY got_result_D_IN;
	if (got_select_EN)
	  got_select <= `BSV_ASSIGNMENT_DELAY got_select_D_IN;
	if (inp_A_EN) inp_A <= `BSV_ASSIGNMENT_DELAY inp_A_D_IN;
	if (inp_B_EN) inp_B <= `BSV_ASSIGNMENT_DELAY inp_B_D_IN;
	if (inp_C_EN) inp_C <= `BSV_ASSIGNMENT_DELAY inp_C_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_out_EN) mul_out <= `BSV_ASSIGNMENT_DELAY mul_out_D_IN;
	if (prepmul_EN) prepmul <= `BSV_ASSIGNMENT_DELAY prepmul_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
	if (temp_EN) temp <= `BSV_ASSIGNMENT_DELAY temp_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_out = 32'hAAAAAAAA;
    counter = 5'h0A;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_result = 1'h0;
    got_select = 1'h0;
    inp_A = 16'hAAAA;
    inp_B = 16'hAAAA;
    inp_C = 32'hAAAAAAAA;
    mul_done = 1'h0;
    mul_out = 32'hAAAAAAAA;
    prepmul = 1'h0;
    select = 1'h0;
    temp = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkintmul

