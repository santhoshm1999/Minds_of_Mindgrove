//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Sun Nov 24 18:59:10 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inp_a                  O     1
// RDY_get_inp_b                  O     1
// get_result                     O    16 reg
// RDY_get_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inp_a_inp_A                I    16 reg
// get_inp_b_inp_B                I    16 reg
// EN_get_inp_a                   I     1
// EN_get_inp_b                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUnpipelined_float_mul(CLK,
			       RST_N,

			       get_inp_a_inp_A,
			       EN_get_inp_a,
			       RDY_get_inp_a,

			       get_inp_b_inp_B,
			       EN_get_inp_b,
			       RDY_get_inp_b,

			       get_result,
			       RDY_get_result);
  input  CLK;
  input  RST_N;

  // action method get_inp_a
  input  [15 : 0] get_inp_a_inp_A;
  input  EN_get_inp_a;
  output RDY_get_inp_a;

  // action method get_inp_b
  input  [15 : 0] get_inp_b_inp_B;
  input  EN_get_inp_b;
  output RDY_get_inp_b;

  // value method get_result
  output [15 : 0] get_result;
  output RDY_get_result;

  // signals for module outputs
  wire [15 : 0] get_result;
  wire RDY_get_inp_a, RDY_get_inp_b, RDY_get_result;

  // register a
  reg [15 : 0] a;
  wire [15 : 0] a_D_IN;
  wire a_EN;

  // register b
  reg [15 : 0] b;
  wire [15 : 0] b_D_IN;
  wire b_EN;

  // register end_result
  reg [15 : 0] end_result;
  wire [15 : 0] end_result_D_IN;
  wire end_result_EN;

  // register exp_done
  reg exp_done;
  wire exp_done_D_IN, exp_done_EN;

  // register exp_mantissa
  reg [14 : 0] exp_mantissa;
  wire [14 : 0] exp_mantissa_D_IN;
  wire exp_mantissa_EN;

  // register exp_res
  reg [7 : 0] exp_res;
  wire [7 : 0] exp_res_D_IN;
  wire exp_res_EN;

  // register get_r
  reg get_r;
  wire get_r_D_IN, get_r_EN;

  // register got_a
  reg got_a;
  wire got_a_D_IN, got_a_EN;

  // register got_b
  reg got_b;
  wire got_b_D_IN, got_b_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register mantissa_done
  reg mantissa_done;
  wire mantissa_done_D_IN, mantissa_done_EN;

  // register mul_count
  reg [3 : 0] mul_count;
  reg [3 : 0] mul_count_D_IN;
  wire mul_count_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_start
  reg mul_start;
  wire mul_start_D_IN, mul_start_EN;

  // register pack_done
  reg pack_done;
  wire pack_done_D_IN, pack_done_EN;

  // register result_concatenated
  reg result_concatenated;
  reg result_concatenated_D_IN;
  wire result_concatenated_EN;

  // register result_mul
  reg [15 : 0] result_mul;
  wire [15 : 0] result_mul_D_IN;
  wire result_mul_EN;

  // register sign_done
  reg sign_done;
  wire sign_done_D_IN, sign_done_EN;

  // register tmp_a
  reg [15 : 0] tmp_a;
  wire [15 : 0] tmp_a_D_IN;
  wire tmp_a_EN;

  // register tmp_a_a
  reg [7 : 0] tmp_a_a;
  wire [7 : 0] tmp_a_a_D_IN;
  wire tmp_a_a_EN;

  // register tmp_b
  reg [7 : 0] tmp_b;
  wire [7 : 0] tmp_b_D_IN;
  wire tmp_b_EN;

  // register tmp_exp
  reg [7 : 0] tmp_exp;
  wire [7 : 0] tmp_exp_D_IN;
  wire tmp_exp_EN;

  // register tmp_fraction
  reg [15 : 0] tmp_fraction;
  wire [15 : 0] tmp_fraction_D_IN;
  wire tmp_fraction_EN;

  // register tmp_sign
  reg tmp_sign;
  wire tmp_sign_D_IN, tmp_sign_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_reset_signals,
       CAN_FIRE_RL_rl_add_exp,
       CAN_FIRE_RL_rl_get_mul_res,
       CAN_FIRE_RL_rl_get_sign,
       CAN_FIRE_RL_rl_handling_zero,
       CAN_FIRE_RL_rl_mul_mantissa,
       CAN_FIRE_RL_rl_pack_res,
       CAN_FIRE_RL_rl_round_mantissa,
       CAN_FIRE_get_inp_a,
       CAN_FIRE_get_inp_b,
       WILL_FIRE_RL_reset_signals,
       WILL_FIRE_RL_rl_add_exp,
       WILL_FIRE_RL_rl_get_mul_res,
       WILL_FIRE_RL_rl_get_sign,
       WILL_FIRE_RL_rl_handling_zero,
       WILL_FIRE_RL_rl_mul_mantissa,
       WILL_FIRE_RL_rl_pack_res,
       WILL_FIRE_RL_rl_round_mantissa,
       WILL_FIRE_get_inp_a,
       WILL_FIRE_get_inp_b;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_result_mul_write_1__VAL_1,
		MUX_tmp_a_write_1__VAL_1,
		MUX_tmp_a_write_1__VAL_2;
  wire [7 : 0] MUX_tmp_b_write_1__VAL_1, MUX_tmp_b_write_1__VAL_2;
  wire [3 : 0] MUX_mul_count_write_1__VAL_2;
  wire MUX_handle_zero_write_1__SEL_1, MUX_sign_done_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4050;
  reg [31 : 0] v__h4099;
  reg [31 : 0] v__h4241;
  reg [31 : 0] v__h4289;
  reg [31 : 0] v__h7812;
  reg [31 : 0] v__h7859;
  reg [31 : 0] v__h24316;
  // synopsys translate_on

  // remaining internal signals
  wire [15 : 0] IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3,
		IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2,
		IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5,
		IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4,
		IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7;
  wire [14 : 0] IF_NOT_tmp_fraction_27_BIT_6_60_44_OR_tmp_frac_ETC___d378,
		IF_NOT_tmp_fraction_27_BIT_7_57_61_OR_tmp_frac_ETC___d343,
		IF_tmp_fraction_27_BIT_15_33_XOR_tmp_fraction__ETC___d377,
		IF_tmp_fraction_27_BIT_8_54_AND_tmp_fraction_2_ETC___d342;
  wire [13 : 0] tmp_a_29_BIT_13_38_XOR_tmp_fraction_27_BIT_13__ETC___d246;
  wire [11 : 0] tmp_a_29_BIT_11_44_XOR_tmp_fraction_27_BIT_11__ETC___d245;
  wire [9 : 0] tmp_a_29_BIT_9_50_XOR_tmp_fraction_27_BIT_9_51_ETC___d244;
  wire [7 : 0] IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6,
	       IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___fst__h14409,
	       exp___1__h7959,
	       tmp_a_29_BIT_7_56_XOR_tmp_fraction_27_BIT_7_57_ETC___d243;
  wire [6 : 0] rounded_mantissa__h14408,
	       rounded_mantissa__h20861,
	       rounded_mantissa__h24101,
	       rounded_mantissa__h24191;
  wire [5 : 0] a_0_BIT_12_2_XOR_b_6_BIT_12_3_5_XOR_a_0_BIT_11_ETC___d116,
	       tmp_a_29_BIT_5_62_XOR_tmp_fraction_27_BIT_5_63_ETC___d242,
	       tmp_exp_60_BIT_5_77_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d322;
  wire [4 : 0] tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d374,
	       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d339;
  wire [3 : 0] a_0_BIT_10_0_XOR_b_6_BIT_10_1_3_XOR_a_0_BIT_9__ETC___d115,
	       tmp_a_29_BIT_3_68_XOR_tmp_fraction_27_BIT_3_69_ETC___d241,
	       tmp_exp_60_BIT_3_73_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d321;
  wire [1 : 0] tmp_a_29_BIT_1_74_XOR_tmp_fraction_27_BIT_1_75_ETC___d240;
  wire got_a_AND_got_b_AND_NOT_mul_done_AND_sign_done___d35,
       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d329,
       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d363,
       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d328,
       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d362,
       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d327,
       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d361,
       tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d326,
       tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d360,
       tmp_fraction_27_BIT_14_36_XOR_tmp_fraction_27__ETC___d325,
       tmp_fraction_27_BIT_8_54_XOR_tmp_fraction_27_B_ETC___d365,
       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d330,
       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d364,
       x__h14880,
       x__h15006,
       x__h1519,
       x__h15192,
       x__h15378,
       x__h15564,
       x__h15750,
       x__h15936,
       x__h1646,
       x__h1703,
       x__h1832,
       x__h1889,
       x__h2018,
       x__h2075,
       x__h2204,
       x__h2261,
       x__h2390,
       x__h2447,
       x__h2576,
       x__h2633,
       x__h2806,
       x__h2932,
       x__h3118,
       x__h3304,
       x__h3490,
       x__h3676,
       x__h3862,
       x__h5071,
       x__h5118,
       x__h5263,
       x__h5455,
       x__h5647,
       x__h5839,
       x__h6031,
       x__h6223,
       x__h6415,
       x__h6607,
       x__h6799,
       x__h6991,
       x__h7183,
       x__h7375,
       x__h7508,
       x__h7567,
       y__h11832,
       y__h12018,
       y__h12204,
       y__h12390,
       y__h12576,
       y__h12762,
       y__h15007,
       y__h15193,
       y__h1520,
       y__h15379,
       y__h15565,
       y__h15751,
       y__h15937,
       y__h1647,
       y__h1704,
       y__h18282,
       y__h1833,
       y__h18468,
       y__h18654,
       y__h18840,
       y__h1890,
       y__h19026,
       y__h19212,
       y__h19398,
       y__h2019,
       y__h2076,
       y__h2205,
       y__h2262,
       y__h2391,
       y__h2448,
       y__h2577,
       y__h2634,
       y__h2933,
       y__h3119,
       y__h3305,
       y__h3491,
       y__h3677,
       y__h3863,
       y__h5013,
       y__h5072,
       y__h5119,
       y__h5205,
       y__h5264,
       y__h5311,
       y__h5397,
       y__h5456,
       y__h5503,
       y__h5589,
       y__h5648,
       y__h5695,
       y__h5781,
       y__h5840,
       y__h5887,
       y__h5973,
       y__h6032,
       y__h6079,
       y__h6165,
       y__h6224,
       y__h6271,
       y__h6357,
       y__h6416,
       y__h6463,
       y__h6549,
       y__h6608,
       y__h6655,
       y__h6741,
       y__h6800,
       y__h6847,
       y__h6933,
       y__h6992,
       y__h7039,
       y__h7125,
       y__h7184,
       y__h7231,
       y__h7317,
       y__h7376,
       y__h7423,
       y__h7509,
       y__h7568,
       y__h7615,
       y__h8589,
       y__h8775,
       y__h8961,
       y__h9147,
       y__h9333,
       y__h9519;

  // action method get_inp_a
  assign RDY_get_inp_a = !got_a ;
  assign CAN_FIRE_get_inp_a = !got_a ;
  assign WILL_FIRE_get_inp_a = EN_get_inp_a ;

  // action method get_inp_b
  assign RDY_get_inp_b = !got_b ;
  assign CAN_FIRE_get_inp_b = !got_b ;
  assign WILL_FIRE_get_inp_b = EN_get_inp_b ;

  // value method get_result
  assign get_result = end_result ;
  assign RDY_get_result = pack_done ;

  // rule RL_rl_add_exp
  assign CAN_FIRE_RL_rl_add_exp =
	     got_a_AND_got_b_AND_NOT_mul_done_AND_sign_done___d35 &&
	     !exp_done &&
	     mul_count == 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_add_exp = CAN_FIRE_RL_rl_add_exp ;

  // rule RL_rl_mul_mantissa
  assign CAN_FIRE_RL_rl_mul_mantissa =
	     got_a_AND_got_b_AND_NOT_mul_done_AND_sign_done___d35 &&
	     exp_done &&
	     mul_count != 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_mul_mantissa = CAN_FIRE_RL_rl_mul_mantissa ;

  // rule RL_rl_round_mantissa
  assign CAN_FIRE_RL_rl_round_mantissa =
	     got_a_AND_got_b_AND_NOT_mul_done_AND_sign_done___d35 &&
	     exp_done &&
	     mul_count == 4'd0 &&
	     !mantissa_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_round_mantissa = CAN_FIRE_RL_rl_round_mantissa ;

  // rule RL_rl_pack_res
  assign CAN_FIRE_RL_rl_pack_res = result_concatenated ;
  assign WILL_FIRE_RL_rl_pack_res = result_concatenated ;

  // rule RL_rl_handling_zero
  assign CAN_FIRE_RL_rl_handling_zero = handle_zero ;
  assign WILL_FIRE_RL_rl_handling_zero = handle_zero ;

  // rule RL_rl_get_sign
  assign CAN_FIRE_RL_rl_get_sign = got_a && got_b && !mul_done && !sign_done ;
  assign WILL_FIRE_RL_rl_get_sign = CAN_FIRE_RL_rl_get_sign ;

  // rule RL_rl_get_mul_res
  assign CAN_FIRE_RL_rl_get_mul_res =
	     got_a && got_b && !mul_done && mantissa_done && !handle_zero ;
  assign WILL_FIRE_RL_rl_get_mul_res =
	     CAN_FIRE_RL_rl_get_mul_res && !WILL_FIRE_RL_rl_get_sign ;

  // rule RL_reset_signals
  assign CAN_FIRE_RL_reset_signals = pack_done ;
  assign WILL_FIRE_RL_reset_signals =
	     pack_done && !result_concatenated && !EN_get_inp_a ;

  // inputs to muxes for submodule ports
  assign MUX_handle_zero_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ;
  assign MUX_sign_done_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ;
  assign MUX_mul_count_write_1__VAL_2 = mul_count - 4'd1 ;
  assign MUX_result_mul_write_1__VAL_1 = { tmp_sign, exp_mantissa } ;
  assign MUX_tmp_a_write_1__VAL_1 = { 8'd0, tmp_a_a } ;
  assign MUX_tmp_a_write_1__VAL_2 = { tmp_a[14:0], 1'd0 } ;
  assign MUX_tmp_b_write_1__VAL_1 = { 1'b1, b[6:0] } ;
  assign MUX_tmp_b_write_1__VAL_2 = { 1'd0, tmp_b[7:1] } ;

  // register a
  assign a_D_IN = get_inp_a_inp_A ;
  assign a_EN = EN_get_inp_a ;

  // register b
  assign b_D_IN = get_inp_b_inp_B ;
  assign b_EN = EN_get_inp_b ;

  // register end_result
  assign end_result_D_IN = result_mul ;
  assign end_result_EN = result_concatenated ;

  // register exp_done
  assign exp_done_D_IN = !WILL_FIRE_RL_reset_signals ;
  assign exp_done_EN = WILL_FIRE_RL_reset_signals || WILL_FIRE_RL_rl_add_exp ;

  // register exp_mantissa
  assign exp_mantissa_D_IN =
	     tmp_fraction[15] ?
	       IF_NOT_tmp_fraction_27_BIT_7_57_61_OR_tmp_frac_ETC___d343 :
	       IF_NOT_tmp_fraction_27_BIT_6_60_44_OR_tmp_frac_ETC___d378 ;
  assign exp_mantissa_EN = CAN_FIRE_RL_rl_round_mantissa ;

  // register exp_res
  assign exp_res_D_IN = 8'h0 ;
  assign exp_res_EN = 1'b0 ;

  // register get_r
  assign get_r_D_IN = 1'b0 ;
  assign get_r_EN = 1'b0 ;

  // register got_a
  assign got_a_D_IN = !WILL_FIRE_RL_reset_signals ;
  assign got_a_EN = WILL_FIRE_RL_reset_signals || EN_get_inp_a ;

  // register got_b
  assign got_b_D_IN = !WILL_FIRE_RL_reset_signals ;
  assign got_b_EN = WILL_FIRE_RL_reset_signals || EN_get_inp_b ;

  // register handle_zero
  assign handle_zero_D_IN = MUX_handle_zero_write_1__SEL_1 ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ||
	     handle_zero ;

  // register mantissa_done
  assign mantissa_done_D_IN = !WILL_FIRE_RL_reset_signals ;
  assign mantissa_done_EN =
	     WILL_FIRE_RL_reset_signals || WILL_FIRE_RL_rl_round_mantissa ;

  // register mul_count
  always@(WILL_FIRE_RL_reset_signals or
	  WILL_FIRE_RL_rl_mul_mantissa or
	  MUX_mul_count_write_1__VAL_2 or WILL_FIRE_RL_rl_add_exp)
  case (1'b1)
    WILL_FIRE_RL_reset_signals: mul_count_D_IN = 4'd8;
    WILL_FIRE_RL_rl_mul_mantissa:
	mul_count_D_IN = MUX_mul_count_write_1__VAL_2;
    WILL_FIRE_RL_rl_add_exp: mul_count_D_IN = 4'd8;
    default: mul_count_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign mul_count_EN =
	     WILL_FIRE_RL_rl_mul_mantissa || WILL_FIRE_RL_reset_signals ||
	     WILL_FIRE_RL_rl_add_exp ;

  // register mul_done
  assign mul_done_D_IN = 1'd1 ;
  assign mul_done_EN = WILL_FIRE_RL_rl_get_mul_res ;

  // register mul_start
  assign mul_start_D_IN = 1'd0 ;
  assign mul_start_EN = EN_get_inp_b ;

  // register pack_done
  assign pack_done_D_IN = !EN_get_inp_a ;
  assign pack_done_EN = EN_get_inp_a || result_concatenated ;

  // register result_concatenated
  always@(WILL_FIRE_RL_reset_signals or
	  WILL_FIRE_RL_rl_get_mul_res or handle_zero or EN_get_inp_a)
  case (1'b1)
    WILL_FIRE_RL_reset_signals: result_concatenated_D_IN = 1'd0;
    WILL_FIRE_RL_rl_get_mul_res || handle_zero:
	result_concatenated_D_IN = 1'd1;
    EN_get_inp_a: result_concatenated_D_IN = 1'd0;
    default: result_concatenated_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign result_concatenated_EN =
	     WILL_FIRE_RL_reset_signals || EN_get_inp_a ||
	     WILL_FIRE_RL_rl_get_mul_res ||
	     handle_zero ;

  // register result_mul
  assign result_mul_D_IN =
	     WILL_FIRE_RL_rl_get_mul_res ?
	       MUX_result_mul_write_1__VAL_1 :
	       16'd0 ;
  assign result_mul_EN = WILL_FIRE_RL_rl_get_mul_res || handle_zero ;

  // register sign_done
  assign sign_done_D_IN = !WILL_FIRE_RL_reset_signals ;
  assign sign_done_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_reset_signals ;

  // register tmp_a
  assign tmp_a_D_IN =
	     WILL_FIRE_RL_rl_add_exp ?
	       MUX_tmp_a_write_1__VAL_1 :
	       MUX_tmp_a_write_1__VAL_2 ;
  assign tmp_a_EN = WILL_FIRE_RL_rl_add_exp || WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_a_a
  assign tmp_a_a_D_IN = { 1'b1, a[6:0] } ;
  assign tmp_a_a_EN = MUX_sign_done_write_1__SEL_2 ;

  // register tmp_b
  assign tmp_b_D_IN =
	     MUX_sign_done_write_1__SEL_2 ?
	       MUX_tmp_b_write_1__VAL_1 :
	       MUX_tmp_b_write_1__VAL_2 ;
  assign tmp_b_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_exp
  assign tmp_exp_D_IN =
	     { x__h3862 ^ y__h3863,
	       x__h3676 ^ y__h3677,
	       a_0_BIT_12_2_XOR_b_6_BIT_12_3_5_XOR_a_0_BIT_11_ETC___d116 } ;
  assign tmp_exp_EN = CAN_FIRE_RL_rl_add_exp ;

  // register tmp_fraction
  assign tmp_fraction_D_IN =
	     { x__h7508 ^ y__h7509,
	       y__h7615 ^ y__h7317,
	       tmp_a_29_BIT_13_38_XOR_tmp_fraction_27_BIT_13__ETC___d246 } ;
  assign tmp_fraction_EN = WILL_FIRE_RL_rl_mul_mantissa && tmp_b[0] ;

  // register tmp_sign
  assign tmp_sign_D_IN = a[15] ^ b[15] ;
  assign tmp_sign_EN = MUX_sign_done_write_1__SEL_2 ;

  // remaining internal signals
  assign IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3 =
	     (~IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6 =
	     (~IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2 =
	     (~tmp_exp[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5 =
	     (~tmp_fraction[7]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4 =
	     (~tmp_fraction[8]) ? 16'd1 : 16'd0 ;
  assign IF_NOT_tmp_fraction_27_BIT_6_60_44_OR_tmp_frac_ETC___d378 =
	     (!tmp_fraction[6] ||
	      tmp_fraction[5:0] == 6'd0 && !tmp_fraction[7]) ?
	       { tmp_exp, tmp_fraction[13:7] } :
	       IF_tmp_fraction_27_BIT_15_33_XOR_tmp_fraction__ETC___d377 ;
  assign IF_NOT_tmp_fraction_27_BIT_7_57_61_OR_tmp_frac_ETC___d343 =
	     (!tmp_fraction[7] ||
	      tmp_fraction[6:0] == 7'd0 && !tmp_fraction[8]) ?
	       { exp___1__h7959, tmp_fraction[14:8] } :
	       IF_tmp_fraction_27_BIT_8_54_AND_tmp_fraction_2_ETC___d342 ;
  assign IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (a[7] ^ b[7]) ? 8'd1 : 8'd0 ;
  assign IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7 =
	     (tmp_a[0] ^ tmp_fraction[0]) ? 16'd1 : 16'd0 ;
  assign IF_tmp_fraction_27_BIT_15_33_XOR_tmp_fraction__ETC___d377 =
	     (tmp_fraction[15] ^ y__h19398) ?
	       { exp___1__h7959, rounded_mantissa__h20861 } :
	       { tmp_exp, rounded_mantissa__h24191 } ;
  assign IF_tmp_fraction_27_BIT_8_54_AND_tmp_fraction_2_ETC___d342 =
	     (y__h12762 & tmp_fraction[15]) ?
	       { _theResult___fst__h14409, rounded_mantissa__h14408 } :
	       { exp___1__h7959, rounded_mantissa__h24101 } ;
  assign _theResult___fst__h14409 =
	     { x__h15936 ^ y__h15937,
	       x__h15750 ^ y__h15751,
	       tmp_exp_60_BIT_5_77_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d322 } ;
  assign a_0_BIT_10_0_XOR_b_6_BIT_10_1_3_XOR_a_0_BIT_9__ETC___d115 =
	     { x__h3118 ^ y__h3119,
	       x__h2932 ^ y__h2933,
	       x__h2806 ^ IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6[0] } ;
  assign a_0_BIT_12_2_XOR_b_6_BIT_12_3_5_XOR_a_0_BIT_11_ETC___d116 =
	     { x__h3490 ^ y__h3491,
	       x__h3304 ^ y__h3305,
	       a_0_BIT_10_0_XOR_b_6_BIT_10_1_3_XOR_a_0_BIT_9__ETC___d115 } ;
  assign exp___1__h7959 =
	     { x__h15936,
	       x__h15750,
	       x__h15564,
	       x__h15378,
	       x__h15192,
	       x__h15006,
	       x__h14880,
	       IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign got_a_AND_got_b_AND_NOT_mul_done_AND_sign_done___d35 =
	     got_a && got_b && !mul_done && sign_done ;
  assign rounded_mantissa__h14408 =
	     { tmp_fraction[15] ^ y__h12762,
	       tmp_fraction_27_BIT_14_36_XOR_tmp_fraction_27__ETC___d325,
	       tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d326,
	       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d327,
	       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d328,
	       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d329,
	       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d330 } ;
  assign rounded_mantissa__h20861 =
	     { tmp_fraction[14] ^ y__h19212,
	       tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d360,
	       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d361,
	       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d362,
	       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d363,
	       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d364,
	       tmp_fraction_27_BIT_8_54_XOR_tmp_fraction_27_B_ETC___d365 } ;
  assign rounded_mantissa__h24101 =
	     { tmp_fraction_27_BIT_14_36_XOR_tmp_fraction_27__ETC___d325,
	       tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d326,
	       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d339 } ;
  assign rounded_mantissa__h24191 =
	     { tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d360,
	       tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d361,
	       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d374 } ;
  assign tmp_a_29_BIT_11_44_XOR_tmp_fraction_27_BIT_11__ETC___d245 =
	     { y__h7039 ^ y__h6741,
	       y__h6847 ^ y__h6549,
	       tmp_a_29_BIT_9_50_XOR_tmp_fraction_27_BIT_9_51_ETC___d244 } ;
  assign tmp_a_29_BIT_13_38_XOR_tmp_fraction_27_BIT_13__ETC___d246 =
	     { y__h7423 ^ y__h7125,
	       y__h7231 ^ y__h6933,
	       tmp_a_29_BIT_11_44_XOR_tmp_fraction_27_BIT_11__ETC___d245 } ;
  assign tmp_a_29_BIT_1_74_XOR_tmp_fraction_27_BIT_1_75_ETC___d240 =
	     { y__h5119 ^ x__h5118,
	       IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7[0] } ;
  assign tmp_a_29_BIT_3_68_XOR_tmp_fraction_27_BIT_3_69_ETC___d241 =
	     { y__h5503 ^ y__h5205,
	       y__h5311 ^ y__h5013,
	       tmp_a_29_BIT_1_74_XOR_tmp_fraction_27_BIT_1_75_ETC___d240 } ;
  assign tmp_a_29_BIT_5_62_XOR_tmp_fraction_27_BIT_5_63_ETC___d242 =
	     { y__h5887 ^ y__h5589,
	       y__h5695 ^ y__h5397,
	       tmp_a_29_BIT_3_68_XOR_tmp_fraction_27_BIT_3_69_ETC___d241 } ;
  assign tmp_a_29_BIT_7_56_XOR_tmp_fraction_27_BIT_7_57_ETC___d243 =
	     { y__h6271 ^ y__h5973,
	       y__h6079 ^ y__h5781,
	       tmp_a_29_BIT_5_62_XOR_tmp_fraction_27_BIT_5_63_ETC___d242 } ;
  assign tmp_a_29_BIT_9_50_XOR_tmp_fraction_27_BIT_9_51_ETC___d244 =
	     { y__h6655 ^ y__h6357,
	       y__h6463 ^ y__h6165,
	       tmp_a_29_BIT_7_56_XOR_tmp_fraction_27_BIT_7_57_ETC___d243 } ;
  assign tmp_exp_60_BIT_3_73_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d321 =
	     { x__h15192 ^ y__h15193,
	       x__h15006 ^ y__h15007,
	       x__h14880 ^ IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3[0] } ;
  assign tmp_exp_60_BIT_5_77_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d322 =
	     { x__h15564 ^ y__h15565,
	       x__h15378 ^ y__h15379,
	       tmp_exp_60_BIT_3_73_XOR_tmp_exp_60_BIT_0_68_AN_ETC___d321 } ;
  assign tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d329 =
	     tmp_fraction[10] ^ y__h11832 ;
  assign tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d363 =
	     tmp_fraction[10] ^ y__h18468 ;
  assign tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d328 =
	     tmp_fraction[11] ^ y__h12018 ;
  assign tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d362 =
	     tmp_fraction[11] ^ y__h18654 ;
  assign tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d374 =
	     { tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d362,
	       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d363,
	       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d364,
	       tmp_fraction_27_BIT_8_54_XOR_tmp_fraction_27_B_ETC___d365,
	       IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5[0] } ;
  assign tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d327 =
	     tmp_fraction[12] ^ y__h12204 ;
  assign tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d339 =
	     { tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d327,
	       tmp_fraction_27_BIT_11_45_XOR_tmp_fraction_27__ETC___d328,
	       tmp_fraction_27_BIT_10_48_XOR_tmp_fraction_27__ETC___d329,
	       tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d330,
	       IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4[0] } ;
  assign tmp_fraction_27_BIT_12_42_XOR_tmp_fraction_27__ETC___d361 =
	     tmp_fraction[12] ^ y__h18840 ;
  assign tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d326 =
	     tmp_fraction[13] ^ y__h12390 ;
  assign tmp_fraction_27_BIT_13_39_XOR_tmp_fraction_27__ETC___d360 =
	     tmp_fraction[13] ^ y__h19026 ;
  assign tmp_fraction_27_BIT_14_36_XOR_tmp_fraction_27__ETC___d325 =
	     tmp_fraction[14] ^ y__h12576 ;
  assign tmp_fraction_27_BIT_8_54_XOR_tmp_fraction_27_B_ETC___d365 =
	     tmp_fraction[8] ^ tmp_fraction[7] ;
  assign tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d330 =
	     tmp_fraction[9] ^ tmp_fraction[8] ;
  assign tmp_fraction_27_BIT_9_51_XOR_tmp_fraction_27_B_ETC___d364 =
	     tmp_fraction[9] ^ y__h18282 ;
  assign x__h14880 = tmp_exp[1] ^ tmp_exp[0] ;
  assign x__h15006 = tmp_exp[2] ^ y__h8589 ;
  assign x__h1519 = a[8] ^ b[8] ;
  assign x__h15192 = tmp_exp[3] ^ y__h8775 ;
  assign x__h15378 = tmp_exp[4] ^ y__h8961 ;
  assign x__h15564 = tmp_exp[5] ^ y__h9147 ;
  assign x__h15750 = tmp_exp[6] ^ y__h9333 ;
  assign x__h15936 = tmp_exp[7] ^ y__h9519 ;
  assign x__h1646 = a[9] ^ b[9] ;
  assign x__h1703 = a[8] & b[8] ;
  assign x__h1832 = a[10] ^ b[10] ;
  assign x__h1889 = a[9] & b[9] ;
  assign x__h2018 = a[11] ^ b[11] ;
  assign x__h2075 = a[10] & b[10] ;
  assign x__h2204 = a[12] ^ b[12] ;
  assign x__h2261 = a[11] & b[11] ;
  assign x__h2390 = a[13] ^ b[13] ;
  assign x__h2447 = a[12] & b[12] ;
  assign x__h2576 = a[14] ^ b[14] ;
  assign x__h2633 = a[13] & b[13] ;
  assign x__h2806 = x__h1519 ^ y__h1520 ;
  assign x__h2932 = x__h1646 ^ y__h1647 ;
  assign x__h3118 = x__h1832 ^ y__h1833 ;
  assign x__h3304 = x__h2018 ^ y__h2019 ;
  assign x__h3490 = x__h2204 ^ y__h2205 ;
  assign x__h3676 = x__h2390 ^ y__h2391 ;
  assign x__h3862 = ~(x__h2576 ^ y__h2577) ;
  assign x__h5071 = tmp_a[1] & tmp_fraction[1] ;
  assign x__h5118 = tmp_a[0] & tmp_fraction[0] ;
  assign x__h5263 = tmp_a[2] & tmp_fraction[2] ;
  assign x__h5455 = tmp_a[3] & tmp_fraction[3] ;
  assign x__h5647 = tmp_a[4] & tmp_fraction[4] ;
  assign x__h5839 = tmp_a[5] & tmp_fraction[5] ;
  assign x__h6031 = tmp_a[6] & tmp_fraction[6] ;
  assign x__h6223 = tmp_a[7] & tmp_fraction[7] ;
  assign x__h6415 = tmp_a[8] & tmp_fraction[8] ;
  assign x__h6607 = tmp_a[9] & tmp_fraction[9] ;
  assign x__h6799 = tmp_a[10] & tmp_fraction[10] ;
  assign x__h6991 = tmp_a[11] & tmp_fraction[11] ;
  assign x__h7183 = tmp_a[12] & tmp_fraction[12] ;
  assign x__h7375 = tmp_a[13] & tmp_fraction[13] ;
  assign x__h7508 = tmp_a[15] ^ tmp_fraction[15] ;
  assign x__h7567 = tmp_a[14] & tmp_fraction[14] ;
  assign y__h11832 = tmp_fraction[8] & tmp_fraction[9] ;
  assign y__h12018 = y__h11832 & tmp_fraction[10] ;
  assign y__h12204 = y__h12018 & tmp_fraction[11] ;
  assign y__h12390 = y__h12204 & tmp_fraction[12] ;
  assign y__h12576 = y__h12390 & tmp_fraction[13] ;
  assign y__h12762 = y__h12576 & tmp_fraction[14] ;
  assign y__h15007 = IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] & x__h14880 ;
  assign y__h15193 = y__h15007 & x__h15006 ;
  assign y__h1520 = a[7] & b[7] ;
  assign y__h15379 = y__h15193 & x__h15192 ;
  assign y__h15565 = y__h15379 & x__h15378 ;
  assign y__h15751 = y__h15565 & x__h15564 ;
  assign y__h15937 = y__h15751 & x__h15750 ;
  assign y__h1647 = x__h1703 | y__h1704 ;
  assign y__h1704 = x__h1519 & y__h1520 ;
  assign y__h18282 = tmp_fraction[7] & tmp_fraction[8] ;
  assign y__h1833 = x__h1889 | y__h1890 ;
  assign y__h18468 = y__h18282 & tmp_fraction[9] ;
  assign y__h18654 = y__h18468 & tmp_fraction[10] ;
  assign y__h18840 = y__h18654 & tmp_fraction[11] ;
  assign y__h1890 = x__h1646 & y__h1647 ;
  assign y__h19026 = y__h18840 & tmp_fraction[12] ;
  assign y__h19212 = y__h19026 & tmp_fraction[13] ;
  assign y__h19398 = y__h19212 & tmp_fraction[14] ;
  assign y__h2019 = x__h2075 | y__h2076 ;
  assign y__h2076 = x__h1832 & y__h1833 ;
  assign y__h2205 = x__h2261 | y__h2262 ;
  assign y__h2262 = x__h2018 & y__h2019 ;
  assign y__h2391 = x__h2447 | y__h2448 ;
  assign y__h2448 = x__h2204 & y__h2205 ;
  assign y__h2577 = x__h2633 | y__h2634 ;
  assign y__h2634 = x__h2390 & y__h2391 ;
  assign y__h2933 = x__h2806 & IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h3119 = x__h2932 & y__h2933 ;
  assign y__h3305 = x__h3118 & y__h3119 ;
  assign y__h3491 = x__h3304 & y__h3305 ;
  assign y__h3677 = x__h3490 & y__h3491 ;
  assign y__h3863 = x__h3676 & y__h3677 ;
  assign y__h5013 = x__h5071 | y__h5072 ;
  assign y__h5072 = x__h5118 & y__h5119 ;
  assign y__h5119 = tmp_a[1] ^ tmp_fraction[1] ;
  assign y__h5205 = x__h5263 | y__h5264 ;
  assign y__h5264 = y__h5013 & y__h5311 ;
  assign y__h5311 = tmp_a[2] ^ tmp_fraction[2] ;
  assign y__h5397 = x__h5455 | y__h5456 ;
  assign y__h5456 = y__h5205 & y__h5503 ;
  assign y__h5503 = tmp_a[3] ^ tmp_fraction[3] ;
  assign y__h5589 = x__h5647 | y__h5648 ;
  assign y__h5648 = y__h5397 & y__h5695 ;
  assign y__h5695 = tmp_a[4] ^ tmp_fraction[4] ;
  assign y__h5781 = x__h5839 | y__h5840 ;
  assign y__h5840 = y__h5589 & y__h5887 ;
  assign y__h5887 = tmp_a[5] ^ tmp_fraction[5] ;
  assign y__h5973 = x__h6031 | y__h6032 ;
  assign y__h6032 = y__h5781 & y__h6079 ;
  assign y__h6079 = tmp_a[6] ^ tmp_fraction[6] ;
  assign y__h6165 = x__h6223 | y__h6224 ;
  assign y__h6224 = y__h5973 & y__h6271 ;
  assign y__h6271 = tmp_a[7] ^ tmp_fraction[7] ;
  assign y__h6357 = x__h6415 | y__h6416 ;
  assign y__h6416 = y__h6165 & y__h6463 ;
  assign y__h6463 = tmp_a[8] ^ tmp_fraction[8] ;
  assign y__h6549 = x__h6607 | y__h6608 ;
  assign y__h6608 = y__h6357 & y__h6655 ;
  assign y__h6655 = tmp_a[9] ^ tmp_fraction[9] ;
  assign y__h6741 = x__h6799 | y__h6800 ;
  assign y__h6800 = y__h6549 & y__h6847 ;
  assign y__h6847 = tmp_a[10] ^ tmp_fraction[10] ;
  assign y__h6933 = x__h6991 | y__h6992 ;
  assign y__h6992 = y__h6741 & y__h7039 ;
  assign y__h7039 = tmp_a[11] ^ tmp_fraction[11] ;
  assign y__h7125 = x__h7183 | y__h7184 ;
  assign y__h7184 = y__h6933 & y__h7231 ;
  assign y__h7231 = tmp_a[12] ^ tmp_fraction[12] ;
  assign y__h7317 = x__h7375 | y__h7376 ;
  assign y__h7376 = y__h7125 & y__h7423 ;
  assign y__h7423 = tmp_a[13] ^ tmp_fraction[13] ;
  assign y__h7509 = x__h7567 | y__h7568 ;
  assign y__h7568 = y__h7317 & y__h7615 ;
  assign y__h7615 = tmp_a[14] ^ tmp_fraction[14] ;
  assign y__h8589 = tmp_exp[0] & tmp_exp[1] ;
  assign y__h8775 = y__h8589 & tmp_exp[2] ;
  assign y__h8961 = y__h8775 & tmp_exp[3] ;
  assign y__h9147 = y__h8961 & tmp_exp[4] ;
  assign y__h9333 = y__h9147 & tmp_exp[5] ;
  assign y__h9519 = y__h9333 & tmp_exp[6] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	end_result <= `BSV_ASSIGNMENT_DELAY 16'd0;
	exp_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	exp_mantissa <= `BSV_ASSIGNMENT_DELAY 15'd0;
	exp_res <= `BSV_ASSIGNMENT_DELAY 8'd0;
	get_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mantissa_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pack_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	result_concatenated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	result_mul <= `BSV_ASSIGNMENT_DELAY 16'd0;
	sign_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tmp_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_a_a <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_b <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_exp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_fraction <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (end_result_EN)
	  end_result <= `BSV_ASSIGNMENT_DELAY end_result_D_IN;
	if (exp_done_EN) exp_done <= `BSV_ASSIGNMENT_DELAY exp_done_D_IN;
	if (exp_mantissa_EN)
	  exp_mantissa <= `BSV_ASSIGNMENT_DELAY exp_mantissa_D_IN;
	if (exp_res_EN) exp_res <= `BSV_ASSIGNMENT_DELAY exp_res_D_IN;
	if (get_r_EN) get_r <= `BSV_ASSIGNMENT_DELAY get_r_D_IN;
	if (got_a_EN) got_a <= `BSV_ASSIGNMENT_DELAY got_a_D_IN;
	if (got_b_EN) got_b <= `BSV_ASSIGNMENT_DELAY got_b_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (mantissa_done_EN)
	  mantissa_done <= `BSV_ASSIGNMENT_DELAY mantissa_done_D_IN;
	if (mul_count_EN) mul_count <= `BSV_ASSIGNMENT_DELAY mul_count_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_start_EN) mul_start <= `BSV_ASSIGNMENT_DELAY mul_start_D_IN;
	if (pack_done_EN) pack_done <= `BSV_ASSIGNMENT_DELAY pack_done_D_IN;
	if (result_concatenated_EN)
	  result_concatenated <= `BSV_ASSIGNMENT_DELAY
	      result_concatenated_D_IN;
	if (result_mul_EN)
	  result_mul <= `BSV_ASSIGNMENT_DELAY result_mul_D_IN;
	if (sign_done_EN) sign_done <= `BSV_ASSIGNMENT_DELAY sign_done_D_IN;
	if (tmp_a_EN) tmp_a <= `BSV_ASSIGNMENT_DELAY tmp_a_D_IN;
	if (tmp_a_a_EN) tmp_a_a <= `BSV_ASSIGNMENT_DELAY tmp_a_a_D_IN;
	if (tmp_b_EN) tmp_b <= `BSV_ASSIGNMENT_DELAY tmp_b_D_IN;
	if (tmp_exp_EN) tmp_exp <= `BSV_ASSIGNMENT_DELAY tmp_exp_D_IN;
	if (tmp_fraction_EN)
	  tmp_fraction <= `BSV_ASSIGNMENT_DELAY tmp_fraction_D_IN;
	if (tmp_sign_EN) tmp_sign <= `BSV_ASSIGNMENT_DELAY tmp_sign_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 16'hAAAA;
    b = 16'hAAAA;
    end_result = 16'hAAAA;
    exp_done = 1'h0;
    exp_mantissa = 15'h2AAA;
    exp_res = 8'hAA;
    get_r = 1'h0;
    got_a = 1'h0;
    got_b = 1'h0;
    handle_zero = 1'h0;
    mantissa_done = 1'h0;
    mul_count = 4'hA;
    mul_done = 1'h0;
    mul_start = 1'h0;
    pack_done = 1'h0;
    result_concatenated = 1'h0;
    result_mul = 16'hAAAA;
    sign_done = 1'h0;
    tmp_a = 16'hAAAA;
    tmp_a_a = 8'hAA;
    tmp_b = 8'hAA;
    tmp_exp = 8'hAA;
    tmp_fraction = 16'hAAAA;
    tmp_sign = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h4050 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h4050, "  a.exp: %b   b.exp: %b", a[14:7], b[14:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h4099 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h4099,
		 "  a.mantissa: %b   b.mantissa: %b ",
		 a[6:0],
		 b[6:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h4241 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h4241, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h4289 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h4289, " tmp_a         %b ", tmp_a);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display("********************************");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h7812 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h7812, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h7859 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h7859, " tmp_exp       %b ", tmp_exp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	begin
	  v__h24316 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	$display(v__h24316,
		 " MUL: sign %b exp: %b mantissa %b",
		 tmp_sign,
		 exp_mantissa[14:7],
		 exp_mantissa[6:0]);
  end
  // synopsys translate_on
endmodule  // mkUnpipelined_float_mul

