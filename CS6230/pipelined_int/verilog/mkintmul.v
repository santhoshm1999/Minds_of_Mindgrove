//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 18:54:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_select                 O     1 const
// get_output                     O    32
// RDY_get_output                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32
// get_select_select              I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_select                  I     1
// EN_get_output                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintmul(CLK,
		RST_N,

		get_A_a,
		EN_get_A,
		RDY_get_A,

		get_B_b,
		EN_get_B,
		RDY_get_B,

		get_C_c,
		EN_get_C,
		RDY_get_C,

		get_select_select,
		EN_get_select,
		RDY_get_select,

		EN_get_output,
		get_output,
		RDY_get_output);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_select
  input  get_select_select;
  input  EN_get_select;
  output RDY_get_select;

  // actionvalue method get_output
  input  EN_get_output;
  output [31 : 0] get_output;
  output RDY_get_output;

  // signals for module outputs
  wire [31 : 0] get_output;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_output, RDY_get_select;

  // inlined wires
  wire [32 : 0] val_c_rv_port0__write_1,
		val_c_rv_port1__read,
		val_c_rv_port1__write_1,
		val_c_rv_port2__read,
		val_mac_rv_port1__read,
		val_mac_rv_port1__write_1,
		val_mac_rv_port2__read,
		val_mul_rv_port1__read,
		val_mul_rv_port1__write_1,
		val_mul_rv_port2__read;
  wire [16 : 0] val_a_rv_port0__write_1,
		val_a_rv_port1__read,
		val_a_rv_port1__write_1,
		val_a_rv_port2__read,
		val_b_rv_port1__read,
		val_b_rv_port1__write_1,
		val_b_rv_port2__read;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_out
  reg [31 : 0] add_out;
  wire [31 : 0] add_out_D_IN;
  wire add_out_EN;

  // register counter
  reg [4 : 0] counter;
  wire [4 : 0] counter_D_IN;
  wire counter_EN;

  // register finish
  reg finish;
  wire finish_D_IN, finish_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_result
  reg got_result;
  wire got_result_D_IN, got_result_EN;

  // register got_select
  reg got_select;
  wire got_select_D_IN, got_select_EN;

  // register inpA
  reg [15 : 0] inpA;
  wire [15 : 0] inpA_D_IN;
  wire inpA_EN;

  // register inpB
  reg [15 : 0] inpB;
  wire [15 : 0] inpB_D_IN;
  wire inpB_EN;

  // register inpC
  reg [31 : 0] inpC;
  wire [31 : 0] inpC_D_IN;
  wire inpC_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_out
  reg [31 : 0] mul_out;
  wire [31 : 0] mul_out_D_IN;
  wire mul_out_EN;

  // register prepmul
  reg prepmul;
  wire prepmul_D_IN, prepmul_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // register start_done
  reg start_done;
  wire start_done_D_IN, start_done_EN;

  // register temp
  reg [15 : 0] temp;
  wire [15 : 0] temp_D_IN;
  wire temp_EN;

  // register val_a_rv
  reg [16 : 0] val_a_rv;
  wire [16 : 0] val_a_rv_D_IN;
  wire val_a_rv_EN;

  // register val_b_rv
  reg [16 : 0] val_b_rv;
  wire [16 : 0] val_b_rv_D_IN;
  wire val_b_rv_EN;

  // register val_c_rv
  reg [32 : 0] val_c_rv;
  wire [32 : 0] val_c_rv_D_IN;
  wire val_c_rv_EN;

  // register val_mac_rv
  reg [32 : 0] val_mac_rv;
  wire [32 : 0] val_mac_rv_D_IN;
  wire val_mac_rv_EN;

  // register val_mul_rv
  reg [32 : 0] val_mul_rv;
  wire [32 : 0] val_mul_rv_D_IN;
  wire val_mul_rv_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_finished,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_done,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_rl_start_MAC,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_output,
       CAN_FIRE_get_select,
       WILL_FIRE_RL_finished,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_done,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_rl_start_MAC,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_output,
       WILL_FIRE_get_select;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_mul_out_write_1__VAL_1;
  wire [15 : 0] MUX_inpA_write_1__VAL_2,
		MUX_inpB_write_1__VAL_2,
		MUX_temp_write_1__VAL_1;
  wire [4 : 0] MUX_counter_write_1__VAL_2;
  wire MUX_temp_write_1__SEL_1;

  // remaining internal signals
  wire [29 : 0] mul_out_03_BIT_29_21_XOR_inpC_14_BIT_29_22_24__ETC___d546;
  wire [27 : 0] mul_out_03_BIT_27_29_XOR_inpC_14_BIT_27_30_32__ETC___d545;
  wire [25 : 0] mul_out_03_BIT_25_37_XOR_inpC_14_BIT_25_38_40__ETC___d544;
  wire [23 : 0] mul_out_03_BIT_23_45_XOR_inpC_14_BIT_23_46_48__ETC___d543;
  wire [21 : 0] mul_out_03_BIT_21_53_XOR_inpC_14_BIT_21_54_56__ETC___d542;
  wire [19 : 0] mul_out_03_BIT_19_61_XOR_inpC_14_BIT_19_62_64__ETC___d541;
  wire [17 : 0] mul_out_03_BIT_17_69_XOR_inpC_14_BIT_17_70_72__ETC___d540;
  wire [15 : 0] INV_inpA__q1,
		mul_out_03_BIT_15_77_XOR_inpC_14_BIT_15_78_80__ETC___d539,
		temp_7_BIT_15_8_XOR_INV_inpA_9_0_BIT_15_1_XOR__ETC___d183,
		temp_7_BIT_15_8_XOR_inpA_9_BIT_15_84_85_XOR_te_ETC___d281;
  wire [13 : 0] mul_out_03_BIT_13_85_XOR_inpC_14_BIT_13_86_88__ETC___d538,
		temp_7_BIT_13_7_XOR_INV_inpA_9_0_BIT_13_3_XOR__ETC___d182,
		temp_7_BIT_13_7_XOR_inpA_9_BIT_13_89_91_XOR_te_ETC___d280;
  wire [11 : 0] mul_out_03_BIT_11_93_XOR_inpC_14_BIT_11_94_96__ETC___d537,
		temp_7_BIT_11_5_XOR_INV_inpA_9_0_BIT_11_5_XOR__ETC___d181,
		temp_7_BIT_11_5_XOR_inpA_9_BIT_11_95_97_XOR_te_ETC___d279;
  wire [9 : 0] mul_out_03_BIT_9_01_XOR_inpC_14_BIT_9_02_04_XO_ETC___d536,
	       temp_7_BIT_9_3_XOR_INV_inpA_9_0_BIT_9_7_XOR_IN_ETC___d180,
	       temp_7_BIT_9_3_XOR_inpA_9_BIT_9_01_03_XOR_temp_ETC___d278;
  wire [7 : 0] mul_out_03_BIT_7_09_XOR_inpC_14_BIT_7_10_12_XO_ETC___d535,
	       temp_7_BIT_7_01_XOR_INV_inpA_9_0_BIT_7_9_XOR_I_ETC___d179,
	       temp_7_BIT_7_01_XOR_inpA_9_BIT_7_07_09_XOR_tem_ETC___d277;
  wire [5 : 0] mul_out_03_BIT_5_17_XOR_inpC_14_BIT_5_18_20_XO_ETC___d534,
	       temp_7_BIT_5_09_XOR_INV_inpA_9_0_BIT_5_1_XOR_I_ETC___d178,
	       temp_7_BIT_5_09_XOR_inpA_9_BIT_5_13_15_XOR_tem_ETC___d276;
  wire [3 : 0] mul_out_03_BIT_3_25_XOR_inpC_14_BIT_3_26_28_XO_ETC___d533,
	       temp_7_BIT_3_17_XOR_INV_inpA_9_0_BIT_3_3_XOR_I_ETC___d177,
	       temp_7_BIT_3_17_XOR_inpA_9_BIT_3_19_21_XOR_tem_ETC___d275;
  wire x__h10053,
       x__h10110,
       x__h10167,
       x__h10224,
       x__h10281,
       x__h10338,
       x__h10395,
       x__h10452,
       x__h10509,
       x__h10566,
       x__h10623,
       x__h10680,
       x__h12199,
       x__h12259,
       x__h12364,
       x__h12469,
       x__h12574,
       x__h12679,
       x__h12784,
       x__h12889,
       x__h12994,
       x__h13099,
       x__h13204,
       x__h13309,
       x__h13414,
       x__h13519,
       x__h13624,
       x__h13729,
       x__h13834,
       x__h13939,
       x__h14044,
       x__h14149,
       x__h14254,
       x__h14359,
       x__h14464,
       x__h14569,
       x__h14674,
       x__h14779,
       x__h14884,
       x__h14989,
       x__h15094,
       x__h15199,
       x__h15304,
       x__h15449,
       x__h15506,
       x__h15563,
       x__h15620,
       x__h15677,
       x__h15734,
       x__h15791,
       x__h15848,
       x__h15905,
       x__h15962,
       x__h16019,
       x__h16076,
       x__h16133,
       x__h16190,
       x__h16247,
       x__h16304,
       x__h16361,
       x__h16418,
       x__h16475,
       x__h16532,
       x__h16589,
       x__h16646,
       x__h16703,
       x__h16760,
       x__h16817,
       x__h16874,
       x__h16931,
       x__h16988,
       x__h17045,
       x__h17102,
       x__h2740,
       x__h5602,
       x__h5648,
       x__h5705,
       x__h5751,
       x__h5808,
       x__h5854,
       x__h5911,
       x__h5957,
       x__h6014,
       x__h6060,
       x__h6117,
       x__h6163,
       x__h6220,
       x__h6266,
       x__h6323,
       x__h6369,
       x__h6426,
       x__h6472,
       x__h6529,
       x__h6575,
       x__h6632,
       x__h6678,
       x__h6735,
       x__h6781,
       x__h6838,
       x__h6884,
       x__h6941,
       x__h6987,
       x__h8370,
       x__h8429,
       x__h8534,
       x__h8639,
       x__h8744,
       x__h8849,
       x__h8954,
       x__h9059,
       x__h9164,
       x__h9269,
       x__h9374,
       x__h9479,
       x__h9584,
       x__h9689,
       x__h9794,
       x__h9939,
       x__h9996,
       y__h10054,
       y__h10111,
       y__h10168,
       y__h10225,
       y__h10282,
       y__h10339,
       y__h10396,
       y__h10453,
       y__h10510,
       y__h10567,
       y__h10624,
       y__h10681,
       y__h12200,
       y__h12260,
       y__h12365,
       y__h12470,
       y__h12575,
       y__h12680,
       y__h12785,
       y__h12890,
       y__h12995,
       y__h13100,
       y__h13205,
       y__h13310,
       y__h13415,
       y__h13520,
       y__h13625,
       y__h13730,
       y__h13835,
       y__h13940,
       y__h14045,
       y__h14150,
       y__h14255,
       y__h14360,
       y__h14465,
       y__h14570,
       y__h14675,
       y__h14780,
       y__h14885,
       y__h14990,
       y__h15095,
       y__h15200,
       y__h15305,
       y__h15450,
       y__h15507,
       y__h15564,
       y__h15621,
       y__h15678,
       y__h15735,
       y__h15792,
       y__h15849,
       y__h15906,
       y__h15963,
       y__h16020,
       y__h16077,
       y__h16134,
       y__h16191,
       y__h16248,
       y__h16305,
       y__h16362,
       y__h16419,
       y__h16476,
       y__h16533,
       y__h16590,
       y__h16647,
       y__h16704,
       y__h16761,
       y__h16818,
       y__h16875,
       y__h16932,
       y__h16989,
       y__h17046,
       y__h17103,
       y__h2741,
       y__h2743,
       y__h3220,
       y__h3326,
       y__h3429,
       y__h3532,
       y__h3635,
       y__h3738,
       y__h3841,
       y__h3944,
       y__h4047,
       y__h4150,
       y__h4253,
       y__h4356,
       y__h4459,
       y__h4562,
       y__h5603,
       y__h5605,
       y__h5649,
       y__h5706,
       y__h5708,
       y__h5752,
       y__h5809,
       y__h5811,
       y__h5855,
       y__h5912,
       y__h5914,
       y__h5958,
       y__h6015,
       y__h6017,
       y__h6061,
       y__h6118,
       y__h6120,
       y__h6164,
       y__h6221,
       y__h6223,
       y__h6267,
       y__h6324,
       y__h6326,
       y__h6370,
       y__h6427,
       y__h6429,
       y__h6473,
       y__h6530,
       y__h6532,
       y__h6576,
       y__h6633,
       y__h6635,
       y__h6679,
       y__h6736,
       y__h6738,
       y__h6782,
       y__h6839,
       y__h6841,
       y__h6885,
       y__h6942,
       y__h6944,
       y__h6988,
       y__h8371,
       y__h8430,
       y__h8535,
       y__h8640,
       y__h8745,
       y__h8850,
       y__h8955,
       y__h9060,
       y__h9165,
       y__h9270,
       y__h9375,
       y__h9480,
       y__h9585,
       y__h9690,
       y__h9795,
       y__h9940,
       y__h9997;

  // action method get_A
  assign RDY_get_A = !val_a_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !val_a_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !val_b_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !val_b_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !val_c_rv_port1__read[32] ;
  assign CAN_FIRE_get_C = !val_c_rv_port1__read[32] ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_select
  assign RDY_get_select = 1'd1 ;
  assign CAN_FIRE_get_select = 1'd1 ;
  assign WILL_FIRE_get_select = EN_get_select ;

  // actionvalue method get_output
  assign get_output = val_mac_rv[31:0] ;
  assign RDY_get_output = val_mac_rv[32] && got_result ;
  assign CAN_FIRE_get_output = val_mac_rv[32] && got_result ;
  assign WILL_FIRE_get_output = EN_get_output ;

  // rule RL_rl_start_MAC
  assign CAN_FIRE_RL_rl_start_MAC =
	     val_a_rv[16] && val_b_rv[16] && val_c_rv[32] && !start_done ;
  assign WILL_FIRE_RL_rl_start_MAC = CAN_FIRE_RL_rl_start_MAC ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     start_done && got_A && got_B && got_C && got_select &&
	     counter != 5'd0 &&
	     finish ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add =
	     val_mul_rv[32] && start_done && mul_done && !add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_add = CAN_FIRE_RL_rl_add ;

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul =
	     !val_mul_rv_port1__read[32] && start_done && !mul_done &&
	     counter == 5'd0 &&
	     !add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_rl_done
  assign CAN_FIRE_RL_rl_done =
	     !val_mac_rv_port1__read[32] && start_done && add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_done = CAN_FIRE_RL_rl_done ;

  // rule RL_finished
  assign CAN_FIRE_RL_finished = start_done && got_result ;
  assign WILL_FIRE_RL_finished = CAN_FIRE_RL_finished ;

  // inputs to muxes for submodule ports
  assign MUX_temp_write_1__SEL_1 = WILL_FIRE_RL_rl_multiply && inpB[0] ;
  assign MUX_counter_write_1__VAL_2 = counter - 5'd1 ;
  assign MUX_inpA_write_1__VAL_2 = { inpA[14:0], 1'd0 } ;
  assign MUX_inpB_write_1__VAL_2 = { 1'd0, inpB[15:1] } ;
  assign MUX_mul_out_write_1__VAL_1 = { {16{temp[15]}}, temp } ;
  assign MUX_temp_write_1__VAL_1 =
	     (counter == 5'd1) ?
	       temp_7_BIT_15_8_XOR_INV_inpA_9_0_BIT_15_1_XOR__ETC___d183 :
	       temp_7_BIT_15_8_XOR_inpA_9_BIT_15_84_85_XOR_te_ETC___d281 ;

  // inlined wires
  assign val_a_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign val_a_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_a_rv_port0__write_1 : val_a_rv ;
  assign val_a_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign val_a_rv_port2__read =
	     EN_get_A ? val_a_rv_port1__write_1 : val_a_rv_port1__read ;
  assign val_b_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_a_rv_port0__write_1 : val_b_rv ;
  assign val_b_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign val_b_rv_port2__read =
	     EN_get_B ? val_b_rv_port1__write_1 : val_b_rv_port1__read ;
  assign val_c_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign val_c_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_c_rv_port0__write_1 : val_c_rv ;
  assign val_c_rv_port1__write_1 = { 1'd1, get_C_c } ;
  assign val_c_rv_port2__read =
	     EN_get_C ? val_c_rv_port1__write_1 : val_c_rv_port1__read ;
  assign val_mul_rv_port1__read =
	     CAN_FIRE_RL_rl_add ? val_c_rv_port0__write_1 : val_mul_rv ;
  assign val_mul_rv_port1__write_1 = { 1'd1, mul_out } ;
  assign val_mul_rv_port2__read =
	     CAN_FIRE_RL_rl_mul ?
	       val_mul_rv_port1__write_1 :
	       val_mul_rv_port1__read ;
  assign val_mac_rv_port1__read =
	     EN_get_output ? val_c_rv_port0__write_1 : val_mac_rv ;
  assign val_mac_rv_port1__write_1 = { 1'd1, add_out } ;
  assign val_mac_rv_port2__read =
	     CAN_FIRE_RL_rl_done ?
	       val_mac_rv_port1__write_1 :
	       val_mac_rv_port1__read ;

  // register add_done
  assign add_done_D_IN = !WILL_FIRE_RL_rl_done ;
  assign add_done_EN = WILL_FIRE_RL_rl_done || WILL_FIRE_RL_rl_add ;

  // register add_out
  assign add_out_D_IN =
	     { x__h12199 ^ y__h12200,
	       x__h15449 ^ y__h15450,
	       mul_out_03_BIT_29_21_XOR_inpC_14_BIT_29_22_24__ETC___d546 } ;
  assign add_out_EN = CAN_FIRE_RL_rl_add ;

  // register counter
  assign counter_D_IN =
	     WILL_FIRE_RL_rl_done ? 5'd9 : MUX_counter_write_1__VAL_2 ;
  assign counter_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_rl_done ;

  // register finish
  assign finish_D_IN = !WILL_FIRE_RL_rl_mul ;
  assign finish_EN = WILL_FIRE_RL_rl_mul || WILL_FIRE_RL_finished ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_finished ;
  assign got_A_EN = WILL_FIRE_RL_finished || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_finished ;
  assign got_B_EN = WILL_FIRE_RL_finished || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !WILL_FIRE_RL_finished ;
  assign got_C_EN = WILL_FIRE_RL_finished || EN_get_C ;

  // register got_result
  assign got_result_D_IN = !WILL_FIRE_RL_finished ;
  assign got_result_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_done ;

  // register got_select
  assign got_select_D_IN = !WILL_FIRE_RL_finished ;
  assign got_select_EN = WILL_FIRE_RL_finished || EN_get_select ;

  // register inpA
  assign inpA_D_IN =
	     WILL_FIRE_RL_rl_start_MAC ?
	       val_a_rv[15:0] :
	       MUX_inpA_write_1__VAL_2 ;
  assign inpA_EN = WILL_FIRE_RL_rl_start_MAC || WILL_FIRE_RL_rl_multiply ;

  // register inpB
  assign inpB_D_IN =
	     WILL_FIRE_RL_rl_start_MAC ?
	       val_b_rv[15:0] :
	       MUX_inpB_write_1__VAL_2 ;
  assign inpB_EN = WILL_FIRE_RL_rl_start_MAC || WILL_FIRE_RL_rl_multiply ;

  // register inpC
  assign inpC_D_IN = val_c_rv[31:0] ;
  assign inpC_EN = CAN_FIRE_RL_rl_start_MAC ;

  // register mul_done
  assign mul_done_D_IN = !WILL_FIRE_RL_finished ;
  assign mul_done_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_mul ;

  // register mul_out
  assign mul_out_D_IN =
	     WILL_FIRE_RL_rl_mul ?
	       MUX_mul_out_write_1__VAL_1 :
	       val_mul_rv[31:0] ;
  assign mul_out_EN = WILL_FIRE_RL_rl_mul || WILL_FIRE_RL_rl_add ;

  // register prepmul
  assign prepmul_D_IN = 1'b0 ;
  assign prepmul_EN = 1'b0 ;

  // register select
  assign select_D_IN = get_select_select ;
  assign select_EN = EN_get_select ;

  // register start_done
  assign start_done_D_IN = !WILL_FIRE_RL_finished ;
  assign start_done_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_start_MAC ;

  // register temp
  assign temp_D_IN =
	     MUX_temp_write_1__SEL_1 ? MUX_temp_write_1__VAL_1 : 16'd0 ;
  assign temp_EN =
	     WILL_FIRE_RL_rl_multiply && inpB[0] || WILL_FIRE_RL_rl_mul ;

  // register val_a_rv
  assign val_a_rv_D_IN = val_a_rv_port2__read ;
  assign val_a_rv_EN = 1'b1 ;

  // register val_b_rv
  assign val_b_rv_D_IN = val_b_rv_port2__read ;
  assign val_b_rv_EN = 1'b1 ;

  // register val_c_rv
  assign val_c_rv_D_IN = val_c_rv_port2__read ;
  assign val_c_rv_EN = 1'b1 ;

  // register val_mac_rv
  assign val_mac_rv_D_IN = val_mac_rv_port2__read ;
  assign val_mac_rv_EN = 1'b1 ;

  // register val_mul_rv
  assign val_mul_rv_D_IN = val_mul_rv_port2__read ;
  assign val_mul_rv_EN = 1'b1 ;

  // remaining internal signals
  assign INV_inpA__q1 = ~inpA ;
  assign mul_out_03_BIT_11_93_XOR_inpC_14_BIT_11_94_96__ETC___d537 =
	     { x__h16532 ^ y__h16533,
	       x__h16589 ^ y__h16590,
	       mul_out_03_BIT_9_01_XOR_inpC_14_BIT_9_02_04_XO_ETC___d536 } ;
  assign mul_out_03_BIT_13_85_XOR_inpC_14_BIT_13_86_88__ETC___d538 =
	     { x__h16418 ^ y__h16419,
	       x__h16475 ^ y__h16476,
	       mul_out_03_BIT_11_93_XOR_inpC_14_BIT_11_94_96__ETC___d537 } ;
  assign mul_out_03_BIT_15_77_XOR_inpC_14_BIT_15_78_80__ETC___d539 =
	     { x__h16304 ^ y__h16305,
	       x__h16361 ^ y__h16362,
	       mul_out_03_BIT_13_85_XOR_inpC_14_BIT_13_86_88__ETC___d538 } ;
  assign mul_out_03_BIT_17_69_XOR_inpC_14_BIT_17_70_72__ETC___d540 =
	     { x__h16190 ^ y__h16191,
	       x__h16247 ^ y__h16248,
	       mul_out_03_BIT_15_77_XOR_inpC_14_BIT_15_78_80__ETC___d539 } ;
  assign mul_out_03_BIT_19_61_XOR_inpC_14_BIT_19_62_64__ETC___d541 =
	     { x__h16076 ^ y__h16077,
	       x__h16133 ^ y__h16134,
	       mul_out_03_BIT_17_69_XOR_inpC_14_BIT_17_70_72__ETC___d540 } ;
  assign mul_out_03_BIT_21_53_XOR_inpC_14_BIT_21_54_56__ETC___d542 =
	     { x__h15962 ^ y__h15963,
	       x__h16019 ^ y__h16020,
	       mul_out_03_BIT_19_61_XOR_inpC_14_BIT_19_62_64__ETC___d541 } ;
  assign mul_out_03_BIT_23_45_XOR_inpC_14_BIT_23_46_48__ETC___d543 =
	     { x__h15848 ^ y__h15849,
	       x__h15905 ^ y__h15906,
	       mul_out_03_BIT_21_53_XOR_inpC_14_BIT_21_54_56__ETC___d542 } ;
  assign mul_out_03_BIT_25_37_XOR_inpC_14_BIT_25_38_40__ETC___d544 =
	     { x__h15734 ^ y__h15735,
	       x__h15791 ^ y__h15792,
	       mul_out_03_BIT_23_45_XOR_inpC_14_BIT_23_46_48__ETC___d543 } ;
  assign mul_out_03_BIT_27_29_XOR_inpC_14_BIT_27_30_32__ETC___d545 =
	     { x__h15620 ^ y__h15621,
	       x__h15677 ^ y__h15678,
	       mul_out_03_BIT_25_37_XOR_inpC_14_BIT_25_38_40__ETC___d544 } ;
  assign mul_out_03_BIT_29_21_XOR_inpC_14_BIT_29_22_24__ETC___d546 =
	     { x__h15506 ^ y__h15507,
	       x__h15563 ^ y__h15564,
	       mul_out_03_BIT_27_29_XOR_inpC_14_BIT_27_30_32__ETC___d545 } ;
  assign mul_out_03_BIT_3_25_XOR_inpC_14_BIT_3_26_28_XO_ETC___d533 =
	     { x__h16988 ^ y__h16989,
	       x__h17045 ^ y__h17046,
	       x__h17102 ^ y__h17103,
	       mul_out[0] ^ inpC[0] } ;
  assign mul_out_03_BIT_5_17_XOR_inpC_14_BIT_5_18_20_XO_ETC___d534 =
	     { x__h16874 ^ y__h16875,
	       x__h16931 ^ y__h16932,
	       mul_out_03_BIT_3_25_XOR_inpC_14_BIT_3_26_28_XO_ETC___d533 } ;
  assign mul_out_03_BIT_7_09_XOR_inpC_14_BIT_7_10_12_XO_ETC___d535 =
	     { x__h16760 ^ y__h16761,
	       x__h16817 ^ y__h16818,
	       mul_out_03_BIT_5_17_XOR_inpC_14_BIT_5_18_20_XO_ETC___d534 } ;
  assign mul_out_03_BIT_9_01_XOR_inpC_14_BIT_9_02_04_XO_ETC___d536 =
	     { x__h16646 ^ y__h16647,
	       x__h16703 ^ y__h16704,
	       mul_out_03_BIT_7_09_XOR_inpC_14_BIT_7_10_12_XO_ETC___d535 } ;
  assign temp_7_BIT_11_5_XOR_INV_inpA_9_0_BIT_11_5_XOR__ETC___d181 =
	     { x__h5957 ^ y__h5958,
	       x__h6060 ^ y__h6061,
	       temp_7_BIT_9_3_XOR_INV_inpA_9_0_BIT_9_7_XOR_IN_ETC___d180 } ;
  assign temp_7_BIT_11_5_XOR_inpA_9_BIT_11_95_97_XOR_te_ETC___d279 =
	     { x__h10110 ^ y__h10111,
	       x__h10167 ^ y__h10168,
	       temp_7_BIT_9_3_XOR_inpA_9_BIT_9_01_03_XOR_temp_ETC___d278 } ;
  assign temp_7_BIT_13_7_XOR_INV_inpA_9_0_BIT_13_3_XOR__ETC___d182 =
	     { x__h5751 ^ y__h5752,
	       x__h5854 ^ y__h5855,
	       temp_7_BIT_11_5_XOR_INV_inpA_9_0_BIT_11_5_XOR__ETC___d181 } ;
  assign temp_7_BIT_13_7_XOR_inpA_9_BIT_13_89_91_XOR_te_ETC___d280 =
	     { x__h9996 ^ y__h9997,
	       x__h10053 ^ y__h10054,
	       temp_7_BIT_11_5_XOR_inpA_9_BIT_11_95_97_XOR_te_ETC___d279 } ;
  assign temp_7_BIT_15_8_XOR_INV_inpA_9_0_BIT_15_1_XOR__ETC___d183 =
	     { x__h2740 ^ y__h2741,
	       x__h5648 ^ y__h5649,
	       temp_7_BIT_13_7_XOR_INV_inpA_9_0_BIT_13_3_XOR__ETC___d182 } ;
  assign temp_7_BIT_15_8_XOR_inpA_9_BIT_15_84_85_XOR_te_ETC___d281 =
	     { x__h8370 ^ y__h8371,
	       x__h9939 ^ y__h9940,
	       temp_7_BIT_13_7_XOR_inpA_9_BIT_13_89_91_XOR_te_ETC___d280 } ;
  assign temp_7_BIT_3_17_XOR_INV_inpA_9_0_BIT_3_3_XOR_I_ETC___d177 =
	     { x__h6781 ^ y__h6782,
	       x__h6884 ^ y__h6885,
	       x__h6987 ^ y__h6988,
	       temp[0] ^ ~INV_inpA__q1[0] } ;
  assign temp_7_BIT_3_17_XOR_inpA_9_BIT_3_19_21_XOR_tem_ETC___d275 =
	     { x__h10566 ^ y__h10567,
	       x__h10623 ^ y__h10624,
	       x__h10680 ^ y__h10681,
	       temp[0] ^ inpA[0] } ;
  assign temp_7_BIT_5_09_XOR_INV_inpA_9_0_BIT_5_1_XOR_I_ETC___d178 =
	     { x__h6575 ^ y__h6576,
	       x__h6678 ^ y__h6679,
	       temp_7_BIT_3_17_XOR_INV_inpA_9_0_BIT_3_3_XOR_I_ETC___d177 } ;
  assign temp_7_BIT_5_09_XOR_inpA_9_BIT_5_13_15_XOR_tem_ETC___d276 =
	     { x__h10452 ^ y__h10453,
	       x__h10509 ^ y__h10510,
	       temp_7_BIT_3_17_XOR_inpA_9_BIT_3_19_21_XOR_tem_ETC___d275 } ;
  assign temp_7_BIT_7_01_XOR_INV_inpA_9_0_BIT_7_9_XOR_I_ETC___d179 =
	     { x__h6369 ^ y__h6370,
	       x__h6472 ^ y__h6473,
	       temp_7_BIT_5_09_XOR_INV_inpA_9_0_BIT_5_1_XOR_I_ETC___d178 } ;
  assign temp_7_BIT_7_01_XOR_inpA_9_BIT_7_07_09_XOR_tem_ETC___d277 =
	     { x__h10338 ^ y__h10339,
	       x__h10395 ^ y__h10396,
	       temp_7_BIT_5_09_XOR_inpA_9_BIT_5_13_15_XOR_tem_ETC___d276 } ;
  assign temp_7_BIT_9_3_XOR_INV_inpA_9_0_BIT_9_7_XOR_IN_ETC___d180 =
	     { x__h6163 ^ y__h6164,
	       x__h6266 ^ y__h6267,
	       temp_7_BIT_7_01_XOR_INV_inpA_9_0_BIT_7_9_XOR_I_ETC___d179 } ;
  assign temp_7_BIT_9_3_XOR_inpA_9_BIT_9_01_03_XOR_temp_ETC___d278 =
	     { x__h10224 ^ y__h10225,
	       x__h10281 ^ y__h10282,
	       temp_7_BIT_7_01_XOR_inpA_9_BIT_7_07_09_XOR_tem_ETC___d277 } ;
  assign x__h10053 = temp[12] ^ inpA[12] ;
  assign x__h10110 = temp[11] ^ inpA[11] ;
  assign x__h10167 = temp[10] ^ inpA[10] ;
  assign x__h10224 = temp[9] ^ inpA[9] ;
  assign x__h10281 = temp[8] ^ inpA[8] ;
  assign x__h10338 = temp[7] ^ inpA[7] ;
  assign x__h10395 = temp[6] ^ inpA[6] ;
  assign x__h10452 = temp[5] ^ inpA[5] ;
  assign x__h10509 = temp[4] ^ inpA[4] ;
  assign x__h10566 = temp[3] ^ inpA[3] ;
  assign x__h10623 = temp[2] ^ inpA[2] ;
  assign x__h10680 = temp[1] ^ inpA[1] ;
  assign x__h12199 = mul_out[31] ^ inpC[31] ;
  assign x__h12259 = mul_out[30] & inpC[30] ;
  assign x__h12364 = mul_out[29] & inpC[29] ;
  assign x__h12469 = mul_out[28] & inpC[28] ;
  assign x__h12574 = mul_out[27] & inpC[27] ;
  assign x__h12679 = mul_out[26] & inpC[26] ;
  assign x__h12784 = mul_out[25] & inpC[25] ;
  assign x__h12889 = mul_out[24] & inpC[24] ;
  assign x__h12994 = mul_out[23] & inpC[23] ;
  assign x__h13099 = mul_out[22] & inpC[22] ;
  assign x__h13204 = mul_out[21] & inpC[21] ;
  assign x__h13309 = mul_out[20] & inpC[20] ;
  assign x__h13414 = mul_out[19] & inpC[19] ;
  assign x__h13519 = mul_out[18] & inpC[18] ;
  assign x__h13624 = mul_out[17] & inpC[17] ;
  assign x__h13729 = mul_out[16] & inpC[16] ;
  assign x__h13834 = mul_out[15] & inpC[15] ;
  assign x__h13939 = mul_out[14] & inpC[14] ;
  assign x__h14044 = mul_out[13] & inpC[13] ;
  assign x__h14149 = mul_out[12] & inpC[12] ;
  assign x__h14254 = mul_out[11] & inpC[11] ;
  assign x__h14359 = mul_out[10] & inpC[10] ;
  assign x__h14464 = mul_out[9] & inpC[9] ;
  assign x__h14569 = mul_out[8] & inpC[8] ;
  assign x__h14674 = mul_out[7] & inpC[7] ;
  assign x__h14779 = mul_out[6] & inpC[6] ;
  assign x__h14884 = mul_out[5] & inpC[5] ;
  assign x__h14989 = mul_out[4] & inpC[4] ;
  assign x__h15094 = mul_out[3] & inpC[3] ;
  assign x__h15199 = mul_out[2] & inpC[2] ;
  assign x__h15304 = mul_out[1] & inpC[1] ;
  assign x__h15449 = mul_out[30] ^ inpC[30] ;
  assign x__h15506 = mul_out[29] ^ inpC[29] ;
  assign x__h15563 = mul_out[28] ^ inpC[28] ;
  assign x__h15620 = mul_out[27] ^ inpC[27] ;
  assign x__h15677 = mul_out[26] ^ inpC[26] ;
  assign x__h15734 = mul_out[25] ^ inpC[25] ;
  assign x__h15791 = mul_out[24] ^ inpC[24] ;
  assign x__h15848 = mul_out[23] ^ inpC[23] ;
  assign x__h15905 = mul_out[22] ^ inpC[22] ;
  assign x__h15962 = mul_out[21] ^ inpC[21] ;
  assign x__h16019 = mul_out[20] ^ inpC[20] ;
  assign x__h16076 = mul_out[19] ^ inpC[19] ;
  assign x__h16133 = mul_out[18] ^ inpC[18] ;
  assign x__h16190 = mul_out[17] ^ inpC[17] ;
  assign x__h16247 = mul_out[16] ^ inpC[16] ;
  assign x__h16304 = mul_out[15] ^ inpC[15] ;
  assign x__h16361 = mul_out[14] ^ inpC[14] ;
  assign x__h16418 = mul_out[13] ^ inpC[13] ;
  assign x__h16475 = mul_out[12] ^ inpC[12] ;
  assign x__h16532 = mul_out[11] ^ inpC[11] ;
  assign x__h16589 = mul_out[10] ^ inpC[10] ;
  assign x__h16646 = mul_out[9] ^ inpC[9] ;
  assign x__h16703 = mul_out[8] ^ inpC[8] ;
  assign x__h16760 = mul_out[7] ^ inpC[7] ;
  assign x__h16817 = mul_out[6] ^ inpC[6] ;
  assign x__h16874 = mul_out[5] ^ inpC[5] ;
  assign x__h16931 = mul_out[4] ^ inpC[4] ;
  assign x__h16988 = mul_out[3] ^ inpC[3] ;
  assign x__h17045 = mul_out[2] ^ inpC[2] ;
  assign x__h17102 = mul_out[1] ^ inpC[1] ;
  assign x__h2740 = temp[15] ^ y__h2743 ;
  assign x__h5602 = temp[14] & y__h5605 ;
  assign x__h5648 = temp[14] ^ y__h5605 ;
  assign x__h5705 = temp[13] & y__h5708 ;
  assign x__h5751 = temp[13] ^ y__h5708 ;
  assign x__h5808 = temp[12] & y__h5811 ;
  assign x__h5854 = temp[12] ^ y__h5811 ;
  assign x__h5911 = temp[11] & y__h5914 ;
  assign x__h5957 = temp[11] ^ y__h5914 ;
  assign x__h6014 = temp[10] & y__h6017 ;
  assign x__h6060 = temp[10] ^ y__h6017 ;
  assign x__h6117 = temp[9] & y__h6120 ;
  assign x__h6163 = temp[9] ^ y__h6120 ;
  assign x__h6220 = temp[8] & y__h6223 ;
  assign x__h6266 = temp[8] ^ y__h6223 ;
  assign x__h6323 = temp[7] & y__h6326 ;
  assign x__h6369 = temp[7] ^ y__h6326 ;
  assign x__h6426 = temp[6] & y__h6429 ;
  assign x__h6472 = temp[6] ^ y__h6429 ;
  assign x__h6529 = temp[5] & y__h6532 ;
  assign x__h6575 = temp[5] ^ y__h6532 ;
  assign x__h6632 = temp[4] & y__h6635 ;
  assign x__h6678 = temp[4] ^ y__h6635 ;
  assign x__h6735 = temp[3] & y__h6738 ;
  assign x__h6781 = temp[3] ^ y__h6738 ;
  assign x__h6838 = temp[2] & y__h6841 ;
  assign x__h6884 = temp[2] ^ y__h6841 ;
  assign x__h6941 = temp[1] & y__h6944 ;
  assign x__h6987 = temp[1] ^ y__h6944 ;
  assign x__h8370 = temp[15] ^ inpA[15] ;
  assign x__h8429 = temp[14] & inpA[14] ;
  assign x__h8534 = temp[13] & inpA[13] ;
  assign x__h8639 = temp[12] & inpA[12] ;
  assign x__h8744 = temp[11] & inpA[11] ;
  assign x__h8849 = temp[10] & inpA[10] ;
  assign x__h8954 = temp[9] & inpA[9] ;
  assign x__h9059 = temp[8] & inpA[8] ;
  assign x__h9164 = temp[7] & inpA[7] ;
  assign x__h9269 = temp[6] & inpA[6] ;
  assign x__h9374 = temp[5] & inpA[5] ;
  assign x__h9479 = temp[4] & inpA[4] ;
  assign x__h9584 = temp[3] & inpA[3] ;
  assign x__h9689 = temp[2] & inpA[2] ;
  assign x__h9794 = temp[1] & inpA[1] ;
  assign x__h9939 = temp[14] ^ inpA[14] ;
  assign x__h9996 = temp[13] ^ inpA[13] ;
  assign y__h10054 = x__h8744 | y__h8745 ;
  assign y__h10111 = x__h8849 | y__h8850 ;
  assign y__h10168 = x__h8954 | y__h8955 ;
  assign y__h10225 = x__h9059 | y__h9060 ;
  assign y__h10282 = x__h9164 | y__h9165 ;
  assign y__h10339 = x__h9269 | y__h9270 ;
  assign y__h10396 = x__h9374 | y__h9375 ;
  assign y__h10453 = x__h9479 | y__h9480 ;
  assign y__h10510 = x__h9584 | y__h9585 ;
  assign y__h10567 = x__h9689 | y__h9690 ;
  assign y__h10624 = x__h9794 | y__h9795 ;
  assign y__h10681 = temp[0] & inpA[0] ;
  assign y__h12200 = x__h12259 | y__h12260 ;
  assign y__h12260 = x__h15449 & y__h15450 ;
  assign y__h12365 = x__h15506 & y__h15507 ;
  assign y__h12470 = x__h15563 & y__h15564 ;
  assign y__h12575 = x__h15620 & y__h15621 ;
  assign y__h12680 = x__h15677 & y__h15678 ;
  assign y__h12785 = x__h15734 & y__h15735 ;
  assign y__h12890 = x__h15791 & y__h15792 ;
  assign y__h12995 = x__h15848 & y__h15849 ;
  assign y__h13100 = x__h15905 & y__h15906 ;
  assign y__h13205 = x__h15962 & y__h15963 ;
  assign y__h13310 = x__h16019 & y__h16020 ;
  assign y__h13415 = x__h16076 & y__h16077 ;
  assign y__h13520 = x__h16133 & y__h16134 ;
  assign y__h13625 = x__h16190 & y__h16191 ;
  assign y__h13730 = x__h16247 & y__h16248 ;
  assign y__h13835 = x__h16304 & y__h16305 ;
  assign y__h13940 = x__h16361 & y__h16362 ;
  assign y__h14045 = x__h16418 & y__h16419 ;
  assign y__h14150 = x__h16475 & y__h16476 ;
  assign y__h14255 = x__h16532 & y__h16533 ;
  assign y__h14360 = x__h16589 & y__h16590 ;
  assign y__h14465 = x__h16646 & y__h16647 ;
  assign y__h14570 = x__h16703 & y__h16704 ;
  assign y__h14675 = x__h16760 & y__h16761 ;
  assign y__h14780 = x__h16817 & y__h16818 ;
  assign y__h14885 = x__h16874 & y__h16875 ;
  assign y__h14990 = x__h16931 & y__h16932 ;
  assign y__h15095 = x__h16988 & y__h16989 ;
  assign y__h15200 = x__h17045 & y__h17046 ;
  assign y__h15305 = x__h17102 & y__h17103 ;
  assign y__h15450 = x__h12364 | y__h12365 ;
  assign y__h15507 = x__h12469 | y__h12470 ;
  assign y__h15564 = x__h12574 | y__h12575 ;
  assign y__h15621 = x__h12679 | y__h12680 ;
  assign y__h15678 = x__h12784 | y__h12785 ;
  assign y__h15735 = x__h12889 | y__h12890 ;
  assign y__h15792 = x__h12994 | y__h12995 ;
  assign y__h15849 = x__h13099 | y__h13100 ;
  assign y__h15906 = x__h13204 | y__h13205 ;
  assign y__h15963 = x__h13309 | y__h13310 ;
  assign y__h16020 = x__h13414 | y__h13415 ;
  assign y__h16077 = x__h13519 | y__h13520 ;
  assign y__h16134 = x__h13624 | y__h13625 ;
  assign y__h16191 = x__h13729 | y__h13730 ;
  assign y__h16248 = x__h13834 | y__h13835 ;
  assign y__h16305 = x__h13939 | y__h13940 ;
  assign y__h16362 = x__h14044 | y__h14045 ;
  assign y__h16419 = x__h14149 | y__h14150 ;
  assign y__h16476 = x__h14254 | y__h14255 ;
  assign y__h16533 = x__h14359 | y__h14360 ;
  assign y__h16590 = x__h14464 | y__h14465 ;
  assign y__h16647 = x__h14569 | y__h14570 ;
  assign y__h16704 = x__h14674 | y__h14675 ;
  assign y__h16761 = x__h14779 | y__h14780 ;
  assign y__h16818 = x__h14884 | y__h14885 ;
  assign y__h16875 = x__h14989 | y__h14990 ;
  assign y__h16932 = x__h15094 | y__h15095 ;
  assign y__h16989 = x__h15199 | y__h15200 ;
  assign y__h17046 = x__h15304 | y__h15305 ;
  assign y__h17103 = mul_out[0] & inpC[0] ;
  assign y__h2741 = x__h5602 | y__h5603 ;
  assign y__h2743 = INV_inpA__q1[15] ^ y__h3220 ;
  assign y__h3220 = INV_inpA__q1[14] & y__h3326 ;
  assign y__h3326 = INV_inpA__q1[13] & y__h3429 ;
  assign y__h3429 = INV_inpA__q1[12] & y__h3532 ;
  assign y__h3532 = INV_inpA__q1[11] & y__h3635 ;
  assign y__h3635 = INV_inpA__q1[10] & y__h3738 ;
  assign y__h3738 = INV_inpA__q1[9] & y__h3841 ;
  assign y__h3841 = INV_inpA__q1[8] & y__h3944 ;
  assign y__h3944 = INV_inpA__q1[7] & y__h4047 ;
  assign y__h4047 = INV_inpA__q1[6] & y__h4150 ;
  assign y__h4150 = INV_inpA__q1[5] & y__h4253 ;
  assign y__h4253 = INV_inpA__q1[4] & y__h4356 ;
  assign y__h4356 = INV_inpA__q1[3] & y__h4459 ;
  assign y__h4459 = INV_inpA__q1[2] & y__h4562 ;
  assign y__h4562 = INV_inpA__q1[1] & INV_inpA__q1[0] ;
  assign y__h5603 = x__h5648 & y__h5649 ;
  assign y__h5605 = INV_inpA__q1[14] ^ y__h3326 ;
  assign y__h5649 = x__h5705 | y__h5706 ;
  assign y__h5706 = x__h5751 & y__h5752 ;
  assign y__h5708 = INV_inpA__q1[13] ^ y__h3429 ;
  assign y__h5752 = x__h5808 | y__h5809 ;
  assign y__h5809 = x__h5854 & y__h5855 ;
  assign y__h5811 = INV_inpA__q1[12] ^ y__h3532 ;
  assign y__h5855 = x__h5911 | y__h5912 ;
  assign y__h5912 = x__h5957 & y__h5958 ;
  assign y__h5914 = INV_inpA__q1[11] ^ y__h3635 ;
  assign y__h5958 = x__h6014 | y__h6015 ;
  assign y__h6015 = x__h6060 & y__h6061 ;
  assign y__h6017 = INV_inpA__q1[10] ^ y__h3738 ;
  assign y__h6061 = x__h6117 | y__h6118 ;
  assign y__h6118 = x__h6163 & y__h6164 ;
  assign y__h6120 = INV_inpA__q1[9] ^ y__h3841 ;
  assign y__h6164 = x__h6220 | y__h6221 ;
  assign y__h6221 = x__h6266 & y__h6267 ;
  assign y__h6223 = INV_inpA__q1[8] ^ y__h3944 ;
  assign y__h6267 = x__h6323 | y__h6324 ;
  assign y__h6324 = x__h6369 & y__h6370 ;
  assign y__h6326 = INV_inpA__q1[7] ^ y__h4047 ;
  assign y__h6370 = x__h6426 | y__h6427 ;
  assign y__h6427 = x__h6472 & y__h6473 ;
  assign y__h6429 = INV_inpA__q1[6] ^ y__h4150 ;
  assign y__h6473 = x__h6529 | y__h6530 ;
  assign y__h6530 = x__h6575 & y__h6576 ;
  assign y__h6532 = INV_inpA__q1[5] ^ y__h4253 ;
  assign y__h6576 = x__h6632 | y__h6633 ;
  assign y__h6633 = x__h6678 & y__h6679 ;
  assign y__h6635 = INV_inpA__q1[4] ^ y__h4356 ;
  assign y__h6679 = x__h6735 | y__h6736 ;
  assign y__h6736 = x__h6781 & y__h6782 ;
  assign y__h6738 = INV_inpA__q1[3] ^ y__h4459 ;
  assign y__h6782 = x__h6838 | y__h6839 ;
  assign y__h6839 = x__h6884 & y__h6885 ;
  assign y__h6841 = INV_inpA__q1[2] ^ y__h4562 ;
  assign y__h6885 = x__h6941 | y__h6942 ;
  assign y__h6942 = x__h6987 & y__h6988 ;
  assign y__h6944 = INV_inpA__q1[1] ^ INV_inpA__q1[0] ;
  assign y__h6988 = temp[0] & ~INV_inpA__q1[0] ;
  assign y__h8371 = x__h8429 | y__h8430 ;
  assign y__h8430 = x__h9939 & y__h9940 ;
  assign y__h8535 = x__h9996 & y__h9997 ;
  assign y__h8640 = x__h10053 & y__h10054 ;
  assign y__h8745 = x__h10110 & y__h10111 ;
  assign y__h8850 = x__h10167 & y__h10168 ;
  assign y__h8955 = x__h10224 & y__h10225 ;
  assign y__h9060 = x__h10281 & y__h10282 ;
  assign y__h9165 = x__h10338 & y__h10339 ;
  assign y__h9270 = x__h10395 & y__h10396 ;
  assign y__h9375 = x__h10452 & y__h10453 ;
  assign y__h9480 = x__h10509 & y__h10510 ;
  assign y__h9585 = x__h10566 & y__h10567 ;
  assign y__h9690 = x__h10623 & y__h10624 ;
  assign y__h9795 = x__h10680 & y__h10681 ;
  assign y__h9940 = x__h8534 | y__h8535 ;
  assign y__h9997 = x__h8639 | y__h8640 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 5'd9;
	finish <= `BSV_ASSIGNMENT_DELAY 1'd1;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpB <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	prepmul <= `BSV_ASSIGNMENT_DELAY 1'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp <= `BSV_ASSIGNMENT_DELAY 16'd0;
	val_a_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_b_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_c_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_mac_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_mul_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_out_EN) add_out <= `BSV_ASSIGNMENT_DELAY add_out_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (finish_EN) finish <= `BSV_ASSIGNMENT_DELAY finish_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_result_EN)
	  got_result <= `BSV_ASSIGNMENT_DELAY got_result_D_IN;
	if (got_select_EN)
	  got_select <= `BSV_ASSIGNMENT_DELAY got_select_D_IN;
	if (inpA_EN) inpA <= `BSV_ASSIGNMENT_DELAY inpA_D_IN;
	if (inpB_EN) inpB <= `BSV_ASSIGNMENT_DELAY inpB_D_IN;
	if (inpC_EN) inpC <= `BSV_ASSIGNMENT_DELAY inpC_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_out_EN) mul_out <= `BSV_ASSIGNMENT_DELAY mul_out_D_IN;
	if (prepmul_EN) prepmul <= `BSV_ASSIGNMENT_DELAY prepmul_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
	if (start_done_EN)
	  start_done <= `BSV_ASSIGNMENT_DELAY start_done_D_IN;
	if (temp_EN) temp <= `BSV_ASSIGNMENT_DELAY temp_D_IN;
	if (val_a_rv_EN) val_a_rv <= `BSV_ASSIGNMENT_DELAY val_a_rv_D_IN;
	if (val_b_rv_EN) val_b_rv <= `BSV_ASSIGNMENT_DELAY val_b_rv_D_IN;
	if (val_c_rv_EN) val_c_rv <= `BSV_ASSIGNMENT_DELAY val_c_rv_D_IN;
	if (val_mac_rv_EN)
	  val_mac_rv <= `BSV_ASSIGNMENT_DELAY val_mac_rv_D_IN;
	if (val_mul_rv_EN)
	  val_mul_rv <= `BSV_ASSIGNMENT_DELAY val_mul_rv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_out = 32'hAAAAAAAA;
    counter = 5'h0A;
    finish = 1'h0;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_result = 1'h0;
    got_select = 1'h0;
    inpA = 16'hAAAA;
    inpB = 16'hAAAA;
    inpC = 32'hAAAAAAAA;
    mul_done = 1'h0;
    mul_out = 32'hAAAAAAAA;
    prepmul = 1'h0;
    select = 1'h0;
    start_done = 1'h0;
    temp = 16'hAAAA;
    val_a_rv = 17'h0AAAA;
    val_b_rv = 17'h0AAAA;
    val_c_rv = 33'h0AAAAAAAA;
    val_mac_rv = 33'h0AAAAAAAA;
    val_mul_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_MAC) $display("start_MAC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_multiply) $display("Multiply");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_add) $display("Add");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add) $display("Add comp");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_mul) $display("Mul");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_done) $display("Done");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finished) $display("finished");
  end
  // synopsys translate_on
endmodule  // mkintmul

