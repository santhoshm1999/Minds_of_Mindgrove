//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Nov 26 15:50:55 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_select                 O     1 const
// get_output                     O    32
// RDY_get_output                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32
// get_select_select              I     1 unused
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_select                  I     1 unused
// EN_get_output                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintmul(CLK,
		RST_N,

		get_A_a,
		EN_get_A,
		RDY_get_A,

		get_B_b,
		EN_get_B,
		RDY_get_B,

		get_C_c,
		EN_get_C,
		RDY_get_C,

		get_select_select,
		EN_get_select,
		RDY_get_select,

		EN_get_output,
		get_output,
		RDY_get_output);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_select
  input  get_select_select;
  input  EN_get_select;
  output RDY_get_select;

  // actionvalue method get_output
  input  EN_get_output;
  output [31 : 0] get_output;
  output RDY_get_output;

  // signals for module outputs
  wire [31 : 0] get_output;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_output, RDY_get_select;

  // inlined wires
  wire [32 : 0] val_c_rv_port0__write_1,
		val_c_rv_port1__read,
		val_c_rv_port1__write_1,
		val_c_rv_port2__read,
		val_mac_rv_port1__read,
		val_mac_rv_port1__write_1,
		val_mac_rv_port2__read,
		val_mul_rv_port1__read,
		val_mul_rv_port1__write_1,
		val_mul_rv_port2__read;
  wire [16 : 0] val_a_rv_port0__write_1,
		val_a_rv_port1__read,
		val_a_rv_port1__write_1,
		val_a_rv_port2__read,
		val_b_rv_port1__read,
		val_b_rv_port1__write_1,
		val_b_rv_port2__read;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_out
  reg [31 : 0] add_out;
  wire [31 : 0] add_out_D_IN;
  wire add_out_EN;

  // register counter
  reg [4 : 0] counter;
  wire [4 : 0] counter_D_IN;
  wire counter_EN;

  // register finish
  reg finish;
  wire finish_D_IN, finish_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_result
  reg got_result;
  wire got_result_D_IN, got_result_EN;

  // register inpA
  reg [15 : 0] inpA;
  wire [15 : 0] inpA_D_IN;
  wire inpA_EN;

  // register inpB
  reg [15 : 0] inpB;
  wire [15 : 0] inpB_D_IN;
  wire inpB_EN;

  // register inpC
  reg [31 : 0] inpC;
  wire [31 : 0] inpC_D_IN;
  wire inpC_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_out
  reg [31 : 0] mul_out;
  wire [31 : 0] mul_out_D_IN;
  wire mul_out_EN;

  // register prepmul
  reg prepmul;
  wire prepmul_D_IN, prepmul_EN;

  // register select
  reg select;
  wire select_D_IN, select_EN;

  // register start_done
  reg start_done;
  wire start_done_D_IN, start_done_EN;

  // register temp
  reg [15 : 0] temp;
  wire [15 : 0] temp_D_IN;
  wire temp_EN;

  // register val_a_rv
  reg [16 : 0] val_a_rv;
  wire [16 : 0] val_a_rv_D_IN;
  wire val_a_rv_EN;

  // register val_b_rv
  reg [16 : 0] val_b_rv;
  wire [16 : 0] val_b_rv_D_IN;
  wire val_b_rv_EN;

  // register val_c_rv
  reg [32 : 0] val_c_rv;
  wire [32 : 0] val_c_rv_D_IN;
  wire val_c_rv_EN;

  // register val_mac_rv
  reg [32 : 0] val_mac_rv;
  wire [32 : 0] val_mac_rv_D_IN;
  wire val_mac_rv_EN;

  // register val_mul_rv
  reg [32 : 0] val_mul_rv;
  wire [32 : 0] val_mul_rv_D_IN;
  wire val_mul_rv_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_finished,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_done,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_rl_start_MAC,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_output,
       CAN_FIRE_get_select,
       WILL_FIRE_RL_finished,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_done,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_rl_start_MAC,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_output,
       WILL_FIRE_get_select;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_mul_out_write_1__VAL_1;
  wire [15 : 0] MUX_inpA_write_1__VAL_2,
		MUX_inpB_write_1__VAL_2,
		MUX_temp_write_1__VAL_1;
  wire [4 : 0] MUX_counter_write_1__VAL_2;
  wire MUX_temp_write_1__SEL_1;

  // remaining internal signals
  wire [29 : 0] mul_out_01_BIT_29_19_XOR_inpC_12_BIT_29_20_22__ETC___d544;
  wire [27 : 0] mul_out_01_BIT_27_27_XOR_inpC_12_BIT_27_28_30__ETC___d543;
  wire [25 : 0] mul_out_01_BIT_25_35_XOR_inpC_12_BIT_25_36_38__ETC___d542;
  wire [23 : 0] mul_out_01_BIT_23_43_XOR_inpC_12_BIT_23_44_46__ETC___d541;
  wire [21 : 0] mul_out_01_BIT_21_51_XOR_inpC_12_BIT_21_52_54__ETC___d540;
  wire [19 : 0] mul_out_01_BIT_19_59_XOR_inpC_12_BIT_19_60_62__ETC___d539;
  wire [17 : 0] mul_out_01_BIT_17_67_XOR_inpC_12_BIT_17_68_70__ETC___d538;
  wire [15 : 0] INV_inpA__q1,
		mul_out_01_BIT_15_75_XOR_inpC_12_BIT_15_76_78__ETC___d537,
		temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d181,
		temp_5_BIT_15_6_XOR_inpA_7_BIT_15_82_83_XOR_te_ETC___d279;
  wire [13 : 0] mul_out_01_BIT_13_83_XOR_inpC_12_BIT_13_84_86__ETC___d536,
		temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d180,
		temp_5_BIT_13_5_XOR_inpA_7_BIT_13_87_89_XOR_te_ETC___d278;
  wire [11 : 0] mul_out_01_BIT_11_91_XOR_inpC_12_BIT_11_92_94__ETC___d535,
		temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d179,
		temp_5_BIT_11_3_XOR_inpA_7_BIT_11_93_95_XOR_te_ETC___d277;
  wire [9 : 0] mul_out_01_BIT_9_99_XOR_inpC_12_BIT_9_00_02_XO_ETC___d534,
	       temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d178,
	       temp_5_BIT_9_1_XOR_inpA_7_BIT_9_99_01_XOR_temp_ETC___d276;
  wire [7 : 0] mul_out_01_BIT_7_07_XOR_inpC_12_BIT_7_08_10_XO_ETC___d533,
	       temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d177,
	       temp_5_BIT_7_9_XOR_inpA_7_BIT_7_05_07_XOR_temp_ETC___d275;
  wire [5 : 0] mul_out_01_BIT_5_15_XOR_inpC_12_BIT_5_16_18_XO_ETC___d532,
	       temp_5_BIT_5_07_XOR_INV_inpA_7_8_BIT_5_9_XOR_I_ETC___d176,
	       temp_5_BIT_5_07_XOR_inpA_7_BIT_5_11_13_XOR_tem_ETC___d274;
  wire [3 : 0] mul_out_01_BIT_3_23_XOR_inpC_12_BIT_3_24_26_XO_ETC___d531,
	       temp_5_BIT_3_15_XOR_INV_inpA_7_8_BIT_3_1_XOR_I_ETC___d175,
	       temp_5_BIT_3_15_XOR_inpA_7_BIT_3_17_19_XOR_tem_ETC___d273;
  wire x__h10019,
       x__h10076,
       x__h10133,
       x__h10190,
       x__h10247,
       x__h10304,
       x__h10361,
       x__h10418,
       x__h10475,
       x__h10532,
       x__h10589,
       x__h10646,
       x__h12165,
       x__h12225,
       x__h12330,
       x__h12435,
       x__h12540,
       x__h12645,
       x__h12750,
       x__h12855,
       x__h12960,
       x__h13065,
       x__h13170,
       x__h13275,
       x__h13380,
       x__h13485,
       x__h13590,
       x__h13695,
       x__h13800,
       x__h13905,
       x__h14010,
       x__h14115,
       x__h14220,
       x__h14325,
       x__h14430,
       x__h14535,
       x__h14640,
       x__h14745,
       x__h14850,
       x__h14955,
       x__h15060,
       x__h15165,
       x__h15270,
       x__h15415,
       x__h15472,
       x__h15529,
       x__h15586,
       x__h15643,
       x__h15700,
       x__h15757,
       x__h15814,
       x__h15871,
       x__h15928,
       x__h15985,
       x__h16042,
       x__h16099,
       x__h16156,
       x__h16213,
       x__h16270,
       x__h16327,
       x__h16384,
       x__h16441,
       x__h16498,
       x__h16555,
       x__h16612,
       x__h16669,
       x__h16726,
       x__h16783,
       x__h16840,
       x__h16897,
       x__h16954,
       x__h17011,
       x__h17068,
       x__h2706,
       x__h5568,
       x__h5614,
       x__h5671,
       x__h5717,
       x__h5774,
       x__h5820,
       x__h5877,
       x__h5923,
       x__h5980,
       x__h6026,
       x__h6083,
       x__h6129,
       x__h6186,
       x__h6232,
       x__h6289,
       x__h6335,
       x__h6392,
       x__h6438,
       x__h6495,
       x__h6541,
       x__h6598,
       x__h6644,
       x__h6701,
       x__h6747,
       x__h6804,
       x__h6850,
       x__h6907,
       x__h6953,
       x__h8336,
       x__h8395,
       x__h8500,
       x__h8605,
       x__h8710,
       x__h8815,
       x__h8920,
       x__h9025,
       x__h9130,
       x__h9235,
       x__h9340,
       x__h9445,
       x__h9550,
       x__h9655,
       x__h9760,
       x__h9905,
       x__h9962,
       y__h10020,
       y__h10077,
       y__h10134,
       y__h10191,
       y__h10248,
       y__h10305,
       y__h10362,
       y__h10419,
       y__h10476,
       y__h10533,
       y__h10590,
       y__h10647,
       y__h12166,
       y__h12226,
       y__h12331,
       y__h12436,
       y__h12541,
       y__h12646,
       y__h12751,
       y__h12856,
       y__h12961,
       y__h13066,
       y__h13171,
       y__h13276,
       y__h13381,
       y__h13486,
       y__h13591,
       y__h13696,
       y__h13801,
       y__h13906,
       y__h14011,
       y__h14116,
       y__h14221,
       y__h14326,
       y__h14431,
       y__h14536,
       y__h14641,
       y__h14746,
       y__h14851,
       y__h14956,
       y__h15061,
       y__h15166,
       y__h15271,
       y__h15416,
       y__h15473,
       y__h15530,
       y__h15587,
       y__h15644,
       y__h15701,
       y__h15758,
       y__h15815,
       y__h15872,
       y__h15929,
       y__h15986,
       y__h16043,
       y__h16100,
       y__h16157,
       y__h16214,
       y__h16271,
       y__h16328,
       y__h16385,
       y__h16442,
       y__h16499,
       y__h16556,
       y__h16613,
       y__h16670,
       y__h16727,
       y__h16784,
       y__h16841,
       y__h16898,
       y__h16955,
       y__h17012,
       y__h17069,
       y__h2707,
       y__h2709,
       y__h3186,
       y__h3292,
       y__h3395,
       y__h3498,
       y__h3601,
       y__h3704,
       y__h3807,
       y__h3910,
       y__h4013,
       y__h4116,
       y__h4219,
       y__h4322,
       y__h4425,
       y__h4528,
       y__h5569,
       y__h5571,
       y__h5615,
       y__h5672,
       y__h5674,
       y__h5718,
       y__h5775,
       y__h5777,
       y__h5821,
       y__h5878,
       y__h5880,
       y__h5924,
       y__h5981,
       y__h5983,
       y__h6027,
       y__h6084,
       y__h6086,
       y__h6130,
       y__h6187,
       y__h6189,
       y__h6233,
       y__h6290,
       y__h6292,
       y__h6336,
       y__h6393,
       y__h6395,
       y__h6439,
       y__h6496,
       y__h6498,
       y__h6542,
       y__h6599,
       y__h6601,
       y__h6645,
       y__h6702,
       y__h6704,
       y__h6748,
       y__h6805,
       y__h6807,
       y__h6851,
       y__h6908,
       y__h6910,
       y__h6954,
       y__h8337,
       y__h8396,
       y__h8501,
       y__h8606,
       y__h8711,
       y__h8816,
       y__h8921,
       y__h9026,
       y__h9131,
       y__h9236,
       y__h9341,
       y__h9446,
       y__h9551,
       y__h9656,
       y__h9761,
       y__h9906,
       y__h9963;

  // action method get_A
  assign RDY_get_A = !val_a_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !val_a_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !val_b_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !val_b_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !val_c_rv_port1__read[32] ;
  assign CAN_FIRE_get_C = !val_c_rv_port1__read[32] ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_select
  assign RDY_get_select = 1'd1 ;
  assign CAN_FIRE_get_select = 1'd1 ;
  assign WILL_FIRE_get_select = EN_get_select ;

  // actionvalue method get_output
  assign get_output = val_mac_rv[31:0] ;
  assign RDY_get_output = val_mac_rv[32] && got_result ;
  assign CAN_FIRE_get_output = val_mac_rv[32] && got_result ;
  assign WILL_FIRE_get_output = EN_get_output ;

  // rule RL_rl_start_MAC
  assign CAN_FIRE_RL_rl_start_MAC =
	     val_a_rv[16] && val_b_rv[16] && val_c_rv[32] && !start_done ;
  assign WILL_FIRE_RL_rl_start_MAC = CAN_FIRE_RL_rl_start_MAC ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     start_done && got_A && got_B && got_C && counter != 5'd0 &&
	     finish ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add =
	     val_mul_rv[32] && start_done && mul_done && !add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_add = CAN_FIRE_RL_rl_add ;

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul =
	     !val_mul_rv_port1__read[32] && start_done && !mul_done &&
	     counter == 5'd0 &&
	     !add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_rl_done
  assign CAN_FIRE_RL_rl_done =
	     !val_mac_rv_port1__read[32] && start_done && add_done &&
	     !got_result ;
  assign WILL_FIRE_RL_rl_done = CAN_FIRE_RL_rl_done ;

  // rule RL_finished
  assign CAN_FIRE_RL_finished = start_done && got_result ;
  assign WILL_FIRE_RL_finished = CAN_FIRE_RL_finished ;

  // inputs to muxes for submodule ports
  assign MUX_temp_write_1__SEL_1 = WILL_FIRE_RL_rl_multiply && inpB[0] ;
  assign MUX_counter_write_1__VAL_2 = counter - 5'd1 ;
  assign MUX_inpA_write_1__VAL_2 = { inpA[14:0], 1'd0 } ;
  assign MUX_inpB_write_1__VAL_2 = { 1'd0, inpB[15:1] } ;
  assign MUX_mul_out_write_1__VAL_1 = { {16{temp[15]}}, temp } ;
  assign MUX_temp_write_1__VAL_1 =
	     (counter == 5'd1) ?
	       temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d181 :
	       temp_5_BIT_15_6_XOR_inpA_7_BIT_15_82_83_XOR_te_ETC___d279 ;

  // inlined wires
  assign val_a_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign val_a_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_a_rv_port0__write_1 : val_a_rv ;
  assign val_a_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign val_a_rv_port2__read =
	     EN_get_A ? val_a_rv_port1__write_1 : val_a_rv_port1__read ;
  assign val_b_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_a_rv_port0__write_1 : val_b_rv ;
  assign val_b_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign val_b_rv_port2__read =
	     EN_get_B ? val_b_rv_port1__write_1 : val_b_rv_port1__read ;
  assign val_c_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign val_c_rv_port1__read =
	     CAN_FIRE_RL_rl_start_MAC ? val_c_rv_port0__write_1 : val_c_rv ;
  assign val_c_rv_port1__write_1 = { 1'd1, get_C_c } ;
  assign val_c_rv_port2__read =
	     EN_get_C ? val_c_rv_port1__write_1 : val_c_rv_port1__read ;
  assign val_mul_rv_port1__read =
	     CAN_FIRE_RL_rl_add ? val_c_rv_port0__write_1 : val_mul_rv ;
  assign val_mul_rv_port1__write_1 = { 1'd1, mul_out } ;
  assign val_mul_rv_port2__read =
	     CAN_FIRE_RL_rl_mul ?
	       val_mul_rv_port1__write_1 :
	       val_mul_rv_port1__read ;
  assign val_mac_rv_port1__read =
	     EN_get_output ? val_c_rv_port0__write_1 : val_mac_rv ;
  assign val_mac_rv_port1__write_1 = { 1'd1, add_out } ;
  assign val_mac_rv_port2__read =
	     CAN_FIRE_RL_rl_done ?
	       val_mac_rv_port1__write_1 :
	       val_mac_rv_port1__read ;

  // register add_done
  assign add_done_D_IN = !WILL_FIRE_RL_rl_done ;
  assign add_done_EN = WILL_FIRE_RL_rl_done || WILL_FIRE_RL_rl_add ;

  // register add_out
  assign add_out_D_IN =
	     { x__h12165 ^ y__h12166,
	       x__h15415 ^ y__h15416,
	       mul_out_01_BIT_29_19_XOR_inpC_12_BIT_29_20_22__ETC___d544 } ;
  assign add_out_EN = CAN_FIRE_RL_rl_add ;

  // register counter
  assign counter_D_IN =
	     WILL_FIRE_RL_finished ? 5'd9 : MUX_counter_write_1__VAL_2 ;
  assign counter_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_finished ;

  // register finish
  assign finish_D_IN = !WILL_FIRE_RL_rl_mul ;
  assign finish_EN = WILL_FIRE_RL_rl_mul || WILL_FIRE_RL_finished ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_finished ;
  assign got_A_EN = WILL_FIRE_RL_finished || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_finished ;
  assign got_B_EN = WILL_FIRE_RL_finished || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !WILL_FIRE_RL_finished ;
  assign got_C_EN = WILL_FIRE_RL_finished || EN_get_C ;

  // register got_result
  assign got_result_D_IN = !WILL_FIRE_RL_finished ;
  assign got_result_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_done ;

  // register inpA
  assign inpA_D_IN =
	     WILL_FIRE_RL_rl_start_MAC ?
	       val_a_rv[15:0] :
	       MUX_inpA_write_1__VAL_2 ;
  assign inpA_EN = WILL_FIRE_RL_rl_start_MAC || WILL_FIRE_RL_rl_multiply ;

  // register inpB
  assign inpB_D_IN =
	     WILL_FIRE_RL_rl_start_MAC ?
	       val_b_rv[15:0] :
	       MUX_inpB_write_1__VAL_2 ;
  assign inpB_EN = WILL_FIRE_RL_rl_start_MAC || WILL_FIRE_RL_rl_multiply ;

  // register inpC
  assign inpC_D_IN = val_c_rv[31:0] ;
  assign inpC_EN = CAN_FIRE_RL_rl_start_MAC ;

  // register mul_done
  assign mul_done_D_IN = !WILL_FIRE_RL_finished ;
  assign mul_done_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_mul ;

  // register mul_out
  assign mul_out_D_IN =
	     WILL_FIRE_RL_rl_mul ?
	       MUX_mul_out_write_1__VAL_1 :
	       val_mul_rv[31:0] ;
  assign mul_out_EN = WILL_FIRE_RL_rl_mul || WILL_FIRE_RL_rl_add ;

  // register prepmul
  assign prepmul_D_IN = 1'b0 ;
  assign prepmul_EN = 1'b0 ;

  // register select
  assign select_D_IN = 1'b0 ;
  assign select_EN = 1'b0 ;

  // register start_done
  assign start_done_D_IN = !WILL_FIRE_RL_finished ;
  assign start_done_EN = WILL_FIRE_RL_finished || WILL_FIRE_RL_rl_start_MAC ;

  // register temp
  assign temp_D_IN =
	     MUX_temp_write_1__SEL_1 ? MUX_temp_write_1__VAL_1 : 16'd0 ;
  assign temp_EN =
	     WILL_FIRE_RL_rl_multiply && inpB[0] || WILL_FIRE_RL_rl_mul ;

  // register val_a_rv
  assign val_a_rv_D_IN = val_a_rv_port2__read ;
  assign val_a_rv_EN = 1'b1 ;

  // register val_b_rv
  assign val_b_rv_D_IN = val_b_rv_port2__read ;
  assign val_b_rv_EN = 1'b1 ;

  // register val_c_rv
  assign val_c_rv_D_IN = val_c_rv_port2__read ;
  assign val_c_rv_EN = 1'b1 ;

  // register val_mac_rv
  assign val_mac_rv_D_IN = val_mac_rv_port2__read ;
  assign val_mac_rv_EN = 1'b1 ;

  // register val_mul_rv
  assign val_mul_rv_D_IN = val_mul_rv_port2__read ;
  assign val_mul_rv_EN = 1'b1 ;

  // remaining internal signals
  assign INV_inpA__q1 = ~inpA ;
  assign mul_out_01_BIT_11_91_XOR_inpC_12_BIT_11_92_94__ETC___d535 =
	     { x__h16498 ^ y__h16499,
	       x__h16555 ^ y__h16556,
	       mul_out_01_BIT_9_99_XOR_inpC_12_BIT_9_00_02_XO_ETC___d534 } ;
  assign mul_out_01_BIT_13_83_XOR_inpC_12_BIT_13_84_86__ETC___d536 =
	     { x__h16384 ^ y__h16385,
	       x__h16441 ^ y__h16442,
	       mul_out_01_BIT_11_91_XOR_inpC_12_BIT_11_92_94__ETC___d535 } ;
  assign mul_out_01_BIT_15_75_XOR_inpC_12_BIT_15_76_78__ETC___d537 =
	     { x__h16270 ^ y__h16271,
	       x__h16327 ^ y__h16328,
	       mul_out_01_BIT_13_83_XOR_inpC_12_BIT_13_84_86__ETC___d536 } ;
  assign mul_out_01_BIT_17_67_XOR_inpC_12_BIT_17_68_70__ETC___d538 =
	     { x__h16156 ^ y__h16157,
	       x__h16213 ^ y__h16214,
	       mul_out_01_BIT_15_75_XOR_inpC_12_BIT_15_76_78__ETC___d537 } ;
  assign mul_out_01_BIT_19_59_XOR_inpC_12_BIT_19_60_62__ETC___d539 =
	     { x__h16042 ^ y__h16043,
	       x__h16099 ^ y__h16100,
	       mul_out_01_BIT_17_67_XOR_inpC_12_BIT_17_68_70__ETC___d538 } ;
  assign mul_out_01_BIT_21_51_XOR_inpC_12_BIT_21_52_54__ETC___d540 =
	     { x__h15928 ^ y__h15929,
	       x__h15985 ^ y__h15986,
	       mul_out_01_BIT_19_59_XOR_inpC_12_BIT_19_60_62__ETC___d539 } ;
  assign mul_out_01_BIT_23_43_XOR_inpC_12_BIT_23_44_46__ETC___d541 =
	     { x__h15814 ^ y__h15815,
	       x__h15871 ^ y__h15872,
	       mul_out_01_BIT_21_51_XOR_inpC_12_BIT_21_52_54__ETC___d540 } ;
  assign mul_out_01_BIT_25_35_XOR_inpC_12_BIT_25_36_38__ETC___d542 =
	     { x__h15700 ^ y__h15701,
	       x__h15757 ^ y__h15758,
	       mul_out_01_BIT_23_43_XOR_inpC_12_BIT_23_44_46__ETC___d541 } ;
  assign mul_out_01_BIT_27_27_XOR_inpC_12_BIT_27_28_30__ETC___d543 =
	     { x__h15586 ^ y__h15587,
	       x__h15643 ^ y__h15644,
	       mul_out_01_BIT_25_35_XOR_inpC_12_BIT_25_36_38__ETC___d542 } ;
  assign mul_out_01_BIT_29_19_XOR_inpC_12_BIT_29_20_22__ETC___d544 =
	     { x__h15472 ^ y__h15473,
	       x__h15529 ^ y__h15530,
	       mul_out_01_BIT_27_27_XOR_inpC_12_BIT_27_28_30__ETC___d543 } ;
  assign mul_out_01_BIT_3_23_XOR_inpC_12_BIT_3_24_26_XO_ETC___d531 =
	     { x__h16954 ^ y__h16955,
	       x__h17011 ^ y__h17012,
	       x__h17068 ^ y__h17069,
	       mul_out[0] ^ inpC[0] } ;
  assign mul_out_01_BIT_5_15_XOR_inpC_12_BIT_5_16_18_XO_ETC___d532 =
	     { x__h16840 ^ y__h16841,
	       x__h16897 ^ y__h16898,
	       mul_out_01_BIT_3_23_XOR_inpC_12_BIT_3_24_26_XO_ETC___d531 } ;
  assign mul_out_01_BIT_7_07_XOR_inpC_12_BIT_7_08_10_XO_ETC___d533 =
	     { x__h16726 ^ y__h16727,
	       x__h16783 ^ y__h16784,
	       mul_out_01_BIT_5_15_XOR_inpC_12_BIT_5_16_18_XO_ETC___d532 } ;
  assign mul_out_01_BIT_9_99_XOR_inpC_12_BIT_9_00_02_XO_ETC___d534 =
	     { x__h16612 ^ y__h16613,
	       x__h16669 ^ y__h16670,
	       mul_out_01_BIT_7_07_XOR_inpC_12_BIT_7_08_10_XO_ETC___d533 } ;
  assign temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d179 =
	     { x__h5923 ^ y__h5924,
	       x__h6026 ^ y__h6027,
	       temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d178 } ;
  assign temp_5_BIT_11_3_XOR_inpA_7_BIT_11_93_95_XOR_te_ETC___d277 =
	     { x__h10076 ^ y__h10077,
	       x__h10133 ^ y__h10134,
	       temp_5_BIT_9_1_XOR_inpA_7_BIT_9_99_01_XOR_temp_ETC___d276 } ;
  assign temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d180 =
	     { x__h5717 ^ y__h5718,
	       x__h5820 ^ y__h5821,
	       temp_5_BIT_11_3_XOR_INV_inpA_7_8_BIT_11_3_XOR__ETC___d179 } ;
  assign temp_5_BIT_13_5_XOR_inpA_7_BIT_13_87_89_XOR_te_ETC___d278 =
	     { x__h9962 ^ y__h9963,
	       x__h10019 ^ y__h10020,
	       temp_5_BIT_11_3_XOR_inpA_7_BIT_11_93_95_XOR_te_ETC___d277 } ;
  assign temp_5_BIT_15_6_XOR_INV_inpA_7_8_BIT_15_9_XOR__ETC___d181 =
	     { x__h2706 ^ y__h2707,
	       x__h5614 ^ y__h5615,
	       temp_5_BIT_13_5_XOR_INV_inpA_7_8_BIT_13_1_XOR__ETC___d180 } ;
  assign temp_5_BIT_15_6_XOR_inpA_7_BIT_15_82_83_XOR_te_ETC___d279 =
	     { x__h8336 ^ y__h8337,
	       x__h9905 ^ y__h9906,
	       temp_5_BIT_13_5_XOR_inpA_7_BIT_13_87_89_XOR_te_ETC___d278 } ;
  assign temp_5_BIT_3_15_XOR_INV_inpA_7_8_BIT_3_1_XOR_I_ETC___d175 =
	     { x__h6747 ^ y__h6748,
	       x__h6850 ^ y__h6851,
	       x__h6953 ^ y__h6954,
	       temp[0] ^ ~INV_inpA__q1[0] } ;
  assign temp_5_BIT_3_15_XOR_inpA_7_BIT_3_17_19_XOR_tem_ETC___d273 =
	     { x__h10532 ^ y__h10533,
	       x__h10589 ^ y__h10590,
	       x__h10646 ^ y__h10647,
	       temp[0] ^ inpA[0] } ;
  assign temp_5_BIT_5_07_XOR_INV_inpA_7_8_BIT_5_9_XOR_I_ETC___d176 =
	     { x__h6541 ^ y__h6542,
	       x__h6644 ^ y__h6645,
	       temp_5_BIT_3_15_XOR_INV_inpA_7_8_BIT_3_1_XOR_I_ETC___d175 } ;
  assign temp_5_BIT_5_07_XOR_inpA_7_BIT_5_11_13_XOR_tem_ETC___d274 =
	     { x__h10418 ^ y__h10419,
	       x__h10475 ^ y__h10476,
	       temp_5_BIT_3_15_XOR_inpA_7_BIT_3_17_19_XOR_tem_ETC___d273 } ;
  assign temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d177 =
	     { x__h6335 ^ y__h6336,
	       x__h6438 ^ y__h6439,
	       temp_5_BIT_5_07_XOR_INV_inpA_7_8_BIT_5_9_XOR_I_ETC___d176 } ;
  assign temp_5_BIT_7_9_XOR_inpA_7_BIT_7_05_07_XOR_temp_ETC___d275 =
	     { x__h10304 ^ y__h10305,
	       x__h10361 ^ y__h10362,
	       temp_5_BIT_5_07_XOR_inpA_7_BIT_5_11_13_XOR_tem_ETC___d274 } ;
  assign temp_5_BIT_9_1_XOR_INV_inpA_7_8_BIT_9_5_XOR_IN_ETC___d178 =
	     { x__h6129 ^ y__h6130,
	       x__h6232 ^ y__h6233,
	       temp_5_BIT_7_9_XOR_INV_inpA_7_8_BIT_7_7_XOR_IN_ETC___d177 } ;
  assign temp_5_BIT_9_1_XOR_inpA_7_BIT_9_99_01_XOR_temp_ETC___d276 =
	     { x__h10190 ^ y__h10191,
	       x__h10247 ^ y__h10248,
	       temp_5_BIT_7_9_XOR_inpA_7_BIT_7_05_07_XOR_temp_ETC___d275 } ;
  assign x__h10019 = temp[12] ^ inpA[12] ;
  assign x__h10076 = temp[11] ^ inpA[11] ;
  assign x__h10133 = temp[10] ^ inpA[10] ;
  assign x__h10190 = temp[9] ^ inpA[9] ;
  assign x__h10247 = temp[8] ^ inpA[8] ;
  assign x__h10304 = temp[7] ^ inpA[7] ;
  assign x__h10361 = temp[6] ^ inpA[6] ;
  assign x__h10418 = temp[5] ^ inpA[5] ;
  assign x__h10475 = temp[4] ^ inpA[4] ;
  assign x__h10532 = temp[3] ^ inpA[3] ;
  assign x__h10589 = temp[2] ^ inpA[2] ;
  assign x__h10646 = temp[1] ^ inpA[1] ;
  assign x__h12165 = mul_out[31] ^ inpC[31] ;
  assign x__h12225 = mul_out[30] & inpC[30] ;
  assign x__h12330 = mul_out[29] & inpC[29] ;
  assign x__h12435 = mul_out[28] & inpC[28] ;
  assign x__h12540 = mul_out[27] & inpC[27] ;
  assign x__h12645 = mul_out[26] & inpC[26] ;
  assign x__h12750 = mul_out[25] & inpC[25] ;
  assign x__h12855 = mul_out[24] & inpC[24] ;
  assign x__h12960 = mul_out[23] & inpC[23] ;
  assign x__h13065 = mul_out[22] & inpC[22] ;
  assign x__h13170 = mul_out[21] & inpC[21] ;
  assign x__h13275 = mul_out[20] & inpC[20] ;
  assign x__h13380 = mul_out[19] & inpC[19] ;
  assign x__h13485 = mul_out[18] & inpC[18] ;
  assign x__h13590 = mul_out[17] & inpC[17] ;
  assign x__h13695 = mul_out[16] & inpC[16] ;
  assign x__h13800 = mul_out[15] & inpC[15] ;
  assign x__h13905 = mul_out[14] & inpC[14] ;
  assign x__h14010 = mul_out[13] & inpC[13] ;
  assign x__h14115 = mul_out[12] & inpC[12] ;
  assign x__h14220 = mul_out[11] & inpC[11] ;
  assign x__h14325 = mul_out[10] & inpC[10] ;
  assign x__h14430 = mul_out[9] & inpC[9] ;
  assign x__h14535 = mul_out[8] & inpC[8] ;
  assign x__h14640 = mul_out[7] & inpC[7] ;
  assign x__h14745 = mul_out[6] & inpC[6] ;
  assign x__h14850 = mul_out[5] & inpC[5] ;
  assign x__h14955 = mul_out[4] & inpC[4] ;
  assign x__h15060 = mul_out[3] & inpC[3] ;
  assign x__h15165 = mul_out[2] & inpC[2] ;
  assign x__h15270 = mul_out[1] & inpC[1] ;
  assign x__h15415 = mul_out[30] ^ inpC[30] ;
  assign x__h15472 = mul_out[29] ^ inpC[29] ;
  assign x__h15529 = mul_out[28] ^ inpC[28] ;
  assign x__h15586 = mul_out[27] ^ inpC[27] ;
  assign x__h15643 = mul_out[26] ^ inpC[26] ;
  assign x__h15700 = mul_out[25] ^ inpC[25] ;
  assign x__h15757 = mul_out[24] ^ inpC[24] ;
  assign x__h15814 = mul_out[23] ^ inpC[23] ;
  assign x__h15871 = mul_out[22] ^ inpC[22] ;
  assign x__h15928 = mul_out[21] ^ inpC[21] ;
  assign x__h15985 = mul_out[20] ^ inpC[20] ;
  assign x__h16042 = mul_out[19] ^ inpC[19] ;
  assign x__h16099 = mul_out[18] ^ inpC[18] ;
  assign x__h16156 = mul_out[17] ^ inpC[17] ;
  assign x__h16213 = mul_out[16] ^ inpC[16] ;
  assign x__h16270 = mul_out[15] ^ inpC[15] ;
  assign x__h16327 = mul_out[14] ^ inpC[14] ;
  assign x__h16384 = mul_out[13] ^ inpC[13] ;
  assign x__h16441 = mul_out[12] ^ inpC[12] ;
  assign x__h16498 = mul_out[11] ^ inpC[11] ;
  assign x__h16555 = mul_out[10] ^ inpC[10] ;
  assign x__h16612 = mul_out[9] ^ inpC[9] ;
  assign x__h16669 = mul_out[8] ^ inpC[8] ;
  assign x__h16726 = mul_out[7] ^ inpC[7] ;
  assign x__h16783 = mul_out[6] ^ inpC[6] ;
  assign x__h16840 = mul_out[5] ^ inpC[5] ;
  assign x__h16897 = mul_out[4] ^ inpC[4] ;
  assign x__h16954 = mul_out[3] ^ inpC[3] ;
  assign x__h17011 = mul_out[2] ^ inpC[2] ;
  assign x__h17068 = mul_out[1] ^ inpC[1] ;
  assign x__h2706 = temp[15] ^ y__h2709 ;
  assign x__h5568 = temp[14] & y__h5571 ;
  assign x__h5614 = temp[14] ^ y__h5571 ;
  assign x__h5671 = temp[13] & y__h5674 ;
  assign x__h5717 = temp[13] ^ y__h5674 ;
  assign x__h5774 = temp[12] & y__h5777 ;
  assign x__h5820 = temp[12] ^ y__h5777 ;
  assign x__h5877 = temp[11] & y__h5880 ;
  assign x__h5923 = temp[11] ^ y__h5880 ;
  assign x__h5980 = temp[10] & y__h5983 ;
  assign x__h6026 = temp[10] ^ y__h5983 ;
  assign x__h6083 = temp[9] & y__h6086 ;
  assign x__h6129 = temp[9] ^ y__h6086 ;
  assign x__h6186 = temp[8] & y__h6189 ;
  assign x__h6232 = temp[8] ^ y__h6189 ;
  assign x__h6289 = temp[7] & y__h6292 ;
  assign x__h6335 = temp[7] ^ y__h6292 ;
  assign x__h6392 = temp[6] & y__h6395 ;
  assign x__h6438 = temp[6] ^ y__h6395 ;
  assign x__h6495 = temp[5] & y__h6498 ;
  assign x__h6541 = temp[5] ^ y__h6498 ;
  assign x__h6598 = temp[4] & y__h6601 ;
  assign x__h6644 = temp[4] ^ y__h6601 ;
  assign x__h6701 = temp[3] & y__h6704 ;
  assign x__h6747 = temp[3] ^ y__h6704 ;
  assign x__h6804 = temp[2] & y__h6807 ;
  assign x__h6850 = temp[2] ^ y__h6807 ;
  assign x__h6907 = temp[1] & y__h6910 ;
  assign x__h6953 = temp[1] ^ y__h6910 ;
  assign x__h8336 = temp[15] ^ inpA[15] ;
  assign x__h8395 = temp[14] & inpA[14] ;
  assign x__h8500 = temp[13] & inpA[13] ;
  assign x__h8605 = temp[12] & inpA[12] ;
  assign x__h8710 = temp[11] & inpA[11] ;
  assign x__h8815 = temp[10] & inpA[10] ;
  assign x__h8920 = temp[9] & inpA[9] ;
  assign x__h9025 = temp[8] & inpA[8] ;
  assign x__h9130 = temp[7] & inpA[7] ;
  assign x__h9235 = temp[6] & inpA[6] ;
  assign x__h9340 = temp[5] & inpA[5] ;
  assign x__h9445 = temp[4] & inpA[4] ;
  assign x__h9550 = temp[3] & inpA[3] ;
  assign x__h9655 = temp[2] & inpA[2] ;
  assign x__h9760 = temp[1] & inpA[1] ;
  assign x__h9905 = temp[14] ^ inpA[14] ;
  assign x__h9962 = temp[13] ^ inpA[13] ;
  assign y__h10020 = x__h8710 | y__h8711 ;
  assign y__h10077 = x__h8815 | y__h8816 ;
  assign y__h10134 = x__h8920 | y__h8921 ;
  assign y__h10191 = x__h9025 | y__h9026 ;
  assign y__h10248 = x__h9130 | y__h9131 ;
  assign y__h10305 = x__h9235 | y__h9236 ;
  assign y__h10362 = x__h9340 | y__h9341 ;
  assign y__h10419 = x__h9445 | y__h9446 ;
  assign y__h10476 = x__h9550 | y__h9551 ;
  assign y__h10533 = x__h9655 | y__h9656 ;
  assign y__h10590 = x__h9760 | y__h9761 ;
  assign y__h10647 = temp[0] & inpA[0] ;
  assign y__h12166 = x__h12225 | y__h12226 ;
  assign y__h12226 = x__h15415 & y__h15416 ;
  assign y__h12331 = x__h15472 & y__h15473 ;
  assign y__h12436 = x__h15529 & y__h15530 ;
  assign y__h12541 = x__h15586 & y__h15587 ;
  assign y__h12646 = x__h15643 & y__h15644 ;
  assign y__h12751 = x__h15700 & y__h15701 ;
  assign y__h12856 = x__h15757 & y__h15758 ;
  assign y__h12961 = x__h15814 & y__h15815 ;
  assign y__h13066 = x__h15871 & y__h15872 ;
  assign y__h13171 = x__h15928 & y__h15929 ;
  assign y__h13276 = x__h15985 & y__h15986 ;
  assign y__h13381 = x__h16042 & y__h16043 ;
  assign y__h13486 = x__h16099 & y__h16100 ;
  assign y__h13591 = x__h16156 & y__h16157 ;
  assign y__h13696 = x__h16213 & y__h16214 ;
  assign y__h13801 = x__h16270 & y__h16271 ;
  assign y__h13906 = x__h16327 & y__h16328 ;
  assign y__h14011 = x__h16384 & y__h16385 ;
  assign y__h14116 = x__h16441 & y__h16442 ;
  assign y__h14221 = x__h16498 & y__h16499 ;
  assign y__h14326 = x__h16555 & y__h16556 ;
  assign y__h14431 = x__h16612 & y__h16613 ;
  assign y__h14536 = x__h16669 & y__h16670 ;
  assign y__h14641 = x__h16726 & y__h16727 ;
  assign y__h14746 = x__h16783 & y__h16784 ;
  assign y__h14851 = x__h16840 & y__h16841 ;
  assign y__h14956 = x__h16897 & y__h16898 ;
  assign y__h15061 = x__h16954 & y__h16955 ;
  assign y__h15166 = x__h17011 & y__h17012 ;
  assign y__h15271 = x__h17068 & y__h17069 ;
  assign y__h15416 = x__h12330 | y__h12331 ;
  assign y__h15473 = x__h12435 | y__h12436 ;
  assign y__h15530 = x__h12540 | y__h12541 ;
  assign y__h15587 = x__h12645 | y__h12646 ;
  assign y__h15644 = x__h12750 | y__h12751 ;
  assign y__h15701 = x__h12855 | y__h12856 ;
  assign y__h15758 = x__h12960 | y__h12961 ;
  assign y__h15815 = x__h13065 | y__h13066 ;
  assign y__h15872 = x__h13170 | y__h13171 ;
  assign y__h15929 = x__h13275 | y__h13276 ;
  assign y__h15986 = x__h13380 | y__h13381 ;
  assign y__h16043 = x__h13485 | y__h13486 ;
  assign y__h16100 = x__h13590 | y__h13591 ;
  assign y__h16157 = x__h13695 | y__h13696 ;
  assign y__h16214 = x__h13800 | y__h13801 ;
  assign y__h16271 = x__h13905 | y__h13906 ;
  assign y__h16328 = x__h14010 | y__h14011 ;
  assign y__h16385 = x__h14115 | y__h14116 ;
  assign y__h16442 = x__h14220 | y__h14221 ;
  assign y__h16499 = x__h14325 | y__h14326 ;
  assign y__h16556 = x__h14430 | y__h14431 ;
  assign y__h16613 = x__h14535 | y__h14536 ;
  assign y__h16670 = x__h14640 | y__h14641 ;
  assign y__h16727 = x__h14745 | y__h14746 ;
  assign y__h16784 = x__h14850 | y__h14851 ;
  assign y__h16841 = x__h14955 | y__h14956 ;
  assign y__h16898 = x__h15060 | y__h15061 ;
  assign y__h16955 = x__h15165 | y__h15166 ;
  assign y__h17012 = x__h15270 | y__h15271 ;
  assign y__h17069 = mul_out[0] & inpC[0] ;
  assign y__h2707 = x__h5568 | y__h5569 ;
  assign y__h2709 = INV_inpA__q1[15] ^ y__h3186 ;
  assign y__h3186 = INV_inpA__q1[14] & y__h3292 ;
  assign y__h3292 = INV_inpA__q1[13] & y__h3395 ;
  assign y__h3395 = INV_inpA__q1[12] & y__h3498 ;
  assign y__h3498 = INV_inpA__q1[11] & y__h3601 ;
  assign y__h3601 = INV_inpA__q1[10] & y__h3704 ;
  assign y__h3704 = INV_inpA__q1[9] & y__h3807 ;
  assign y__h3807 = INV_inpA__q1[8] & y__h3910 ;
  assign y__h3910 = INV_inpA__q1[7] & y__h4013 ;
  assign y__h4013 = INV_inpA__q1[6] & y__h4116 ;
  assign y__h4116 = INV_inpA__q1[5] & y__h4219 ;
  assign y__h4219 = INV_inpA__q1[4] & y__h4322 ;
  assign y__h4322 = INV_inpA__q1[3] & y__h4425 ;
  assign y__h4425 = INV_inpA__q1[2] & y__h4528 ;
  assign y__h4528 = INV_inpA__q1[1] & INV_inpA__q1[0] ;
  assign y__h5569 = x__h5614 & y__h5615 ;
  assign y__h5571 = INV_inpA__q1[14] ^ y__h3292 ;
  assign y__h5615 = x__h5671 | y__h5672 ;
  assign y__h5672 = x__h5717 & y__h5718 ;
  assign y__h5674 = INV_inpA__q1[13] ^ y__h3395 ;
  assign y__h5718 = x__h5774 | y__h5775 ;
  assign y__h5775 = x__h5820 & y__h5821 ;
  assign y__h5777 = INV_inpA__q1[12] ^ y__h3498 ;
  assign y__h5821 = x__h5877 | y__h5878 ;
  assign y__h5878 = x__h5923 & y__h5924 ;
  assign y__h5880 = INV_inpA__q1[11] ^ y__h3601 ;
  assign y__h5924 = x__h5980 | y__h5981 ;
  assign y__h5981 = x__h6026 & y__h6027 ;
  assign y__h5983 = INV_inpA__q1[10] ^ y__h3704 ;
  assign y__h6027 = x__h6083 | y__h6084 ;
  assign y__h6084 = x__h6129 & y__h6130 ;
  assign y__h6086 = INV_inpA__q1[9] ^ y__h3807 ;
  assign y__h6130 = x__h6186 | y__h6187 ;
  assign y__h6187 = x__h6232 & y__h6233 ;
  assign y__h6189 = INV_inpA__q1[8] ^ y__h3910 ;
  assign y__h6233 = x__h6289 | y__h6290 ;
  assign y__h6290 = x__h6335 & y__h6336 ;
  assign y__h6292 = INV_inpA__q1[7] ^ y__h4013 ;
  assign y__h6336 = x__h6392 | y__h6393 ;
  assign y__h6393 = x__h6438 & y__h6439 ;
  assign y__h6395 = INV_inpA__q1[6] ^ y__h4116 ;
  assign y__h6439 = x__h6495 | y__h6496 ;
  assign y__h6496 = x__h6541 & y__h6542 ;
  assign y__h6498 = INV_inpA__q1[5] ^ y__h4219 ;
  assign y__h6542 = x__h6598 | y__h6599 ;
  assign y__h6599 = x__h6644 & y__h6645 ;
  assign y__h6601 = INV_inpA__q1[4] ^ y__h4322 ;
  assign y__h6645 = x__h6701 | y__h6702 ;
  assign y__h6702 = x__h6747 & y__h6748 ;
  assign y__h6704 = INV_inpA__q1[3] ^ y__h4425 ;
  assign y__h6748 = x__h6804 | y__h6805 ;
  assign y__h6805 = x__h6850 & y__h6851 ;
  assign y__h6807 = INV_inpA__q1[2] ^ y__h4528 ;
  assign y__h6851 = x__h6907 | y__h6908 ;
  assign y__h6908 = x__h6953 & y__h6954 ;
  assign y__h6910 = INV_inpA__q1[1] ^ INV_inpA__q1[0] ;
  assign y__h6954 = temp[0] & ~INV_inpA__q1[0] ;
  assign y__h8337 = x__h8395 | y__h8396 ;
  assign y__h8396 = x__h9905 & y__h9906 ;
  assign y__h8501 = x__h9962 & y__h9963 ;
  assign y__h8606 = x__h10019 & y__h10020 ;
  assign y__h8711 = x__h10076 & y__h10077 ;
  assign y__h8816 = x__h10133 & y__h10134 ;
  assign y__h8921 = x__h10190 & y__h10191 ;
  assign y__h9026 = x__h10247 & y__h10248 ;
  assign y__h9131 = x__h10304 & y__h10305 ;
  assign y__h9236 = x__h10361 & y__h10362 ;
  assign y__h9341 = x__h10418 & y__h10419 ;
  assign y__h9446 = x__h10475 & y__h10476 ;
  assign y__h9551 = x__h10532 & y__h10533 ;
  assign y__h9656 = x__h10589 & y__h10590 ;
  assign y__h9761 = x__h10646 & y__h10647 ;
  assign y__h9906 = x__h8500 | y__h8501 ;
  assign y__h9963 = x__h8605 | y__h8606 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter <= `BSV_ASSIGNMENT_DELAY 5'd9;
	finish <= `BSV_ASSIGNMENT_DELAY 1'd1;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpB <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inpC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	prepmul <= `BSV_ASSIGNMENT_DELAY 1'd0;
	select <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp <= `BSV_ASSIGNMENT_DELAY 16'd0;
	val_a_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_b_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_c_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_mac_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	val_mul_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_out_EN) add_out <= `BSV_ASSIGNMENT_DELAY add_out_D_IN;
	if (counter_EN) counter <= `BSV_ASSIGNMENT_DELAY counter_D_IN;
	if (finish_EN) finish <= `BSV_ASSIGNMENT_DELAY finish_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_result_EN)
	  got_result <= `BSV_ASSIGNMENT_DELAY got_result_D_IN;
	if (inpA_EN) inpA <= `BSV_ASSIGNMENT_DELAY inpA_D_IN;
	if (inpB_EN) inpB <= `BSV_ASSIGNMENT_DELAY inpB_D_IN;
	if (inpC_EN) inpC <= `BSV_ASSIGNMENT_DELAY inpC_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_out_EN) mul_out <= `BSV_ASSIGNMENT_DELAY mul_out_D_IN;
	if (prepmul_EN) prepmul <= `BSV_ASSIGNMENT_DELAY prepmul_D_IN;
	if (select_EN) select <= `BSV_ASSIGNMENT_DELAY select_D_IN;
	if (start_done_EN)
	  start_done <= `BSV_ASSIGNMENT_DELAY start_done_D_IN;
	if (temp_EN) temp <= `BSV_ASSIGNMENT_DELAY temp_D_IN;
	if (val_a_rv_EN) val_a_rv <= `BSV_ASSIGNMENT_DELAY val_a_rv_D_IN;
	if (val_b_rv_EN) val_b_rv <= `BSV_ASSIGNMENT_DELAY val_b_rv_D_IN;
	if (val_c_rv_EN) val_c_rv <= `BSV_ASSIGNMENT_DELAY val_c_rv_D_IN;
	if (val_mac_rv_EN)
	  val_mac_rv <= `BSV_ASSIGNMENT_DELAY val_mac_rv_D_IN;
	if (val_mul_rv_EN)
	  val_mul_rv <= `BSV_ASSIGNMENT_DELAY val_mul_rv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_out = 32'hAAAAAAAA;
    counter = 5'h0A;
    finish = 1'h0;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_result = 1'h0;
    inpA = 16'hAAAA;
    inpB = 16'hAAAA;
    inpC = 32'hAAAAAAAA;
    mul_done = 1'h0;
    mul_out = 32'hAAAAAAAA;
    prepmul = 1'h0;
    select = 1'h0;
    start_done = 1'h0;
    temp = 16'hAAAA;
    val_a_rv = 17'h0AAAA;
    val_b_rv = 17'h0AAAA;
    val_c_rv = 33'h0AAAAAAAA;
    val_mac_rv = 33'h0AAAAAAAA;
    val_mul_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_MAC) $display("start_MAC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_multiply) $display("Multiply");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_add) $display("Add");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add) $display("Add comp");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_mul) $display("Mul");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_done) $display("Done");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_finished) $display("finished");
  end
  // synopsys translate_on
endmodule  // mkintmul

