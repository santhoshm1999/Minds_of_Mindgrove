//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Nov 26 01:07:21 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inp_a                  O     1
// RDY_get_inp_b                  O     1
// get_result                     O    16 reg
// RDY_get_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inp_a_inp_A                I    16
// get_inp_b_inp_B                I    16
// EN_get_inp_a                   I     1
// EN_get_inp_b                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPipelined_float_mul(CLK,
			     RST_N,

			     get_inp_a_inp_A,
			     EN_get_inp_a,
			     RDY_get_inp_a,

			     get_inp_b_inp_B,
			     EN_get_inp_b,
			     RDY_get_inp_b,

			     get_result,
			     RDY_get_result);
  input  CLK;
  input  RST_N;

  // action method get_inp_a
  input  [15 : 0] get_inp_a_inp_A;
  input  EN_get_inp_a;
  output RDY_get_inp_a;

  // action method get_inp_b
  input  [15 : 0] get_inp_b_inp_B;
  input  EN_get_inp_b;
  output RDY_get_inp_b;

  // value method get_result
  output [15 : 0] get_result;
  output RDY_get_result;

  // signals for module outputs
  wire [15 : 0] get_result;
  wire RDY_get_inp_a, RDY_get_inp_b, RDY_get_result;

  // inlined wires
  wire [16 : 0] fifo_a_rv_port0__write_1,
		fifo_a_rv_port1__read,
		fifo_a_rv_port1__write_1,
		fifo_a_rv_port2__read,
		fifo_b_rv_port1__read,
		fifo_b_rv_port1__write_1,
		fifo_b_rv_port2__read,
		fifo_res_rv_port1__read,
		fifo_res_rv_port1__write_1,
		fifo_res_rv_port2__read;
  wire fifo_res_rv_EN_port1__write;

  // register a
  reg [15 : 0] a;
  wire [15 : 0] a_D_IN;
  wire a_EN;

  // register b
  reg [15 : 0] b;
  wire [15 : 0] b_D_IN;
  wire b_EN;

  // register end_result
  reg [15 : 0] end_result;
  wire [15 : 0] end_result_D_IN;
  wire end_result_EN;

  // register exp_done
  reg exp_done;
  wire exp_done_D_IN, exp_done_EN;

  // register exp_mantissa
  reg [14 : 0] exp_mantissa;
  wire [14 : 0] exp_mantissa_D_IN;
  wire exp_mantissa_EN;

  // register exp_res
  reg [7 : 0] exp_res;
  wire [7 : 0] exp_res_D_IN;
  wire exp_res_EN;

  // register fifo_a_rv
  reg [16 : 0] fifo_a_rv;
  wire [16 : 0] fifo_a_rv_D_IN;
  wire fifo_a_rv_EN;

  // register fifo_b_rv
  reg [16 : 0] fifo_b_rv;
  wire [16 : 0] fifo_b_rv_D_IN;
  wire fifo_b_rv_EN;

  // register fifo_res_rv
  reg [16 : 0] fifo_res_rv;
  wire [16 : 0] fifo_res_rv_D_IN;
  wire fifo_res_rv_EN;

  // register get_r
  reg get_r;
  wire get_r_D_IN, get_r_EN;

  // register got_a
  reg got_a;
  wire got_a_D_IN, got_a_EN;

  // register got_b
  reg got_b;
  wire got_b_D_IN, got_b_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register mantissa_done
  reg mantissa_done;
  wire mantissa_done_D_IN, mantissa_done_EN;

  // register mul_count
  reg [3 : 0] mul_count;
  reg [3 : 0] mul_count_D_IN;
  wire mul_count_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_start
  reg mul_start;
  wire mul_start_D_IN, mul_start_EN;

  // register pack_done
  reg pack_done;
  wire pack_done_D_IN, pack_done_EN;

  // register res_deq_done
  reg res_deq_done;
  wire res_deq_done_D_IN, res_deq_done_EN;

  // register result_concatenated
  reg result_concatenated;
  wire result_concatenated_D_IN, result_concatenated_EN;

  // register sign_done
  reg sign_done;
  wire sign_done_D_IN, sign_done_EN;

  // register start_done
  reg start_done;
  wire start_done_D_IN, start_done_EN;

  // register tmp_a
  reg [15 : 0] tmp_a;
  wire [15 : 0] tmp_a_D_IN;
  wire tmp_a_EN;

  // register tmp_a_a
  reg [7 : 0] tmp_a_a;
  wire [7 : 0] tmp_a_a_D_IN;
  wire tmp_a_a_EN;

  // register tmp_b
  reg [7 : 0] tmp_b;
  wire [7 : 0] tmp_b_D_IN;
  wire tmp_b_EN;

  // register tmp_exp
  reg [7 : 0] tmp_exp;
  wire [7 : 0] tmp_exp_D_IN;
  wire tmp_exp_EN;

  // register tmp_fraction
  reg [15 : 0] tmp_fraction;
  wire [15 : 0] tmp_fraction_D_IN;
  wire tmp_fraction_EN;

  // register tmp_sign
  reg tmp_sign;
  wire tmp_sign_D_IN, tmp_sign_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_res_fifo_deq,
       CAN_FIRE_RL_reset_signals,
       CAN_FIRE_RL_rl_add_exp,
       CAN_FIRE_RL_rl_get_mul_res,
       CAN_FIRE_RL_rl_get_sign,
       CAN_FIRE_RL_rl_handling_zero,
       CAN_FIRE_RL_rl_mul_mantissa,
       CAN_FIRE_RL_rl_round_mantissa,
       CAN_FIRE_RL_rl_starting,
       CAN_FIRE_get_inp_a,
       CAN_FIRE_get_inp_b,
       WILL_FIRE_RL_res_fifo_deq,
       WILL_FIRE_RL_reset_signals,
       WILL_FIRE_RL_rl_add_exp,
       WILL_FIRE_RL_rl_get_mul_res,
       WILL_FIRE_RL_rl_get_sign,
       WILL_FIRE_RL_rl_handling_zero,
       WILL_FIRE_RL_rl_mul_mantissa,
       WILL_FIRE_RL_rl_round_mantissa,
       WILL_FIRE_RL_rl_starting,
       WILL_FIRE_get_inp_a,
       WILL_FIRE_get_inp_b;

  // inputs to muxes for submodule ports
  wire [16 : 0] MUX_fifo_res_rv_port1__write_1__VAL_1;
  wire [15 : 0] MUX_tmp_a_write_1__VAL_1, MUX_tmp_a_write_1__VAL_2;
  wire [7 : 0] MUX_tmp_b_write_1__VAL_1, MUX_tmp_b_write_1__VAL_2;
  wire [3 : 0] MUX_mul_count_write_1__VAL_2;
  wire MUX_handle_zero_write_1__SEL_1, MUX_sign_done_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5138;
  reg [31 : 0] v__h5187;
  reg [31 : 0] v__h5328;
  reg [31 : 0] v__h5376;
  reg [31 : 0] v__h8896;
  reg [31 : 0] v__h8943;
  reg [31 : 0] v__h25486;
  // synopsys translate_on

  // remaining internal signals
  wire [15 : 0] IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3,
		IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2,
		IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5,
		IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4,
		IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7;
  wire [14 : 0] IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386,
		IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351,
		IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385,
		IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350;
  wire [13 : 0] tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254;
  wire [11 : 0] tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253;
  wire [9 : 0] tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252;
  wire [7 : 0] IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6,
	       IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___fst__h15499,
	       exp___1__h9044,
	       tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251;
  wire [6 : 0] rounded_mantissa__h15498,
	       rounded_mantissa__h21956,
	       rounded_mantissa__h25186,
	       rounded_mantissa__h25268;
  wire [5 : 0] a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124,
	       tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250,
	       tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330;
  wire [4 : 0] tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347;
  wire [3 : 0] a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123,
	       tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249,
	       tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329;
  wire [1 : 0] tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248;
  wire start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130,
       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
       tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373,
       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338,
       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
       x__h15968,
       x__h16094,
       x__h16280,
       x__h16466,
       x__h16652,
       x__h16838,
       x__h17024,
       x__h2607,
       x__h2734,
       x__h2791,
       x__h2920,
       x__h2977,
       x__h3106,
       x__h3163,
       x__h3292,
       x__h3349,
       x__h3478,
       x__h3535,
       x__h3664,
       x__h3721,
       x__h3894,
       x__h4020,
       x__h4206,
       x__h4392,
       x__h4578,
       x__h4764,
       x__h4950,
       x__h6156,
       x__h6203,
       x__h6348,
       x__h6540,
       x__h6732,
       x__h6924,
       x__h7116,
       x__h7308,
       x__h7500,
       x__h7692,
       x__h7884,
       x__h8076,
       x__h8268,
       x__h8460,
       x__h8593,
       x__h8652,
       y__h10048,
       y__h10234,
       y__h10420,
       y__h10606,
       y__h12922,
       y__h13108,
       y__h13294,
       y__h13480,
       y__h13666,
       y__h13852,
       y__h16095,
       y__h16281,
       y__h16467,
       y__h16653,
       y__h16839,
       y__h17025,
       y__h19377,
       y__h19563,
       y__h19749,
       y__h19935,
       y__h20121,
       y__h20307,
       y__h20493,
       y__h2608,
       y__h2735,
       y__h2792,
       y__h2921,
       y__h2978,
       y__h3107,
       y__h3164,
       y__h3293,
       y__h3350,
       y__h3479,
       y__h3536,
       y__h3665,
       y__h3722,
       y__h4021,
       y__h4207,
       y__h4393,
       y__h4579,
       y__h4765,
       y__h4951,
       y__h6098,
       y__h6157,
       y__h6204,
       y__h6290,
       y__h6349,
       y__h6396,
       y__h6482,
       y__h6541,
       y__h6588,
       y__h6674,
       y__h6733,
       y__h6780,
       y__h6866,
       y__h6925,
       y__h6972,
       y__h7058,
       y__h7117,
       y__h7164,
       y__h7250,
       y__h7309,
       y__h7356,
       y__h7442,
       y__h7501,
       y__h7548,
       y__h7634,
       y__h7693,
       y__h7740,
       y__h7826,
       y__h7885,
       y__h7932,
       y__h8018,
       y__h8077,
       y__h8124,
       y__h8210,
       y__h8269,
       y__h8316,
       y__h8402,
       y__h8461,
       y__h8508,
       y__h8594,
       y__h8653,
       y__h8700,
       y__h9676,
       y__h9862;

  // action method get_inp_a
  assign RDY_get_inp_a = !fifo_a_rv_port1__read[16] ;
  assign CAN_FIRE_get_inp_a = !fifo_a_rv_port1__read[16] ;
  assign WILL_FIRE_get_inp_a = EN_get_inp_a ;

  // action method get_inp_b
  assign RDY_get_inp_b = !fifo_b_rv_port1__read[16] ;
  assign CAN_FIRE_get_inp_b = !fifo_b_rv_port1__read[16] ;
  assign WILL_FIRE_get_inp_b = EN_get_inp_b ;

  // value method get_result
  assign get_result = end_result ;
  assign RDY_get_result = res_deq_done ;

  // rule RL_rl_starting
  assign CAN_FIRE_RL_rl_starting =
	     fifo_a_rv[16] && fifo_b_rv[16] && !start_done ;
  assign WILL_FIRE_RL_rl_starting = CAN_FIRE_RL_rl_starting ;

  // rule RL_rl_get_sign
  assign CAN_FIRE_RL_rl_get_sign = start_done && !mul_done && !sign_done ;
  assign WILL_FIRE_RL_rl_get_sign = CAN_FIRE_RL_rl_get_sign ;

  // rule RL_rl_add_exp
  assign CAN_FIRE_RL_rl_add_exp =
	     start_done && !mul_done && sign_done && !exp_done &&
	     mul_count == 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_add_exp = CAN_FIRE_RL_rl_add_exp ;

  // rule RL_rl_mul_mantissa
  assign CAN_FIRE_RL_rl_mul_mantissa =
	     start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 &&
	     mul_count != 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_mul_mantissa = CAN_FIRE_RL_rl_mul_mantissa ;

  // rule RL_rl_round_mantissa
  assign CAN_FIRE_RL_rl_round_mantissa =
	     start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 &&
	     mul_count == 4'd0 &&
	     !mantissa_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_round_mantissa = CAN_FIRE_RL_rl_round_mantissa ;

  // rule RL_reset_signals
  assign CAN_FIRE_RL_reset_signals = result_concatenated ;
  assign WILL_FIRE_RL_reset_signals = result_concatenated ;

  // rule RL_res_fifo_deq
  assign CAN_FIRE_RL_res_fifo_deq = fifo_res_rv[16] && mul_done ;
  assign WILL_FIRE_RL_res_fifo_deq = CAN_FIRE_RL_res_fifo_deq ;

  // rule RL_rl_handling_zero
  assign CAN_FIRE_RL_rl_handling_zero =
	     !fifo_res_rv_port1__read[16] && start_done && handle_zero ;
  assign WILL_FIRE_RL_rl_handling_zero =
	     CAN_FIRE_RL_rl_handling_zero && !WILL_FIRE_RL_rl_get_sign ;

  // rule RL_rl_get_mul_res
  assign CAN_FIRE_RL_rl_get_mul_res =
	     !fifo_res_rv_port1__read[16] && start_done && !mul_done &&
	     mantissa_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_get_mul_res =
	     CAN_FIRE_RL_rl_get_mul_res && !result_concatenated &&
	     !WILL_FIRE_RL_rl_get_sign ;

  // inputs to muxes for submodule ports
  assign MUX_handle_zero_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ;
  assign MUX_sign_done_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ;
  assign MUX_fifo_res_rv_port1__write_1__VAL_1 =
	     { 1'd1, tmp_sign, exp_mantissa } ;
  assign MUX_mul_count_write_1__VAL_2 = mul_count - 4'd1 ;
  assign MUX_tmp_a_write_1__VAL_1 = { 8'd0, tmp_a_a } ;
  assign MUX_tmp_a_write_1__VAL_2 = { tmp_a[14:0], 1'd0 } ;
  assign MUX_tmp_b_write_1__VAL_1 = { 1'b1, b[6:0] } ;
  assign MUX_tmp_b_write_1__VAL_2 = { 1'd0, tmp_b[7:1] } ;

  // inlined wires
  assign fifo_a_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign fifo_a_rv_port1__read =
	     CAN_FIRE_RL_rl_starting ? fifo_a_rv_port0__write_1 : fifo_a_rv ;
  assign fifo_a_rv_port1__write_1 = { 1'd1, get_inp_a_inp_A } ;
  assign fifo_a_rv_port2__read =
	     EN_get_inp_a ? fifo_a_rv_port1__write_1 : fifo_a_rv_port1__read ;
  assign fifo_b_rv_port1__read =
	     CAN_FIRE_RL_rl_starting ? fifo_a_rv_port0__write_1 : fifo_b_rv ;
  assign fifo_b_rv_port1__write_1 = { 1'd1, get_inp_b_inp_B } ;
  assign fifo_b_rv_port2__read =
	     EN_get_inp_b ? fifo_b_rv_port1__write_1 : fifo_b_rv_port1__read ;
  assign fifo_res_rv_port1__read =
	     CAN_FIRE_RL_res_fifo_deq ?
	       fifo_a_rv_port0__write_1 :
	       fifo_res_rv ;
  assign fifo_res_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;
  assign fifo_res_rv_port1__write_1 =
	     WILL_FIRE_RL_rl_get_mul_res ?
	       MUX_fifo_res_rv_port1__write_1__VAL_1 :
	       17'd65536 ;
  assign fifo_res_rv_port2__read =
	     fifo_res_rv_EN_port1__write ?
	       fifo_res_rv_port1__write_1 :
	       fifo_res_rv_port1__read ;

  // register a
  assign a_D_IN = fifo_a_rv[15:0] ;
  assign a_EN = CAN_FIRE_RL_rl_starting ;

  // register b
  assign b_D_IN = fifo_b_rv[15:0] ;
  assign b_EN = CAN_FIRE_RL_rl_starting ;

  // register end_result
  assign end_result_D_IN = fifo_res_rv[15:0] ;
  assign end_result_EN = CAN_FIRE_RL_res_fifo_deq ;

  // register exp_done
  assign exp_done_D_IN = !result_concatenated ;
  assign exp_done_EN = result_concatenated || WILL_FIRE_RL_rl_add_exp ;

  // register exp_mantissa
  assign exp_mantissa_D_IN =
	     tmp_fraction[15] ?
	       IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351 :
	       IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386 ;
  assign exp_mantissa_EN = CAN_FIRE_RL_rl_round_mantissa ;

  // register exp_res
  assign exp_res_D_IN = 8'h0 ;
  assign exp_res_EN = 1'b0 ;

  // register fifo_a_rv
  assign fifo_a_rv_D_IN = fifo_a_rv_port2__read ;
  assign fifo_a_rv_EN = 1'b1 ;

  // register fifo_b_rv
  assign fifo_b_rv_D_IN = fifo_b_rv_port2__read ;
  assign fifo_b_rv_EN = 1'b1 ;

  // register fifo_res_rv
  assign fifo_res_rv_D_IN = fifo_res_rv_port2__read ;
  assign fifo_res_rv_EN = 1'b1 ;

  // register get_r
  assign get_r_D_IN = 1'b0 ;
  assign get_r_EN = 1'b0 ;

  // register got_a
  assign got_a_D_IN = 1'b0 ;
  assign got_a_EN = 1'b0 ;

  // register got_b
  assign got_b_D_IN = 1'b0 ;
  assign got_b_EN = 1'b0 ;

  // register handle_zero
  assign handle_zero_D_IN = MUX_handle_zero_write_1__SEL_1 ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ||
	     WILL_FIRE_RL_rl_handling_zero ;

  // register mantissa_done
  assign mantissa_done_D_IN = !result_concatenated ;
  assign mantissa_done_EN =
	     result_concatenated || WILL_FIRE_RL_rl_round_mantissa ;

  // register mul_count
  always@(result_concatenated or
	  WILL_FIRE_RL_rl_mul_mantissa or
	  MUX_mul_count_write_1__VAL_2 or WILL_FIRE_RL_rl_add_exp)
  case (1'b1)
    result_concatenated: mul_count_D_IN = 4'd8;
    WILL_FIRE_RL_rl_mul_mantissa:
	mul_count_D_IN = MUX_mul_count_write_1__VAL_2;
    WILL_FIRE_RL_rl_add_exp: mul_count_D_IN = 4'd8;
    default: mul_count_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign mul_count_EN =
	     WILL_FIRE_RL_rl_mul_mantissa || result_concatenated ||
	     WILL_FIRE_RL_rl_add_exp ;

  // register mul_done
  assign mul_done_D_IN = 1'd1 ;
  assign mul_done_EN =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;

  // register mul_start
  assign mul_start_D_IN = 1'b0 ;
  assign mul_start_EN = 1'b0 ;

  // register pack_done
  assign pack_done_D_IN = 1'b0 ;
  assign pack_done_EN = 1'b0 ;

  // register res_deq_done
  assign res_deq_done_D_IN = 1'd1 ;
  assign res_deq_done_EN = CAN_FIRE_RL_res_fifo_deq ;

  // register result_concatenated
  assign result_concatenated_D_IN =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;
  assign result_concatenated_EN =
	     result_concatenated || WILL_FIRE_RL_rl_get_mul_res ||
	     WILL_FIRE_RL_rl_handling_zero ;

  // register sign_done
  assign sign_done_D_IN = !result_concatenated ;
  assign sign_done_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     result_concatenated ;

  // register start_done
  assign start_done_D_IN = 1'd1 ;
  assign start_done_EN = fifo_a_rv[16] && fifo_b_rv[16] && !start_done ;

  // register tmp_a
  assign tmp_a_D_IN =
	     WILL_FIRE_RL_rl_add_exp ?
	       MUX_tmp_a_write_1__VAL_1 :
	       MUX_tmp_a_write_1__VAL_2 ;
  assign tmp_a_EN = WILL_FIRE_RL_rl_add_exp || WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_a_a
  assign tmp_a_a_D_IN = { 1'b1, a[6:0] } ;
  assign tmp_a_a_EN = MUX_sign_done_write_1__SEL_2 ;

  // register tmp_b
  assign tmp_b_D_IN =
	     MUX_sign_done_write_1__SEL_2 ?
	       MUX_tmp_b_write_1__VAL_1 :
	       MUX_tmp_b_write_1__VAL_2 ;
  assign tmp_b_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_exp
  assign tmp_exp_D_IN =
	     { x__h4950 ^ y__h4951,
	       x__h4764 ^ y__h4765,
	       a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124 } ;
  assign tmp_exp_EN = CAN_FIRE_RL_rl_add_exp ;

  // register tmp_fraction
  assign tmp_fraction_D_IN =
	     { x__h8593 ^ y__h8594,
	       y__h8700 ^ y__h8402,
	       tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254 } ;
  assign tmp_fraction_EN = WILL_FIRE_RL_rl_mul_mantissa && tmp_b[0] ;

  // register tmp_sign
  assign tmp_sign_D_IN = a[15] ^ b[15] ;
  assign tmp_sign_EN = MUX_sign_done_write_1__SEL_2 ;

  // remaining internal signals
  assign IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3 =
	     (~IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6 =
	     (~IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2 =
	     (~tmp_exp[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5 =
	     (~tmp_fraction[7]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4 =
	     (~tmp_fraction[8]) ? 16'd1 : 16'd0 ;
  assign IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386 =
	     (!tmp_fraction[6] ||
	      tmp_fraction[5:0] == 6'd0 && !tmp_fraction[7]) ?
	       { tmp_exp, tmp_fraction[13:7] } :
	       IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385 ;
  assign IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351 =
	     (!tmp_fraction[7] ||
	      tmp_fraction[6:0] == 7'd0 && !tmp_fraction[8]) ?
	       { exp___1__h9044, tmp_fraction[14:8] } :
	       IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350 ;
  assign IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (a[7] ^ b[7]) ? 8'd1 : 8'd0 ;
  assign IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7 =
	     (tmp_a[0] ^ tmp_fraction[0]) ? 16'd1 : 16'd0 ;
  assign IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385 =
	     (tmp_fraction[15] ^ y__h20493) ?
	       { exp___1__h9044, rounded_mantissa__h21956 } :
	       { tmp_exp, rounded_mantissa__h25268 } ;
  assign IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350 =
	     (y__h13852 & tmp_fraction[15]) ?
	       { _theResult___fst__h15499, rounded_mantissa__h15498 } :
	       { exp___1__h9044, rounded_mantissa__h25186 } ;
  assign _theResult___fst__h15499 =
	     { x__h17024 ^ y__h17025,
	       x__h16838 ^ y__h16839,
	       tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330 } ;
  assign a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123 =
	     { x__h4206 ^ y__h4207,
	       x__h4020 ^ y__h4021,
	       x__h3894 ^ IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6[0] } ;
  assign a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124 =
	     { x__h4578 ^ y__h4579,
	       x__h4392 ^ y__h4393,
	       a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123 } ;
  assign exp___1__h9044 =
	     { x__h17024,
	       x__h16838,
	       x__h16652,
	       x__h16466,
	       x__h16280,
	       x__h16094,
	       x__h15968,
	       IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign rounded_mantissa__h15498 =
	     { tmp_fraction[15] ^ y__h13852,
	       tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338 } ;
  assign rounded_mantissa__h21956 =
	     { tmp_fraction[14] ^ y__h20307,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
	       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373 } ;
  assign rounded_mantissa__h25186 =
	     { tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347 } ;
  assign rounded_mantissa__h25268 =
	     { tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382 } ;
  assign start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 =
	     start_done && !mul_done && sign_done && exp_done ;
  assign tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253 =
	     { y__h8124 ^ y__h7826,
	       y__h7932 ^ y__h7634,
	       tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252 } ;
  assign tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254 =
	     { y__h8508 ^ y__h8210,
	       y__h8316 ^ y__h8018,
	       tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253 } ;
  assign tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248 =
	     { y__h6204 ^ x__h6203,
	       IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7[0] } ;
  assign tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249 =
	     { y__h6588 ^ y__h6290,
	       y__h6396 ^ y__h6098,
	       tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248 } ;
  assign tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250 =
	     { y__h6972 ^ y__h6674,
	       y__h6780 ^ y__h6482,
	       tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249 } ;
  assign tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251 =
	     { y__h7356 ^ y__h7058,
	       y__h7164 ^ y__h6866,
	       tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250 } ;
  assign tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252 =
	     { y__h7740 ^ y__h7442,
	       y__h7548 ^ y__h7250,
	       tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251 } ;
  assign tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329 =
	     { x__h16280 ^ y__h16281,
	       x__h16094 ^ y__h16095,
	       x__h15968 ^ IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3[0] } ;
  assign tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330 =
	     { x__h16652 ^ y__h16653,
	       x__h16466 ^ y__h16467,
	       tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329 } ;
  assign tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337 =
	     tmp_fraction[10] ^ y__h12922 ;
  assign tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371 =
	     tmp_fraction[10] ^ y__h19563 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336 =
	     tmp_fraction[11] ^ y__h13108 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370 =
	     tmp_fraction[11] ^ y__h19749 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382 =
	     { tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
	       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373,
	       IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5[0] } ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335 =
	     tmp_fraction[12] ^ y__h13294 ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347 =
	     { tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338,
	       IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4[0] } ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369 =
	     tmp_fraction[12] ^ y__h19935 ;
  assign tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334 =
	     tmp_fraction[13] ^ y__h13480 ;
  assign tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368 =
	     tmp_fraction[13] ^ y__h20121 ;
  assign tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333 =
	     tmp_fraction[14] ^ y__h13666 ;
  assign tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373 =
	     tmp_fraction[8] ^ tmp_fraction[7] ;
  assign tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338 =
	     tmp_fraction[9] ^ tmp_fraction[8] ;
  assign tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372 =
	     tmp_fraction[9] ^ y__h19377 ;
  assign x__h15968 = tmp_exp[1] ^ tmp_exp[0] ;
  assign x__h16094 = tmp_exp[2] ^ y__h9676 ;
  assign x__h16280 = tmp_exp[3] ^ y__h9862 ;
  assign x__h16466 = tmp_exp[4] ^ y__h10048 ;
  assign x__h16652 = tmp_exp[5] ^ y__h10234 ;
  assign x__h16838 = tmp_exp[6] ^ y__h10420 ;
  assign x__h17024 = tmp_exp[7] ^ y__h10606 ;
  assign x__h2607 = a[8] ^ b[8] ;
  assign x__h2734 = a[9] ^ b[9] ;
  assign x__h2791 = a[8] & b[8] ;
  assign x__h2920 = a[10] ^ b[10] ;
  assign x__h2977 = a[9] & b[9] ;
  assign x__h3106 = a[11] ^ b[11] ;
  assign x__h3163 = a[10] & b[10] ;
  assign x__h3292 = a[12] ^ b[12] ;
  assign x__h3349 = a[11] & b[11] ;
  assign x__h3478 = a[13] ^ b[13] ;
  assign x__h3535 = a[12] & b[12] ;
  assign x__h3664 = a[14] ^ b[14] ;
  assign x__h3721 = a[13] & b[13] ;
  assign x__h3894 = x__h2607 ^ y__h2608 ;
  assign x__h4020 = x__h2734 ^ y__h2735 ;
  assign x__h4206 = x__h2920 ^ y__h2921 ;
  assign x__h4392 = x__h3106 ^ y__h3107 ;
  assign x__h4578 = x__h3292 ^ y__h3293 ;
  assign x__h4764 = x__h3478 ^ y__h3479 ;
  assign x__h4950 = ~(x__h3664 ^ y__h3665) ;
  assign x__h6156 = tmp_a[1] & tmp_fraction[1] ;
  assign x__h6203 = tmp_a[0] & tmp_fraction[0] ;
  assign x__h6348 = tmp_a[2] & tmp_fraction[2] ;
  assign x__h6540 = tmp_a[3] & tmp_fraction[3] ;
  assign x__h6732 = tmp_a[4] & tmp_fraction[4] ;
  assign x__h6924 = tmp_a[5] & tmp_fraction[5] ;
  assign x__h7116 = tmp_a[6] & tmp_fraction[6] ;
  assign x__h7308 = tmp_a[7] & tmp_fraction[7] ;
  assign x__h7500 = tmp_a[8] & tmp_fraction[8] ;
  assign x__h7692 = tmp_a[9] & tmp_fraction[9] ;
  assign x__h7884 = tmp_a[10] & tmp_fraction[10] ;
  assign x__h8076 = tmp_a[11] & tmp_fraction[11] ;
  assign x__h8268 = tmp_a[12] & tmp_fraction[12] ;
  assign x__h8460 = tmp_a[13] & tmp_fraction[13] ;
  assign x__h8593 = tmp_a[15] ^ tmp_fraction[15] ;
  assign x__h8652 = tmp_a[14] & tmp_fraction[14] ;
  assign y__h10048 = y__h9862 & tmp_exp[3] ;
  assign y__h10234 = y__h10048 & tmp_exp[4] ;
  assign y__h10420 = y__h10234 & tmp_exp[5] ;
  assign y__h10606 = y__h10420 & tmp_exp[6] ;
  assign y__h12922 = tmp_fraction[8] & tmp_fraction[9] ;
  assign y__h13108 = y__h12922 & tmp_fraction[10] ;
  assign y__h13294 = y__h13108 & tmp_fraction[11] ;
  assign y__h13480 = y__h13294 & tmp_fraction[12] ;
  assign y__h13666 = y__h13480 & tmp_fraction[13] ;
  assign y__h13852 = y__h13666 & tmp_fraction[14] ;
  assign y__h16095 = IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] & x__h15968 ;
  assign y__h16281 = y__h16095 & x__h16094 ;
  assign y__h16467 = y__h16281 & x__h16280 ;
  assign y__h16653 = y__h16467 & x__h16466 ;
  assign y__h16839 = y__h16653 & x__h16652 ;
  assign y__h17025 = y__h16839 & x__h16838 ;
  assign y__h19377 = tmp_fraction[7] & tmp_fraction[8] ;
  assign y__h19563 = y__h19377 & tmp_fraction[9] ;
  assign y__h19749 = y__h19563 & tmp_fraction[10] ;
  assign y__h19935 = y__h19749 & tmp_fraction[11] ;
  assign y__h20121 = y__h19935 & tmp_fraction[12] ;
  assign y__h20307 = y__h20121 & tmp_fraction[13] ;
  assign y__h20493 = y__h20307 & tmp_fraction[14] ;
  assign y__h2608 = a[7] & b[7] ;
  assign y__h2735 = x__h2791 | y__h2792 ;
  assign y__h2792 = x__h2607 & y__h2608 ;
  assign y__h2921 = x__h2977 | y__h2978 ;
  assign y__h2978 = x__h2734 & y__h2735 ;
  assign y__h3107 = x__h3163 | y__h3164 ;
  assign y__h3164 = x__h2920 & y__h2921 ;
  assign y__h3293 = x__h3349 | y__h3350 ;
  assign y__h3350 = x__h3106 & y__h3107 ;
  assign y__h3479 = x__h3535 | y__h3536 ;
  assign y__h3536 = x__h3292 & y__h3293 ;
  assign y__h3665 = x__h3721 | y__h3722 ;
  assign y__h3722 = x__h3478 & y__h3479 ;
  assign y__h4021 = x__h3894 & IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h4207 = x__h4020 & y__h4021 ;
  assign y__h4393 = x__h4206 & y__h4207 ;
  assign y__h4579 = x__h4392 & y__h4393 ;
  assign y__h4765 = x__h4578 & y__h4579 ;
  assign y__h4951 = x__h4764 & y__h4765 ;
  assign y__h6098 = x__h6156 | y__h6157 ;
  assign y__h6157 = x__h6203 & y__h6204 ;
  assign y__h6204 = tmp_a[1] ^ tmp_fraction[1] ;
  assign y__h6290 = x__h6348 | y__h6349 ;
  assign y__h6349 = y__h6098 & y__h6396 ;
  assign y__h6396 = tmp_a[2] ^ tmp_fraction[2] ;
  assign y__h6482 = x__h6540 | y__h6541 ;
  assign y__h6541 = y__h6290 & y__h6588 ;
  assign y__h6588 = tmp_a[3] ^ tmp_fraction[3] ;
  assign y__h6674 = x__h6732 | y__h6733 ;
  assign y__h6733 = y__h6482 & y__h6780 ;
  assign y__h6780 = tmp_a[4] ^ tmp_fraction[4] ;
  assign y__h6866 = x__h6924 | y__h6925 ;
  assign y__h6925 = y__h6674 & y__h6972 ;
  assign y__h6972 = tmp_a[5] ^ tmp_fraction[5] ;
  assign y__h7058 = x__h7116 | y__h7117 ;
  assign y__h7117 = y__h6866 & y__h7164 ;
  assign y__h7164 = tmp_a[6] ^ tmp_fraction[6] ;
  assign y__h7250 = x__h7308 | y__h7309 ;
  assign y__h7309 = y__h7058 & y__h7356 ;
  assign y__h7356 = tmp_a[7] ^ tmp_fraction[7] ;
  assign y__h7442 = x__h7500 | y__h7501 ;
  assign y__h7501 = y__h7250 & y__h7548 ;
  assign y__h7548 = tmp_a[8] ^ tmp_fraction[8] ;
  assign y__h7634 = x__h7692 | y__h7693 ;
  assign y__h7693 = y__h7442 & y__h7740 ;
  assign y__h7740 = tmp_a[9] ^ tmp_fraction[9] ;
  assign y__h7826 = x__h7884 | y__h7885 ;
  assign y__h7885 = y__h7634 & y__h7932 ;
  assign y__h7932 = tmp_a[10] ^ tmp_fraction[10] ;
  assign y__h8018 = x__h8076 | y__h8077 ;
  assign y__h8077 = y__h7826 & y__h8124 ;
  assign y__h8124 = tmp_a[11] ^ tmp_fraction[11] ;
  assign y__h8210 = x__h8268 | y__h8269 ;
  assign y__h8269 = y__h8018 & y__h8316 ;
  assign y__h8316 = tmp_a[12] ^ tmp_fraction[12] ;
  assign y__h8402 = x__h8460 | y__h8461 ;
  assign y__h8461 = y__h8210 & y__h8508 ;
  assign y__h8508 = tmp_a[13] ^ tmp_fraction[13] ;
  assign y__h8594 = x__h8652 | y__h8653 ;
  assign y__h8653 = y__h8402 & y__h8700 ;
  assign y__h8700 = tmp_a[14] ^ tmp_fraction[14] ;
  assign y__h9676 = tmp_exp[0] & tmp_exp[1] ;
  assign y__h9862 = y__h9676 & tmp_exp[2] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	end_result <= `BSV_ASSIGNMENT_DELAY 16'd0;
	exp_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	exp_mantissa <= `BSV_ASSIGNMENT_DELAY 15'd0;
	exp_res <= `BSV_ASSIGNMENT_DELAY 8'd0;
	fifo_a_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	fifo_b_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	fifo_res_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	get_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mantissa_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pack_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	res_deq_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	result_concatenated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tmp_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_a_a <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_b <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_exp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_fraction <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (end_result_EN)
	  end_result <= `BSV_ASSIGNMENT_DELAY end_result_D_IN;
	if (exp_done_EN) exp_done <= `BSV_ASSIGNMENT_DELAY exp_done_D_IN;
	if (exp_mantissa_EN)
	  exp_mantissa <= `BSV_ASSIGNMENT_DELAY exp_mantissa_D_IN;
	if (exp_res_EN) exp_res <= `BSV_ASSIGNMENT_DELAY exp_res_D_IN;
	if (fifo_a_rv_EN) fifo_a_rv <= `BSV_ASSIGNMENT_DELAY fifo_a_rv_D_IN;
	if (fifo_b_rv_EN) fifo_b_rv <= `BSV_ASSIGNMENT_DELAY fifo_b_rv_D_IN;
	if (fifo_res_rv_EN)
	  fifo_res_rv <= `BSV_ASSIGNMENT_DELAY fifo_res_rv_D_IN;
	if (get_r_EN) get_r <= `BSV_ASSIGNMENT_DELAY get_r_D_IN;
	if (got_a_EN) got_a <= `BSV_ASSIGNMENT_DELAY got_a_D_IN;
	if (got_b_EN) got_b <= `BSV_ASSIGNMENT_DELAY got_b_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (mantissa_done_EN)
	  mantissa_done <= `BSV_ASSIGNMENT_DELAY mantissa_done_D_IN;
	if (mul_count_EN) mul_count <= `BSV_ASSIGNMENT_DELAY mul_count_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_start_EN) mul_start <= `BSV_ASSIGNMENT_DELAY mul_start_D_IN;
	if (pack_done_EN) pack_done <= `BSV_ASSIGNMENT_DELAY pack_done_D_IN;
	if (res_deq_done_EN)
	  res_deq_done <= `BSV_ASSIGNMENT_DELAY res_deq_done_D_IN;
	if (result_concatenated_EN)
	  result_concatenated <= `BSV_ASSIGNMENT_DELAY
	      result_concatenated_D_IN;
	if (sign_done_EN) sign_done <= `BSV_ASSIGNMENT_DELAY sign_done_D_IN;
	if (start_done_EN)
	  start_done <= `BSV_ASSIGNMENT_DELAY start_done_D_IN;
	if (tmp_a_EN) tmp_a <= `BSV_ASSIGNMENT_DELAY tmp_a_D_IN;
	if (tmp_a_a_EN) tmp_a_a <= `BSV_ASSIGNMENT_DELAY tmp_a_a_D_IN;
	if (tmp_b_EN) tmp_b <= `BSV_ASSIGNMENT_DELAY tmp_b_D_IN;
	if (tmp_exp_EN) tmp_exp <= `BSV_ASSIGNMENT_DELAY tmp_exp_D_IN;
	if (tmp_fraction_EN)
	  tmp_fraction <= `BSV_ASSIGNMENT_DELAY tmp_fraction_D_IN;
	if (tmp_sign_EN) tmp_sign <= `BSV_ASSIGNMENT_DELAY tmp_sign_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 16'hAAAA;
    b = 16'hAAAA;
    end_result = 16'hAAAA;
    exp_done = 1'h0;
    exp_mantissa = 15'h2AAA;
    exp_res = 8'hAA;
    fifo_a_rv = 17'h0AAAA;
    fifo_b_rv = 17'h0AAAA;
    fifo_res_rv = 17'h0AAAA;
    get_r = 1'h0;
    got_a = 1'h0;
    got_b = 1'h0;
    handle_zero = 1'h0;
    mantissa_done = 1'h0;
    mul_count = 4'hA;
    mul_done = 1'h0;
    mul_start = 1'h0;
    pack_done = 1'h0;
    res_deq_done = 1'h0;
    result_concatenated = 1'h0;
    sign_done = 1'h0;
    start_done = 1'h0;
    tmp_a = 16'hAAAA;
    tmp_a_a = 8'hAA;
    tmp_b = 8'hAA;
    tmp_exp = 8'hAA;
    tmp_fraction = 16'hAAAA;
    tmp_sign = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h5138 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h5138, "  a.exp: %b   b.exp: %b", a[14:7], b[14:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h5187 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h5187,
		 "  a.mantissa: %b   b.mantissa: %b ",
		 a[6:0],
		 b[6:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h5328 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h5328, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h5376 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h5376, " tmp_a         %b ", tmp_a);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display("********************************");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h8896 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h8896, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h8943 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h8943, " tmp_exp       %b ", tmp_exp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	begin
	  v__h25486 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	$display(v__h25486,
		 " MUL: sign %b exp: %b mantissa %b",
		 tmp_sign,
		 exp_mantissa[14:7],
		 exp_mantissa[6:0]);
  end
  // synopsys translate_on
endmodule  // mkPipelined_float_mul

