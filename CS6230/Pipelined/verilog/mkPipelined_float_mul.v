//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Mon Nov 25 04:30:22 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inp_a                  O     1
// RDY_get_inp_b                  O     1
// get_result                     O    16 reg
// RDY_get_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inp_a_inp_A                I    16
// get_inp_b_inp_B                I    16
// EN_get_inp_a                   I     1
// EN_get_inp_b                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPipelined_float_mul(CLK,
			     RST_N,

			     get_inp_a_inp_A,
			     EN_get_inp_a,
			     RDY_get_inp_a,

			     get_inp_b_inp_B,
			     EN_get_inp_b,
			     RDY_get_inp_b,

			     get_result,
			     RDY_get_result);
  input  CLK;
  input  RST_N;

  // action method get_inp_a
  input  [15 : 0] get_inp_a_inp_A;
  input  EN_get_inp_a;
  output RDY_get_inp_a;

  // action method get_inp_b
  input  [15 : 0] get_inp_b_inp_B;
  input  EN_get_inp_b;
  output RDY_get_inp_b;

  // value method get_result
  output [15 : 0] get_result;
  output RDY_get_result;

  // signals for module outputs
  wire [15 : 0] get_result;
  wire RDY_get_inp_a, RDY_get_inp_b, RDY_get_result;

  // inlined wires
  wire [16 : 0] fifo_a_rv_port0__write_1,
		fifo_a_rv_port1__read,
		fifo_a_rv_port1__write_1,
		fifo_a_rv_port2__read,
		fifo_b_rv_port1__read,
		fifo_b_rv_port1__write_1,
		fifo_b_rv_port2__read,
		fifo_res_rv_port1__read,
		fifo_res_rv_port1__write_1,
		fifo_res_rv_port2__read;
  wire fifo_res_rv_EN_port1__write;

  // register a
  reg [15 : 0] a;
  wire [15 : 0] a_D_IN;
  wire a_EN;

  // register b
  reg [15 : 0] b;
  wire [15 : 0] b_D_IN;
  wire b_EN;

  // register end_result
  reg [15 : 0] end_result;
  wire [15 : 0] end_result_D_IN;
  wire end_result_EN;

  // register exp_done
  reg exp_done;
  wire exp_done_D_IN, exp_done_EN;

  // register exp_mantissa
  reg [14 : 0] exp_mantissa;
  wire [14 : 0] exp_mantissa_D_IN;
  wire exp_mantissa_EN;

  // register exp_res
  reg [7 : 0] exp_res;
  wire [7 : 0] exp_res_D_IN;
  wire exp_res_EN;

  // register fifo_a_rv
  reg [16 : 0] fifo_a_rv;
  wire [16 : 0] fifo_a_rv_D_IN;
  wire fifo_a_rv_EN;

  // register fifo_b_rv
  reg [16 : 0] fifo_b_rv;
  wire [16 : 0] fifo_b_rv_D_IN;
  wire fifo_b_rv_EN;

  // register fifo_res_rv
  reg [16 : 0] fifo_res_rv;
  wire [16 : 0] fifo_res_rv_D_IN;
  wire fifo_res_rv_EN;

  // register get_r
  reg get_r;
  wire get_r_D_IN, get_r_EN;

  // register got_a
  reg got_a;
  wire got_a_D_IN, got_a_EN;

  // register got_b
  reg got_b;
  wire got_b_D_IN, got_b_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register mantissa_done
  reg mantissa_done;
  wire mantissa_done_D_IN, mantissa_done_EN;

  // register mul_count
  reg [3 : 0] mul_count;
  reg [3 : 0] mul_count_D_IN;
  wire mul_count_EN;

  // register mul_done
  reg mul_done;
  wire mul_done_D_IN, mul_done_EN;

  // register mul_start
  reg mul_start;
  wire mul_start_D_IN, mul_start_EN;

  // register pack_done
  reg pack_done;
  wire pack_done_D_IN, pack_done_EN;

  // register res_deq_done
  reg res_deq_done;
  wire res_deq_done_D_IN, res_deq_done_EN;

  // register result_concatenated
  reg result_concatenated;
  wire result_concatenated_D_IN, result_concatenated_EN;

  // register sign_done
  reg sign_done;
  wire sign_done_D_IN, sign_done_EN;

  // register start_done
  reg start_done;
  wire start_done_D_IN, start_done_EN;

  // register tmp_a
  reg [15 : 0] tmp_a;
  wire [15 : 0] tmp_a_D_IN;
  wire tmp_a_EN;

  // register tmp_a_a
  reg [7 : 0] tmp_a_a;
  wire [7 : 0] tmp_a_a_D_IN;
  wire tmp_a_a_EN;

  // register tmp_b
  reg [7 : 0] tmp_b;
  wire [7 : 0] tmp_b_D_IN;
  wire tmp_b_EN;

  // register tmp_exp
  reg [7 : 0] tmp_exp;
  wire [7 : 0] tmp_exp_D_IN;
  wire tmp_exp_EN;

  // register tmp_fraction
  reg [15 : 0] tmp_fraction;
  wire [15 : 0] tmp_fraction_D_IN;
  wire tmp_fraction_EN;

  // register tmp_sign
  reg tmp_sign;
  wire tmp_sign_D_IN, tmp_sign_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_res_fifo_deq,
       CAN_FIRE_RL_reset_signals,
       CAN_FIRE_RL_rl_add_exp,
       CAN_FIRE_RL_rl_get_mul_res,
       CAN_FIRE_RL_rl_get_sign,
       CAN_FIRE_RL_rl_handling_zero,
       CAN_FIRE_RL_rl_mul_mantissa,
       CAN_FIRE_RL_rl_round_mantissa,
       CAN_FIRE_RL_rl_starting,
       CAN_FIRE_get_inp_a,
       CAN_FIRE_get_inp_b,
       WILL_FIRE_RL_res_fifo_deq,
       WILL_FIRE_RL_reset_signals,
       WILL_FIRE_RL_rl_add_exp,
       WILL_FIRE_RL_rl_get_mul_res,
       WILL_FIRE_RL_rl_get_sign,
       WILL_FIRE_RL_rl_handling_zero,
       WILL_FIRE_RL_rl_mul_mantissa,
       WILL_FIRE_RL_rl_round_mantissa,
       WILL_FIRE_RL_rl_starting,
       WILL_FIRE_get_inp_a,
       WILL_FIRE_get_inp_b;

  // inputs to muxes for submodule ports
  wire [16 : 0] MUX_fifo_res_rv_port1__write_1__VAL_1;
  wire [15 : 0] MUX_tmp_a_write_1__VAL_1, MUX_tmp_a_write_1__VAL_2;
  wire [7 : 0] MUX_tmp_b_write_1__VAL_1, MUX_tmp_b_write_1__VAL_2;
  wire [3 : 0] MUX_mul_count_write_1__VAL_2;
  wire MUX_handle_zero_write_1__SEL_1, MUX_sign_done_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5134;
  reg [31 : 0] v__h5183;
  reg [31 : 0] v__h5324;
  reg [31 : 0] v__h5372;
  reg [31 : 0] v__h8894;
  reg [31 : 0] v__h8941;
  reg [31 : 0] v__h25491;
  // synopsys translate_on

  // remaining internal signals
  wire [15 : 0] IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3,
		IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2,
		IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5,
		IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4,
		IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7;
  wire [14 : 0] IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386,
		IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351,
		IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385,
		IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350;
  wire [13 : 0] tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254;
  wire [11 : 0] tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253;
  wire [9 : 0] tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252;
  wire [7 : 0] IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6,
	       IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___fst__h15491,
	       exp___1__h9041,
	       tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251;
  wire [6 : 0] rounded_mantissa__h15490,
	       rounded_mantissa__h21943,
	       rounded_mantissa__h25183,
	       rounded_mantissa__h25273;
  wire [5 : 0] a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124,
	       tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250,
	       tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330;
  wire [4 : 0] tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347;
  wire [3 : 0] a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123,
	       tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249,
	       tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329;
  wire [1 : 0] tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248;
  wire start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130,
       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
       tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373,
       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338,
       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
       x__h15962,
       x__h16088,
       x__h16274,
       x__h16460,
       x__h16646,
       x__h16832,
       x__h17018,
       x__h2603,
       x__h2730,
       x__h2787,
       x__h2916,
       x__h2973,
       x__h3102,
       x__h3159,
       x__h3288,
       x__h3345,
       x__h3474,
       x__h3531,
       x__h3660,
       x__h3717,
       x__h3890,
       x__h4016,
       x__h4202,
       x__h4388,
       x__h4574,
       x__h4760,
       x__h4946,
       x__h6154,
       x__h6201,
       x__h6346,
       x__h6538,
       x__h6730,
       x__h6922,
       x__h7114,
       x__h7306,
       x__h7498,
       x__h7690,
       x__h7882,
       x__h8074,
       x__h8266,
       x__h8458,
       x__h8591,
       x__h8650,
       y__h10043,
       y__h10229,
       y__h10415,
       y__h10601,
       y__h12914,
       y__h13100,
       y__h13286,
       y__h13472,
       y__h13658,
       y__h13844,
       y__h16089,
       y__h16275,
       y__h16461,
       y__h16647,
       y__h16833,
       y__h17019,
       y__h19364,
       y__h19550,
       y__h19736,
       y__h19922,
       y__h20108,
       y__h20294,
       y__h20480,
       y__h2604,
       y__h2731,
       y__h2788,
       y__h2917,
       y__h2974,
       y__h3103,
       y__h3160,
       y__h3289,
       y__h3346,
       y__h3475,
       y__h3532,
       y__h3661,
       y__h3718,
       y__h4017,
       y__h4203,
       y__h4389,
       y__h4575,
       y__h4761,
       y__h4947,
       y__h6096,
       y__h6155,
       y__h6202,
       y__h6288,
       y__h6347,
       y__h6394,
       y__h6480,
       y__h6539,
       y__h6586,
       y__h6672,
       y__h6731,
       y__h6778,
       y__h6864,
       y__h6923,
       y__h6970,
       y__h7056,
       y__h7115,
       y__h7162,
       y__h7248,
       y__h7307,
       y__h7354,
       y__h7440,
       y__h7499,
       y__h7546,
       y__h7632,
       y__h7691,
       y__h7738,
       y__h7824,
       y__h7883,
       y__h7930,
       y__h8016,
       y__h8075,
       y__h8122,
       y__h8208,
       y__h8267,
       y__h8314,
       y__h8400,
       y__h8459,
       y__h8506,
       y__h8592,
       y__h8651,
       y__h8698,
       y__h9671,
       y__h9857;

  // action method get_inp_a
  assign RDY_get_inp_a = !fifo_a_rv_port1__read[16] ;
  assign CAN_FIRE_get_inp_a = !fifo_a_rv_port1__read[16] ;
  assign WILL_FIRE_get_inp_a = EN_get_inp_a ;

  // action method get_inp_b
  assign RDY_get_inp_b = !fifo_b_rv_port1__read[16] ;
  assign CAN_FIRE_get_inp_b = !fifo_b_rv_port1__read[16] ;
  assign WILL_FIRE_get_inp_b = EN_get_inp_b ;

  // value method get_result
  assign get_result = end_result ;
  assign RDY_get_result = res_deq_done ;

  // rule RL_rl_starting
  assign CAN_FIRE_RL_rl_starting =
	     fifo_a_rv[16] && fifo_b_rv[16] && !start_done ;
  assign WILL_FIRE_RL_rl_starting = CAN_FIRE_RL_rl_starting ;

  // rule RL_rl_get_sign
  assign CAN_FIRE_RL_rl_get_sign = start_done && !mul_done && !sign_done ;
  assign WILL_FIRE_RL_rl_get_sign = CAN_FIRE_RL_rl_get_sign ;

  // rule RL_rl_add_exp
  assign CAN_FIRE_RL_rl_add_exp =
	     start_done && !mul_done && sign_done && !exp_done &&
	     mul_count == 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_add_exp = CAN_FIRE_RL_rl_add_exp ;

  // rule RL_rl_mul_mantissa
  assign CAN_FIRE_RL_rl_mul_mantissa =
	     start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 &&
	     mul_count != 4'd0 &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_mul_mantissa = CAN_FIRE_RL_rl_mul_mantissa ;

  // rule RL_rl_round_mantissa
  assign CAN_FIRE_RL_rl_round_mantissa =
	     start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 &&
	     mul_count == 4'd0 &&
	     !mantissa_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_round_mantissa = CAN_FIRE_RL_rl_round_mantissa ;

  // rule RL_reset_signals
  assign CAN_FIRE_RL_reset_signals = result_concatenated ;
  assign WILL_FIRE_RL_reset_signals = result_concatenated ;

  // rule RL_res_fifo_deq
  assign CAN_FIRE_RL_res_fifo_deq = fifo_res_rv[16] && mul_done ;
  assign WILL_FIRE_RL_res_fifo_deq = CAN_FIRE_RL_res_fifo_deq ;

  // rule RL_rl_handling_zero
  assign CAN_FIRE_RL_rl_handling_zero =
	     !fifo_res_rv_port1__read[16] && start_done && handle_zero ;
  assign WILL_FIRE_RL_rl_handling_zero =
	     CAN_FIRE_RL_rl_handling_zero && !WILL_FIRE_RL_rl_get_sign ;

  // rule RL_rl_get_mul_res
  assign CAN_FIRE_RL_rl_get_mul_res =
	     !fifo_res_rv_port1__read[16] && start_done && !mul_done &&
	     mantissa_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_get_mul_res =
	     CAN_FIRE_RL_rl_get_mul_res && !result_concatenated &&
	     !WILL_FIRE_RL_rl_get_sign ;

  // inputs to muxes for submodule ports
  assign MUX_handle_zero_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ;
  assign MUX_sign_done_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ;
  assign MUX_fifo_res_rv_port1__write_1__VAL_1 =
	     { 1'd1, tmp_sign, exp_mantissa } ;
  assign MUX_mul_count_write_1__VAL_2 = mul_count - 4'd1 ;
  assign MUX_tmp_a_write_1__VAL_1 = { 8'd0, tmp_a_a } ;
  assign MUX_tmp_a_write_1__VAL_2 = { tmp_a[14:0], 1'd0 } ;
  assign MUX_tmp_b_write_1__VAL_1 = { 1'b1, b[6:0] } ;
  assign MUX_tmp_b_write_1__VAL_2 = { 1'd0, tmp_b[7:1] } ;

  // inlined wires
  assign fifo_a_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign fifo_a_rv_port1__read =
	     CAN_FIRE_RL_rl_starting ? fifo_a_rv_port0__write_1 : fifo_a_rv ;
  assign fifo_a_rv_port1__write_1 = { 1'd1, get_inp_a_inp_A } ;
  assign fifo_a_rv_port2__read =
	     EN_get_inp_a ? fifo_a_rv_port1__write_1 : fifo_a_rv_port1__read ;
  assign fifo_b_rv_port1__read =
	     CAN_FIRE_RL_rl_starting ? fifo_a_rv_port0__write_1 : fifo_b_rv ;
  assign fifo_b_rv_port1__write_1 = { 1'd1, get_inp_b_inp_B } ;
  assign fifo_b_rv_port2__read =
	     EN_get_inp_b ? fifo_b_rv_port1__write_1 : fifo_b_rv_port1__read ;
  assign fifo_res_rv_port1__read =
	     CAN_FIRE_RL_res_fifo_deq ?
	       fifo_a_rv_port0__write_1 :
	       fifo_res_rv ;
  assign fifo_res_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;
  assign fifo_res_rv_port1__write_1 =
	     WILL_FIRE_RL_rl_get_mul_res ?
	       MUX_fifo_res_rv_port1__write_1__VAL_1 :
	       17'd65536 ;
  assign fifo_res_rv_port2__read =
	     fifo_res_rv_EN_port1__write ?
	       fifo_res_rv_port1__write_1 :
	       fifo_res_rv_port1__read ;

  // register a
  assign a_D_IN = fifo_a_rv[15:0] ;
  assign a_EN = CAN_FIRE_RL_rl_starting ;

  // register b
  assign b_D_IN = fifo_b_rv[15:0] ;
  assign b_EN = CAN_FIRE_RL_rl_starting ;

  // register end_result
  assign end_result_D_IN = fifo_res_rv[15:0] ;
  assign end_result_EN = CAN_FIRE_RL_res_fifo_deq ;

  // register exp_done
  assign exp_done_D_IN = !result_concatenated ;
  assign exp_done_EN = result_concatenated || WILL_FIRE_RL_rl_add_exp ;

  // register exp_mantissa
  assign exp_mantissa_D_IN =
	     tmp_fraction[15] ?
	       IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351 :
	       IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386 ;
  assign exp_mantissa_EN = CAN_FIRE_RL_rl_round_mantissa ;

  // register exp_res
  assign exp_res_D_IN = 8'h0 ;
  assign exp_res_EN = 1'b0 ;

  // register fifo_a_rv
  assign fifo_a_rv_D_IN = fifo_a_rv_port2__read ;
  assign fifo_a_rv_EN = 1'b1 ;

  // register fifo_b_rv
  assign fifo_b_rv_D_IN = fifo_b_rv_port2__read ;
  assign fifo_b_rv_EN = 1'b1 ;

  // register fifo_res_rv
  assign fifo_res_rv_D_IN = fifo_res_rv_port2__read ;
  assign fifo_res_rv_EN = 1'b1 ;

  // register get_r
  assign get_r_D_IN = 1'b0 ;
  assign get_r_EN = 1'b0 ;

  // register got_a
  assign got_a_D_IN = 1'b0 ;
  assign got_a_EN = 1'b0 ;

  // register got_b
  assign got_b_D_IN = 1'b0 ;
  assign got_b_EN = 1'b0 ;

  // register handle_zero
  assign handle_zero_D_IN = MUX_handle_zero_write_1__SEL_1 ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] == 8'd0 && a[6:0] == 7'd0 ||
	      b[14:7] == 8'd0 && b[6:0] == 7'd0) ||
	     WILL_FIRE_RL_rl_handling_zero ;

  // register mantissa_done
  assign mantissa_done_D_IN = !result_concatenated ;
  assign mantissa_done_EN =
	     result_concatenated || WILL_FIRE_RL_rl_round_mantissa ;

  // register mul_count
  always@(result_concatenated or
	  WILL_FIRE_RL_rl_mul_mantissa or
	  MUX_mul_count_write_1__VAL_2 or WILL_FIRE_RL_rl_add_exp)
  case (1'b1)
    result_concatenated: mul_count_D_IN = 4'd8;
    WILL_FIRE_RL_rl_mul_mantissa:
	mul_count_D_IN = MUX_mul_count_write_1__VAL_2;
    WILL_FIRE_RL_rl_add_exp: mul_count_D_IN = 4'd8;
    default: mul_count_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign mul_count_EN =
	     WILL_FIRE_RL_rl_mul_mantissa || result_concatenated ||
	     WILL_FIRE_RL_rl_add_exp ;

  // register mul_done
  assign mul_done_D_IN = 1'd1 ;
  assign mul_done_EN =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;

  // register mul_start
  assign mul_start_D_IN = 1'b0 ;
  assign mul_start_EN = 1'b0 ;

  // register pack_done
  assign pack_done_D_IN = 1'b0 ;
  assign pack_done_EN = 1'b0 ;

  // register res_deq_done
  assign res_deq_done_D_IN = 1'd1 ;
  assign res_deq_done_EN = CAN_FIRE_RL_res_fifo_deq ;

  // register result_concatenated
  assign result_concatenated_D_IN =
	     WILL_FIRE_RL_rl_get_mul_res || WILL_FIRE_RL_rl_handling_zero ;
  assign result_concatenated_EN =
	     result_concatenated || WILL_FIRE_RL_rl_get_mul_res ||
	     WILL_FIRE_RL_rl_handling_zero ;

  // register sign_done
  assign sign_done_D_IN = !result_concatenated ;
  assign sign_done_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     result_concatenated ;

  // register start_done
  assign start_done_D_IN = 1'd1 ;
  assign start_done_EN = CAN_FIRE_RL_rl_starting ;

  // register tmp_a
  assign tmp_a_D_IN =
	     WILL_FIRE_RL_rl_add_exp ?
	       MUX_tmp_a_write_1__VAL_1 :
	       MUX_tmp_a_write_1__VAL_2 ;
  assign tmp_a_EN = WILL_FIRE_RL_rl_add_exp || WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_a_a
  assign tmp_a_a_D_IN = { 1'b1, a[6:0] } ;
  assign tmp_a_a_EN = MUX_sign_done_write_1__SEL_2 ;

  // register tmp_b
  assign tmp_b_D_IN =
	     MUX_sign_done_write_1__SEL_2 ?
	       MUX_tmp_b_write_1__VAL_1 :
	       MUX_tmp_b_write_1__VAL_2 ;
  assign tmp_b_EN =
	     WILL_FIRE_RL_rl_get_sign &&
	     (a[14:7] != 8'd0 || a[6:0] != 7'd0) &&
	     (b[14:7] != 8'd0 || b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_rl_mul_mantissa ;

  // register tmp_exp
  assign tmp_exp_D_IN =
	     { x__h4946 ^ y__h4947,
	       x__h4760 ^ y__h4761,
	       a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124 } ;
  assign tmp_exp_EN = CAN_FIRE_RL_rl_add_exp ;

  // register tmp_fraction
  assign tmp_fraction_D_IN =
	     { x__h8591 ^ y__h8592,
	       y__h8698 ^ y__h8400,
	       tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254 } ;
  assign tmp_fraction_EN = WILL_FIRE_RL_rl_mul_mantissa && tmp_b[0] ;

  // register tmp_sign
  assign tmp_sign_D_IN = a[15] ^ b[15] ;
  assign tmp_sign_EN = MUX_sign_done_write_1__SEL_2 ;

  // remaining internal signals
  assign IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3 =
	     (~IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6 =
	     (~IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2 =
	     (~tmp_exp[0]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5 =
	     (~tmp_fraction[7]) ? 16'd1 : 16'd0 ;
  assign IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4 =
	     (~tmp_fraction[8]) ? 16'd1 : 16'd0 ;
  assign IF_NOT_tmp_fraction_35_BIT_6_68_52_OR_tmp_frac_ETC___d386 =
	     (!tmp_fraction[6] ||
	      tmp_fraction[5:0] == 6'd0 && !tmp_fraction[7]) ?
	       { tmp_exp, tmp_fraction[13:7] } :
	       IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385 ;
  assign IF_NOT_tmp_fraction_35_BIT_7_65_69_OR_tmp_frac_ETC___d351 =
	     (!tmp_fraction[7] ||
	      tmp_fraction[6:0] == 7'd0 && !tmp_fraction[8]) ?
	       { exp___1__h9041, tmp_fraction[14:8] } :
	       IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350 ;
  assign IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (a[7] ^ b[7]) ? 8'd1 : 8'd0 ;
  assign IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7 =
	     (tmp_a[0] ^ tmp_fraction[0]) ? 16'd1 : 16'd0 ;
  assign IF_tmp_fraction_35_BIT_15_41_XOR_tmp_fraction__ETC___d385 =
	     (tmp_fraction[15] ^ y__h20480) ?
	       { exp___1__h9041, rounded_mantissa__h21943 } :
	       { tmp_exp, rounded_mantissa__h25273 } ;
  assign IF_tmp_fraction_35_BIT_8_62_AND_tmp_fraction_3_ETC___d350 =
	     (y__h13844 & tmp_fraction[15]) ?
	       { _theResult___fst__h15491, rounded_mantissa__h15490 } :
	       { exp___1__h9041, rounded_mantissa__h25183 } ;
  assign _theResult___fst__h15491 =
	     { x__h17018 ^ y__h17019,
	       x__h16832 ^ y__h16833,
	       tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330 } ;
  assign a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123 =
	     { x__h4202 ^ y__h4203,
	       x__h4016 ^ y__h4017,
	       x__h3890 ^ IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0_BI_ETC__q6[0] } ;
  assign a_8_BIT_12_0_XOR_b_4_BIT_12_1_3_XOR_a_8_BIT_11_ETC___d124 =
	     { x__h4574 ^ y__h4575,
	       x__h4388 ^ y__h4389,
	       a_8_BIT_10_8_XOR_b_4_BIT_10_9_1_XOR_a_8_BIT_9__ETC___d123 } ;
  assign exp___1__h9041 =
	     { x__h17018,
	       x__h16832,
	       x__h16646,
	       x__h16460,
	       x__h16274,
	       x__h16088,
	       x__h15962,
	       IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign rounded_mantissa__h15490 =
	     { tmp_fraction[15] ^ y__h13844,
	       tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338 } ;
  assign rounded_mantissa__h21943 =
	     { tmp_fraction[14] ^ y__h20294,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
	       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373 } ;
  assign rounded_mantissa__h25183 =
	     { tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333,
	       tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347 } ;
  assign rounded_mantissa__h25273 =
	     { tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368,
	       tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382 } ;
  assign start_done_AND_NOT_mul_done_2_3_4_AND_sign_don_ETC___d130 =
	     start_done && !mul_done && sign_done && exp_done ;
  assign tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253 =
	     { y__h8122 ^ y__h7824,
	       y__h7930 ^ y__h7632,
	       tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252 } ;
  assign tmp_a_37_BIT_13_46_XOR_tmp_fraction_35_BIT_13__ETC___d254 =
	     { y__h8506 ^ y__h8208,
	       y__h8314 ^ y__h8016,
	       tmp_a_37_BIT_11_52_XOR_tmp_fraction_35_BIT_11__ETC___d253 } ;
  assign tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248 =
	     { y__h6202 ^ x__h6201,
	       IF_tmp_a_BIT_0_XOR_tmp_fraction_BIT_0_THEN_1_E_ETC__q7[0] } ;
  assign tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249 =
	     { y__h6586 ^ y__h6288,
	       y__h6394 ^ y__h6096,
	       tmp_a_37_BIT_1_82_XOR_tmp_fraction_35_BIT_1_83_ETC___d248 } ;
  assign tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250 =
	     { y__h6970 ^ y__h6672,
	       y__h6778 ^ y__h6480,
	       tmp_a_37_BIT_3_76_XOR_tmp_fraction_35_BIT_3_77_ETC___d249 } ;
  assign tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251 =
	     { y__h7354 ^ y__h7056,
	       y__h7162 ^ y__h6864,
	       tmp_a_37_BIT_5_70_XOR_tmp_fraction_35_BIT_5_71_ETC___d250 } ;
  assign tmp_a_37_BIT_9_58_XOR_tmp_fraction_35_BIT_9_59_ETC___d252 =
	     { y__h7738 ^ y__h7440,
	       y__h7546 ^ y__h7248,
	       tmp_a_37_BIT_7_64_XOR_tmp_fraction_35_BIT_7_65_ETC___d251 } ;
  assign tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329 =
	     { x__h16274 ^ y__h16275,
	       x__h16088 ^ y__h16089,
	       x__h15962 ^ IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0_BIT__ETC__q3[0] } ;
  assign tmp_exp_68_BIT_5_85_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d330 =
	     { x__h16646 ^ y__h16647,
	       x__h16460 ^ y__h16461,
	       tmp_exp_68_BIT_3_81_XOR_tmp_exp_68_BIT_0_76_AN_ETC___d329 } ;
  assign tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337 =
	     tmp_fraction[10] ^ y__h12914 ;
  assign tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371 =
	     tmp_fraction[10] ^ y__h19550 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336 =
	     tmp_fraction[11] ^ y__h13100 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370 =
	     tmp_fraction[11] ^ y__h19736 ;
  assign tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d382 =
	     { tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d370,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d371,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372,
	       tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373,
	       IF_INV_tmp_fraction_BIT_7_THEN_1_ELSE_0__q5[0] } ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335 =
	     tmp_fraction[12] ^ y__h13286 ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d347 =
	     { tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d335,
	       tmp_fraction_35_BIT_11_53_XOR_tmp_fraction_35__ETC___d336,
	       tmp_fraction_35_BIT_10_56_XOR_tmp_fraction_35__ETC___d337,
	       tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338,
	       IF_INV_tmp_fraction_BIT_8_THEN_1_ELSE_0__q4[0] } ;
  assign tmp_fraction_35_BIT_12_50_XOR_tmp_fraction_35__ETC___d369 =
	     tmp_fraction[12] ^ y__h19922 ;
  assign tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d334 =
	     tmp_fraction[13] ^ y__h13472 ;
  assign tmp_fraction_35_BIT_13_47_XOR_tmp_fraction_35__ETC___d368 =
	     tmp_fraction[13] ^ y__h20108 ;
  assign tmp_fraction_35_BIT_14_44_XOR_tmp_fraction_35__ETC___d333 =
	     tmp_fraction[14] ^ y__h13658 ;
  assign tmp_fraction_35_BIT_8_62_XOR_tmp_fraction_35_B_ETC___d373 =
	     tmp_fraction[8] ^ tmp_fraction[7] ;
  assign tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d338 =
	     tmp_fraction[9] ^ tmp_fraction[8] ;
  assign tmp_fraction_35_BIT_9_59_XOR_tmp_fraction_35_B_ETC___d372 =
	     tmp_fraction[9] ^ y__h19364 ;
  assign x__h15962 = tmp_exp[1] ^ tmp_exp[0] ;
  assign x__h16088 = tmp_exp[2] ^ y__h9671 ;
  assign x__h16274 = tmp_exp[3] ^ y__h9857 ;
  assign x__h16460 = tmp_exp[4] ^ y__h10043 ;
  assign x__h16646 = tmp_exp[5] ^ y__h10229 ;
  assign x__h16832 = tmp_exp[6] ^ y__h10415 ;
  assign x__h17018 = tmp_exp[7] ^ y__h10601 ;
  assign x__h2603 = a[8] ^ b[8] ;
  assign x__h2730 = a[9] ^ b[9] ;
  assign x__h2787 = a[8] & b[8] ;
  assign x__h2916 = a[10] ^ b[10] ;
  assign x__h2973 = a[9] & b[9] ;
  assign x__h3102 = a[11] ^ b[11] ;
  assign x__h3159 = a[10] & b[10] ;
  assign x__h3288 = a[12] ^ b[12] ;
  assign x__h3345 = a[11] & b[11] ;
  assign x__h3474 = a[13] ^ b[13] ;
  assign x__h3531 = a[12] & b[12] ;
  assign x__h3660 = a[14] ^ b[14] ;
  assign x__h3717 = a[13] & b[13] ;
  assign x__h3890 = x__h2603 ^ y__h2604 ;
  assign x__h4016 = x__h2730 ^ y__h2731 ;
  assign x__h4202 = x__h2916 ^ y__h2917 ;
  assign x__h4388 = x__h3102 ^ y__h3103 ;
  assign x__h4574 = x__h3288 ^ y__h3289 ;
  assign x__h4760 = x__h3474 ^ y__h3475 ;
  assign x__h4946 = ~(x__h3660 ^ y__h3661) ;
  assign x__h6154 = tmp_a[1] & tmp_fraction[1] ;
  assign x__h6201 = tmp_a[0] & tmp_fraction[0] ;
  assign x__h6346 = tmp_a[2] & tmp_fraction[2] ;
  assign x__h6538 = tmp_a[3] & tmp_fraction[3] ;
  assign x__h6730 = tmp_a[4] & tmp_fraction[4] ;
  assign x__h6922 = tmp_a[5] & tmp_fraction[5] ;
  assign x__h7114 = tmp_a[6] & tmp_fraction[6] ;
  assign x__h7306 = tmp_a[7] & tmp_fraction[7] ;
  assign x__h7498 = tmp_a[8] & tmp_fraction[8] ;
  assign x__h7690 = tmp_a[9] & tmp_fraction[9] ;
  assign x__h7882 = tmp_a[10] & tmp_fraction[10] ;
  assign x__h8074 = tmp_a[11] & tmp_fraction[11] ;
  assign x__h8266 = tmp_a[12] & tmp_fraction[12] ;
  assign x__h8458 = tmp_a[13] & tmp_fraction[13] ;
  assign x__h8591 = tmp_a[15] ^ tmp_fraction[15] ;
  assign x__h8650 = tmp_a[14] & tmp_fraction[14] ;
  assign y__h10043 = y__h9857 & tmp_exp[3] ;
  assign y__h10229 = y__h10043 & tmp_exp[4] ;
  assign y__h10415 = y__h10229 & tmp_exp[5] ;
  assign y__h10601 = y__h10415 & tmp_exp[6] ;
  assign y__h12914 = tmp_fraction[8] & tmp_fraction[9] ;
  assign y__h13100 = y__h12914 & tmp_fraction[10] ;
  assign y__h13286 = y__h13100 & tmp_fraction[11] ;
  assign y__h13472 = y__h13286 & tmp_fraction[12] ;
  assign y__h13658 = y__h13472 & tmp_fraction[13] ;
  assign y__h13844 = y__h13658 & tmp_fraction[14] ;
  assign y__h16089 = IF_INV_tmp_exp_BIT_0_THEN_1_ELSE_0__q2[0] & x__h15962 ;
  assign y__h16275 = y__h16089 & x__h16088 ;
  assign y__h16461 = y__h16275 & x__h16274 ;
  assign y__h16647 = y__h16461 & x__h16460 ;
  assign y__h16833 = y__h16647 & x__h16646 ;
  assign y__h17019 = y__h16833 & x__h16832 ;
  assign y__h19364 = tmp_fraction[7] & tmp_fraction[8] ;
  assign y__h19550 = y__h19364 & tmp_fraction[9] ;
  assign y__h19736 = y__h19550 & tmp_fraction[10] ;
  assign y__h19922 = y__h19736 & tmp_fraction[11] ;
  assign y__h20108 = y__h19922 & tmp_fraction[12] ;
  assign y__h20294 = y__h20108 & tmp_fraction[13] ;
  assign y__h20480 = y__h20294 & tmp_fraction[14] ;
  assign y__h2604 = a[7] & b[7] ;
  assign y__h2731 = x__h2787 | y__h2788 ;
  assign y__h2788 = x__h2603 & y__h2604 ;
  assign y__h2917 = x__h2973 | y__h2974 ;
  assign y__h2974 = x__h2730 & y__h2731 ;
  assign y__h3103 = x__h3159 | y__h3160 ;
  assign y__h3160 = x__h2916 & y__h2917 ;
  assign y__h3289 = x__h3345 | y__h3346 ;
  assign y__h3346 = x__h3102 & y__h3103 ;
  assign y__h3475 = x__h3531 | y__h3532 ;
  assign y__h3532 = x__h3288 & y__h3289 ;
  assign y__h3661 = x__h3717 | y__h3718 ;
  assign y__h3718 = x__h3474 & y__h3475 ;
  assign y__h4017 = x__h3890 & IF_a_BIT_7_XOR_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h4203 = x__h4016 & y__h4017 ;
  assign y__h4389 = x__h4202 & y__h4203 ;
  assign y__h4575 = x__h4388 & y__h4389 ;
  assign y__h4761 = x__h4574 & y__h4575 ;
  assign y__h4947 = x__h4760 & y__h4761 ;
  assign y__h6096 = x__h6154 | y__h6155 ;
  assign y__h6155 = x__h6201 & y__h6202 ;
  assign y__h6202 = tmp_a[1] ^ tmp_fraction[1] ;
  assign y__h6288 = x__h6346 | y__h6347 ;
  assign y__h6347 = y__h6096 & y__h6394 ;
  assign y__h6394 = tmp_a[2] ^ tmp_fraction[2] ;
  assign y__h6480 = x__h6538 | y__h6539 ;
  assign y__h6539 = y__h6288 & y__h6586 ;
  assign y__h6586 = tmp_a[3] ^ tmp_fraction[3] ;
  assign y__h6672 = x__h6730 | y__h6731 ;
  assign y__h6731 = y__h6480 & y__h6778 ;
  assign y__h6778 = tmp_a[4] ^ tmp_fraction[4] ;
  assign y__h6864 = x__h6922 | y__h6923 ;
  assign y__h6923 = y__h6672 & y__h6970 ;
  assign y__h6970 = tmp_a[5] ^ tmp_fraction[5] ;
  assign y__h7056 = x__h7114 | y__h7115 ;
  assign y__h7115 = y__h6864 & y__h7162 ;
  assign y__h7162 = tmp_a[6] ^ tmp_fraction[6] ;
  assign y__h7248 = x__h7306 | y__h7307 ;
  assign y__h7307 = y__h7056 & y__h7354 ;
  assign y__h7354 = tmp_a[7] ^ tmp_fraction[7] ;
  assign y__h7440 = x__h7498 | y__h7499 ;
  assign y__h7499 = y__h7248 & y__h7546 ;
  assign y__h7546 = tmp_a[8] ^ tmp_fraction[8] ;
  assign y__h7632 = x__h7690 | y__h7691 ;
  assign y__h7691 = y__h7440 & y__h7738 ;
  assign y__h7738 = tmp_a[9] ^ tmp_fraction[9] ;
  assign y__h7824 = x__h7882 | y__h7883 ;
  assign y__h7883 = y__h7632 & y__h7930 ;
  assign y__h7930 = tmp_a[10] ^ tmp_fraction[10] ;
  assign y__h8016 = x__h8074 | y__h8075 ;
  assign y__h8075 = y__h7824 & y__h8122 ;
  assign y__h8122 = tmp_a[11] ^ tmp_fraction[11] ;
  assign y__h8208 = x__h8266 | y__h8267 ;
  assign y__h8267 = y__h8016 & y__h8314 ;
  assign y__h8314 = tmp_a[12] ^ tmp_fraction[12] ;
  assign y__h8400 = x__h8458 | y__h8459 ;
  assign y__h8459 = y__h8208 & y__h8506 ;
  assign y__h8506 = tmp_a[13] ^ tmp_fraction[13] ;
  assign y__h8592 = x__h8650 | y__h8651 ;
  assign y__h8651 = y__h8400 & y__h8698 ;
  assign y__h8698 = tmp_a[14] ^ tmp_fraction[14] ;
  assign y__h9671 = tmp_exp[0] & tmp_exp[1] ;
  assign y__h9857 = y__h9671 & tmp_exp[2] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	end_result <= `BSV_ASSIGNMENT_DELAY 16'd0;
	exp_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	exp_mantissa <= `BSV_ASSIGNMENT_DELAY 15'd0;
	exp_res <= `BSV_ASSIGNMENT_DELAY 8'd0;
	get_r <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mantissa_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	mul_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pack_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	res_deq_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	result_concatenated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tmp_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_a_a <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_b <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_exp <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tmp_fraction <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tmp_sign <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (end_result_EN)
	  end_result <= `BSV_ASSIGNMENT_DELAY end_result_D_IN;
	if (exp_done_EN) exp_done <= `BSV_ASSIGNMENT_DELAY exp_done_D_IN;
	if (exp_mantissa_EN)
	  exp_mantissa <= `BSV_ASSIGNMENT_DELAY exp_mantissa_D_IN;
	if (exp_res_EN) exp_res <= `BSV_ASSIGNMENT_DELAY exp_res_D_IN;
	if (get_r_EN) get_r <= `BSV_ASSIGNMENT_DELAY get_r_D_IN;
	if (got_a_EN) got_a <= `BSV_ASSIGNMENT_DELAY got_a_D_IN;
	if (got_b_EN) got_b <= `BSV_ASSIGNMENT_DELAY got_b_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (mantissa_done_EN)
	  mantissa_done <= `BSV_ASSIGNMENT_DELAY mantissa_done_D_IN;
	if (mul_count_EN) mul_count <= `BSV_ASSIGNMENT_DELAY mul_count_D_IN;
	if (mul_done_EN) mul_done <= `BSV_ASSIGNMENT_DELAY mul_done_D_IN;
	if (mul_start_EN) mul_start <= `BSV_ASSIGNMENT_DELAY mul_start_D_IN;
	if (pack_done_EN) pack_done <= `BSV_ASSIGNMENT_DELAY pack_done_D_IN;
	if (res_deq_done_EN)
	  res_deq_done <= `BSV_ASSIGNMENT_DELAY res_deq_done_D_IN;
	if (result_concatenated_EN)
	  result_concatenated <= `BSV_ASSIGNMENT_DELAY
	      result_concatenated_D_IN;
	if (sign_done_EN) sign_done <= `BSV_ASSIGNMENT_DELAY sign_done_D_IN;
	if (start_done_EN)
	  start_done <= `BSV_ASSIGNMENT_DELAY start_done_D_IN;
	if (tmp_a_EN) tmp_a <= `BSV_ASSIGNMENT_DELAY tmp_a_D_IN;
	if (tmp_a_a_EN) tmp_a_a <= `BSV_ASSIGNMENT_DELAY tmp_a_a_D_IN;
	if (tmp_b_EN) tmp_b <= `BSV_ASSIGNMENT_DELAY tmp_b_D_IN;
	if (tmp_exp_EN) tmp_exp <= `BSV_ASSIGNMENT_DELAY tmp_exp_D_IN;
	if (tmp_fraction_EN)
	  tmp_fraction <= `BSV_ASSIGNMENT_DELAY tmp_fraction_D_IN;
	if (tmp_sign_EN) tmp_sign <= `BSV_ASSIGNMENT_DELAY tmp_sign_D_IN;
      end
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      fifo_a_rv <= `BSV_ASSIGNMENT_DELAY
	  { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
      fifo_b_rv <= `BSV_ASSIGNMENT_DELAY
	  { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
      fifo_res_rv <= `BSV_ASSIGNMENT_DELAY
	  { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
    end
  else
    begin
      if (fifo_a_rv_EN) fifo_a_rv <= `BSV_ASSIGNMENT_DELAY fifo_a_rv_D_IN;
      if (fifo_b_rv_EN) fifo_b_rv <= `BSV_ASSIGNMENT_DELAY fifo_b_rv_D_IN;
      if (fifo_res_rv_EN)
	fifo_res_rv <= `BSV_ASSIGNMENT_DELAY fifo_res_rv_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 16'hAAAA;
    b = 16'hAAAA;
    end_result = 16'hAAAA;
    exp_done = 1'h0;
    exp_mantissa = 15'h2AAA;
    exp_res = 8'hAA;
    fifo_a_rv = 17'h0AAAA;
    fifo_b_rv = 17'h0AAAA;
    fifo_res_rv = 17'h0AAAA;
    get_r = 1'h0;
    got_a = 1'h0;
    got_b = 1'h0;
    handle_zero = 1'h0;
    mantissa_done = 1'h0;
    mul_count = 4'hA;
    mul_done = 1'h0;
    mul_start = 1'h0;
    pack_done = 1'h0;
    res_deq_done = 1'h0;
    result_concatenated = 1'h0;
    sign_done = 1'h0;
    start_done = 1'h0;
    tmp_a = 16'hAAAA;
    tmp_a_a = 8'hAA;
    tmp_b = 8'hAA;
    tmp_exp = 8'hAA;
    tmp_fraction = 16'hAAAA;
    tmp_sign = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h5134 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h5134, "  a.exp: %b   b.exp: %b", a[14:7], b[14:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	begin
	  v__h5183 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_add_exp)
	$display(v__h5183,
		 "  a.mantissa: %b   b.mantissa: %b ",
		 a[6:0],
		 b[6:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h5324 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h5324, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	begin
	  v__h5372 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display(v__h5372, " tmp_a         %b ", tmp_a);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mul_mantissa)
	$display("********************************");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h8894 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h8894, " tmp_fraction %b ", tmp_fraction);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	begin
	  v__h8941 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_round_mantissa)
	$display(v__h8941, " tmp_exp       %b ", tmp_exp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	begin
	  v__h25491 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_mul_res)
	$display(v__h25491,
		 " MUL: sign %b exp: %b mantissa %b",
		 tmp_sign,
		 exp_mantissa[14:7],
		 exp_mantissa[6:0]);
  end
  // synopsys translate_on
endmodule  // mkPipelined_float_mul

